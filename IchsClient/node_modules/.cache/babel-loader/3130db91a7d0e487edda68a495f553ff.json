{"ast":null,"code":"'use client';\n\nimport { KEY_VALUES } from \"../../constants/index.js\";\nimport { useEventCallback } from \"../../hooks/index.js\";\n/**\n * A hook to control the toggle keyboard operation\n * @param props\n */\nvar useToggleKeyDownEvent = function useToggleKeyDownEvent(props) {\n  var _props$toggle = props.toggle,\n    toggle = _props$toggle === void 0 ? true : _props$toggle,\n    trigger = props.trigger,\n    target = props.target,\n    overlay = props.overlay,\n    searchInput = props.searchInput,\n    active = props.active,\n    readOnly = props.readOnly,\n    disabled = props.disabled,\n    loading = props.loading,\n    onExit = props.onExit,\n    onKeyDown = props.onKeyDown,\n    onMenuKeyDown = props.onMenuKeyDown,\n    onMenuPressEnter = props.onMenuPressEnter,\n    onMenuPressBackspace = props.onMenuPressBackspace;\n  var handleClose = useEventCallback(function () {\n    var _trigger$current, _trigger$current$clos, _trigger$current2, _trigger$current2$foc;\n    (_trigger$current = trigger.current) === null || _trigger$current === void 0 ? void 0 : (_trigger$current$clos = _trigger$current.close) === null || _trigger$current$clos === void 0 ? void 0 : _trigger$current$clos.call(_trigger$current);\n\n    // The focus is on the trigger button after closing\n    (_trigger$current2 = trigger.current) === null || _trigger$current2 === void 0 ? void 0 : (_trigger$current2$foc = _trigger$current2.focus) === null || _trigger$current2$foc === void 0 ? void 0 : _trigger$current2$foc.call(_trigger$current2);\n  });\n  var handleOpen = useEventCallback(function () {\n    var _trigger$current3, _trigger$current3$ope;\n    (_trigger$current3 = trigger.current) === null || _trigger$current3 === void 0 ? void 0 : (_trigger$current3$ope = _trigger$current3.open) === null || _trigger$current3$ope === void 0 ? void 0 : _trigger$current3$ope.call(_trigger$current3);\n  });\n  var handleToggleDropdown = useEventCallback(function () {\n    if (active) {\n      handleClose();\n      return;\n    }\n    handleOpen();\n  });\n  var onToggle = useEventCallback(function (event) {\n    // Keyboard events should not be processed when readOnly and disabled are set.\n    if (readOnly || disabled || loading) {\n      return;\n    }\n    if (event.target === (target === null || target === void 0 ? void 0 : target.current)) {\n      // enter\n      if (toggle && event.key === KEY_VALUES.ENTER) {\n        handleToggleDropdown();\n      }\n\n      // delete\n      if (event.key === KEY_VALUES.BACKSPACE) {\n        onExit === null || onExit === void 0 ? void 0 : onExit(event);\n      }\n    }\n    if (overlay !== null && overlay !== void 0 && overlay.current) {\n      // The keyboard operation callback on the menu.\n      onMenuKeyDown === null || onMenuKeyDown === void 0 ? void 0 : onMenuKeyDown(event);\n      if (event.key === KEY_VALUES.ENTER) {\n        onMenuPressEnter === null || onMenuPressEnter === void 0 ? void 0 : onMenuPressEnter(event);\n      }\n\n      /**\n       * There is no callback when typing the Backspace key in the search box.\n       * The default is to remove search keywords\n       */\n      if (event.key === KEY_VALUES.BACKSPACE && event.target !== (searchInput === null || searchInput === void 0 ? void 0 : searchInput.current)) {\n        onMenuPressBackspace === null || onMenuPressBackspace === void 0 ? void 0 : onMenuPressBackspace(event);\n      }\n\n      // The search box gets focus when typing characters and numbers.\n      if (event.key.length === 1 && /\\w/.test(event.key)) {\n        var _event$target;\n        // Exclude Input\n        // eg: <SelectPicker renderExtraFooter={() => <Input />} />\n        if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.tagName) !== 'INPUT') {\n          var _searchInput$current;\n          searchInput === null || searchInput === void 0 ? void 0 : (_searchInput$current = searchInput.current) === null || _searchInput$current === void 0 ? void 0 : _searchInput$current.focus();\n        }\n      }\n    }\n    if (event.key === KEY_VALUES.ESC || event.key === KEY_VALUES.TAB) {\n      handleClose();\n    }\n\n    // Native event callback\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  });\n  return onToggle;\n};\nexport default useToggleKeyDownEvent;","map":null,"metadata":{},"sourceType":"module"}