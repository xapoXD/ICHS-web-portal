{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"style\", \"children\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { ModalContext } from \"./ModalContext.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Close from '@rsuite/icons/Close';\nimport DrawerContext from \"../Drawer/DrawerContext.js\";\nvar ModalBody = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _context$getBodyStyle, _useContext;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'modal-body' : _props$classPrefix,\n    className = props.className,\n    style = props.style,\n    children = props.children,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix());\n  var context = useContext(ModalContext);\n  var bodyStyles = context === null || context === void 0 ? void 0 : (_context$getBodyStyle = context.getBodyStyles) === null || _context$getBodyStyle === void 0 ? void 0 : _context$getBodyStyle.call(context);\n  var closeButton = (_useContext = useContext(DrawerContext)) === null || _useContext === void 0 ? void 0 : _useContext.closeButton;\n  var buttonElement = null;\n  if (closeButton) {\n    buttonElement = typeof closeButton === 'boolean' ? /*#__PURE__*/React.createElement(IconButton, {\n      icon: /*#__PURE__*/React.createElement(Close, null),\n      appearance: \"subtle\",\n      size: \"sm\",\n      className: prefix('close'),\n      onClick: context === null || context === void 0 ? void 0 : context.onModalClose\n    }) : closeButton;\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    style: _extends({}, bodyStyles, style),\n    className: classes\n  }), buttonElement, children);\n});\nModalBody.displayName = 'ModalBody';\nModalBody.propTypes = {\n  as: PropTypes.elementType,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string\n};\nexport default ModalBody;","map":null,"metadata":{},"sourceType":"module"}