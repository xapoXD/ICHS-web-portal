{"ast":null,"code":"import { MixedType } from './MixedType';\nfunction toNumber(value) {\n  return +value;\n}\nexport class NumberType extends MixedType {\n  constructor(errorMessage) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  isInteger(errorMessage = this.locale.isInteger) {\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n    return this;\n  }\n  pattern(regexp, errorMessage = this.locale.pattern) {\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n  isOneOf(values, errorMessage = this.locale.isOneOf) {\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n  range(min, max, errorMessage = this.locale.range) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n  min(min, errorMessage = this.locale.min) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n  max(max, errorMessage = this.locale.max) {\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n}\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}