{"ast":null,"code":"'use client';\n\nimport { useEffect, useRef, useCallback } from 'react';\n/**\n * A timer hook\n * @param fn Timer callback function\n * @param ms Milliseconds of the timer\n * @param enabled Whether to open the timer\n */\nexport function useTimeout(fn, ms, enabled) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n  if (enabled === void 0) {\n    enabled = true;\n  }\n  var timeout = useRef();\n  var callback = useRef(fn);\n  var clear = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n  var set = useCallback(function () {\n    timeout.current && clearTimeout(timeout.current);\n    if (enabled) {\n      timeout.current = setTimeout(function () {\n        var _callback$current;\n        (_callback$current = callback.current) === null || _callback$current === void 0 ? void 0 : _callback$current.call(callback);\n      }, ms);\n    }\n  }, [ms, enabled]);\n\n  // update ref when function changes\n  useEffect(function () {\n    callback.current = fn;\n  }, [fn]);\n  useEffect(function () {\n    set();\n    return clear;\n  }, [ms, enabled, set, clear]);\n  return {\n    clear: clear,\n    reset: set\n  };\n}\nexport default useTimeout;","map":null,"metadata":{},"sourceType":"module"}