{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"data\", \"defaultValue\", \"className\", \"classPrefix\", \"value\", \"valueKey\", \"labelKey\", \"childrenKey\", \"disabledItemValues\", \"cascade\", \"columnWidth\", \"columnHeight\", \"searchable\", \"uncheckableItemValues\", \"getChildren\", \"renderColumn\", \"renderTreeNode\", \"onSelect\", \"onCheck\", \"onChange\", \"onSearch\"];\nimport React from 'react';\nimport TreeView from \"./TreeView.js\";\nimport { useCascadeValue, useSelect, useSearch } from \"./hooks/index.js\";\nimport { useClassNames, useControlled } from \"../internals/hooks/index.js\";\nimport SearchView from \"./SearchView.js\";\nvar emptyArray = [];\n\n/**\n * The `MultiCascadeTree` component is used to select multiple values from cascading options.\n * @see https://rsuitejs.com/components/multi-cascade-tree/\n */\nvar MultiCascadeTree = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$data = props.data,\n    data = _props$data === void 0 ? emptyArray : _props$data,\n    defaultValue = props.defaultValue,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'cascade-tree' : _props$classPrefix,\n    valueProp = props.value,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    _props$cascade = props.cascade,\n    cascade = _props$cascade === void 0 ? true : _props$cascade,\n    columnWidth = props.columnWidth,\n    columnHeight = props.columnHeight,\n    searchable = props.searchable,\n    _props$uncheckableIte = props.uncheckableItemValues,\n    uncheckableItemValues = _props$uncheckableIte === void 0 ? emptyArray : _props$uncheckableIte,\n    getChildren = props.getChildren,\n    renderColumn = props.renderColumn,\n    renderTreeNode = props.renderTreeNode,\n    onSelect = props.onSelect,\n    onCheck = props.onCheck,\n    onChange = props.onChange,\n    onSearch = props.onSearch,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var itemKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n  var _useSelect = useSelect({\n      data: data,\n      childrenKey: childrenKey,\n      labelKey: labelKey,\n      valueKey: valueKey,\n      onSelect: onSelect,\n      getChildren: getChildren\n    }),\n    selectedPaths = _useSelect.selectedPaths,\n    flattenData = _useSelect.flattenData,\n    columnData = _useSelect.columnData,\n    handleSelect = _useSelect.handleSelect;\n  var _useControlled = useControlled(valueProp, defaultValue),\n    controlledValue = _useControlled[0];\n  var cascadeValueProps = _extends({}, itemKeys, {\n    uncheckableItemValues: uncheckableItemValues,\n    cascade: cascade,\n    value: controlledValue,\n    onCheck: onCheck,\n    onChange: onChange\n  });\n  var _useCascadeValue = useCascadeValue(cascadeValueProps, flattenData),\n    value = _useCascadeValue.value,\n    handleCheck = _useCascadeValue.handleCheck;\n  var _useSearch = useSearch({\n      labelKey: labelKey,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      flattenedData: flattenData,\n      uncheckableItemValues: uncheckableItemValues,\n      onSearch: onSearch\n    }),\n    items = _useSearch.items,\n    searchKeyword = _useSearch.searchKeyword,\n    handleSearch = _useSearch.handleSearch;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix('multi'));\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: classes\n  }, rest), searchable && /*#__PURE__*/React.createElement(SearchView, {\n    data: items,\n    value: value,\n    searchKeyword: searchKeyword,\n    valueKey: valueKey,\n    labelKey: labelKey,\n    childrenKey: childrenKey,\n    disabledItemValues: disabledItemValues,\n    onCheck: handleCheck,\n    onSearch: handleSearch\n  }), !searchKeyword && /*#__PURE__*/React.createElement(TreeView, {\n    cascade: cascade,\n    columnWidth: columnWidth,\n    columnHeight: columnHeight,\n    uncheckableItemValues: uncheckableItemValues,\n    disabledItemValues: disabledItemValues,\n    valueKey: valueKey,\n    labelKey: labelKey,\n    childrenKey: childrenKey,\n    classPrefix: classPrefix,\n    cascadeData: columnData,\n    cascadePaths: selectedPaths,\n    value: value,\n    onSelect: handleSelect,\n    onCheck: handleCheck,\n    renderColumn: renderColumn,\n    renderTreeNode: renderTreeNode\n  }));\n});\nMultiCascadeTree.displayName = 'MultiCascadeTree';\nexport default MultiCascadeTree;","map":null,"metadata":{},"sourceType":"module"}