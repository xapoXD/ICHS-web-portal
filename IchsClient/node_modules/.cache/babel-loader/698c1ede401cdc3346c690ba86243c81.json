{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"label\", \"layer\", \"active\", \"loading\", \"nodeData\", \"className\", \"classPrefix\", \"disabled\", \"visible\", \"draggable\", \"expanded\", \"focus\", \"style\", \"hasChildren\", \"dragging\", \"dragStatus\", \"onSelect\", \"onDragStart\", \"onDragOver\", \"onDragEnter\", \"onDragLeave\", \"onDragEnd\", \"onDrop\", \"onExpand\"];\nimport React, { forwardRef, useMemo } from 'react';\nimport { mergeRefs, stringifyReactNode } from \"../internals/utils/index.js\";\nimport { useFocusVirtualListItem, useClassNames, useEventCallback, useCustom } from \"../internals/hooks/index.js\";\nimport TreeNodeToggle from \"./TreeNodeToggle.js\";\nimport { useTreeContextProps } from \"../internals/Tree/TreeProvider.js\";\nimport { indentTreeNode } from \"./utils/index.js\";\n\n/**\n * Props for the TreeNode component.\n */\n\nvar TreeNode = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    label = props.label,\n    layer = props.layer,\n    active = props.active,\n    loading = props.loading,\n    nodeData = props.nodeData,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'tree-node' : _props$classPrefix,\n    disabled = props.disabled,\n    _props$visible = props.visible,\n    visible = _props$visible === void 0 ? true : _props$visible,\n    draggable = props.draggable,\n    expanded = props.expanded,\n    focus = props.focus,\n    style = props.style,\n    hasChildren = props.hasChildren,\n    dragging = props.dragging,\n    dragStatus = props.dragStatus,\n    onSelect = props.onSelect,\n    onDragStart = props.onDragStart,\n    onDragOver = props.onDragOver,\n    onDragEnter = props.onDragEnter,\n    onDragLeave = props.onDragLeave,\n    onDragEnd = props.onDragEnd,\n    onDrop = props.onDrop,\n    onExpand = props.onExpand,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useTreeContextProps = useTreeContextProps(),\n    renderTreeNode = _useTreeContextProps.renderTreeNode,\n    virtualized = _useTreeContextProps.virtualized;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var labelStr = useMemo(function () {\n    return stringifyReactNode(label);\n  }, [label]);\n  var handleExpand = useEventCallback(function (event) {\n    var _event$nativeEvent, _event$nativeEvent$st;\n    // Stop propagation when using custom loading icon\n    event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : (_event$nativeEvent$st = _event$nativeEvent.stopImmediatePropagation) === null || _event$nativeEvent$st === void 0 ? void 0 : _event$nativeEvent$st.call(_event$nativeEvent);\n    event.stopPropagation();\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nodeData, expanded);\n  });\n  var handleSelect = useEventCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, event);\n  });\n  var handleDragStart = useEventCallback(function (event) {\n    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(nodeData, event);\n  });\n  var handleDragEnter = useEventCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(nodeData, event);\n  });\n  var handleDragOver = useEventCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(nodeData, event);\n  });\n  var handleDragLeave = useEventCallback(function (event) {\n    event.stopPropagation();\n    onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(nodeData, event);\n  });\n  var handleDragEnd = useEventCallback(function (event) {\n    event.stopPropagation();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(nodeData, event);\n  });\n  var handleDrop = useEventCallback(function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onDrop === null || onDrop === void 0 ? void 0 : onDrop(nodeData, event);\n  });\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled,\n    active: active,\n    'text-muted': disabled,\n    focus: focus\n  }));\n  var treeItemRef = useFocusVirtualListItem(focus);\n  var styles = virtualized ? _extends({}, style, indentTreeNode(rtl, layer - 1)) : style;\n  return visible ? /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: mergeRefs(treeItemRef, ref),\n    role: \"treeitem\",\n    tabIndex: -1,\n    \"aria-expanded\": expanded,\n    \"aria-label\": labelStr,\n    \"aria-level\": layer,\n    \"aria-disabled\": disabled,\n    \"aria-selected\": active,\n    \"data-layer\": layer,\n    \"data-key\": (nodeData === null || nodeData === void 0 ? void 0 : nodeData.refKey) || '',\n    title: labelStr,\n    className: classes,\n    style: styles,\n    draggable: draggable,\n    onClick: handleSelect,\n    onDragStart: handleDragStart,\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDragEnd: handleDragEnd,\n    onDrop: handleDrop\n  }), /*#__PURE__*/React.createElement(TreeNodeToggle, {\n    \"aria-label\": (expanded ? 'Collapse' : 'Expand') + (\" \" + labelStr),\n    data: nodeData,\n    loading: loading,\n    expanded: expanded,\n    hasChildren: hasChildren,\n    onClick: handleExpand\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('label', dragStatus, {\n      dragging: dragging\n    })\n  }, renderTreeNode ? renderTreeNode(nodeData) : label)) : null;\n});\nTreeNode.displayName = 'TreeNode';\nexport default TreeNode;","map":null,"metadata":{},"sourceType":"module"}