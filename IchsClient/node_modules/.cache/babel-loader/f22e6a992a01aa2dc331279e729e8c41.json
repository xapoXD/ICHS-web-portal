{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useEventCallback, useUpdateEffect, useIsMounted } from \"../../internals/hooks/index.js\";\nimport useFlattenData from \"./useFlattenData.js\";\nimport useColumnData from \"./useColumnData.js\";\nvar useSelect = function useSelect(props) {\n  var data = props.data,\n    childrenKey = props.childrenKey,\n    labelKey = props.labelKey,\n    valueKey = props.valueKey,\n    onSelect = props.onSelect,\n    getChildren = props.getChildren;\n  var itemKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n  var _useFlattenData = useFlattenData(data, itemKeys),\n    flattenData = _useFlattenData.flattenData,\n    addFlattenData = _useFlattenData.addFlattenData;\n\n  // The columns displayed in the cascading panel.\n  var _useColumnData = useColumnData(flattenData),\n    columnData = _useColumnData.columnData,\n    addColumn = _useColumnData.addColumn,\n    setColumnData = _useColumnData.setColumnData,\n    removeColumnByIndex = _useColumnData.removeColumnByIndex,\n    enforceUpdateColumnData = _useColumnData.enforceUpdateColumnData;\n  useUpdateEffect(function () {\n    enforceUpdateColumnData(data);\n  }, [data]);\n  var isMounted = useIsMounted();\n\n  // The path after cascading data selection.\n  var _useState = useState(),\n    selectedPaths = _useState[0],\n    setSelectedPaths = _useState[1];\n  var handleSelect = useEventCallback(function (node, cascadePaths, event) {\n    var _node$childrenKey, _node$childrenKey2;\n    setSelectedPaths(cascadePaths);\n    var columnIndex = cascadePaths.length;\n\n    // Lazy load node's children\n    if (typeof getChildren === 'function' && ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) === 0) {\n      node.loading = true;\n      var children = getChildren(node);\n      if (children instanceof Promise) {\n        children.then(function (data) {\n          node.loading = false;\n          node[childrenKey] = data;\n          if (isMounted()) {\n            addFlattenData(data, node);\n            addColumn(data, columnIndex);\n          }\n        });\n      } else {\n        node.loading = false;\n        node[childrenKey] = children;\n        addFlattenData(children, node);\n        addColumn(children, columnIndex);\n      }\n    } else if ((_node$childrenKey2 = node[childrenKey]) !== null && _node$childrenKey2 !== void 0 && _node$childrenKey2.length) {\n      addColumn(node[childrenKey], columnIndex);\n    } else {\n      // Removes subsequent columns of the current column when the clicked node is a leaf node.\n      removeColumnByIndex(columnIndex);\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, event);\n  });\n  return {\n    columnData: columnData,\n    setColumnData: setColumnData,\n    flattenData: flattenData,\n    selectedPaths: selectedPaths,\n    setSelectedPaths: setSelectedPaths,\n    handleSelect: handleSelect\n  };\n};\nexport default useSelect;","map":null,"metadata":{},"sourceType":"module"}