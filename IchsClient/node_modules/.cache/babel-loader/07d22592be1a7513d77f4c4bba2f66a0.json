{"ast":null,"code":"import canUseDOM from \"./canUseDOM.js\";\nvar fallback = function fallback(context, node) {\n  if (!node) return false;\n  do {\n    if (node === context) {\n      return true;\n    }\n  } while (node.parentNode && (node = node.parentNode));\n  return false;\n};\n/**\n * Checks if an element contains another given element.\n *\n * @param context The context element\n * @param node The element to check\n * @returns  `true` if the given element is contained, `false` otherwise\n */\n\nvar contains = function contains(context, node) {\n  if (!node) return false;\n  if (context.contains) {\n    return context.contains(node);\n  } else if (context.compareDocumentPosition) {\n    return context === node || !!(context.compareDocumentPosition(node) & 16);\n  }\n  return fallback(context, node);\n};\nexport default (function () {\n  return canUseDOM ? contains : fallback;\n})();","map":null,"metadata":{},"sourceType":"module"}