{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"appearance\", \"expanded\", \"activeKey\", \"defaultOpenKeys\", \"openKeys\", \"onSelect\", \"onOpenChange\"],\n  _excluded2 = [\"className\"];\nimport React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport remove from 'lodash/remove';\nimport Transition from \"../Animation/Transition.js\";\nimport SidenavBody from \"./SidenavBody.js\";\nimport SidenavHeader from \"./SidenavHeader.js\";\nimport SidenavToggle from \"./SidenavToggle.js\";\nimport { useClassNames, useControlled } from \"../internals/hooks/index.js\";\nimport { mergeRefs, shallowEqual } from \"../internals/utils/index.js\";\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\nexport var SidenavContext = /*#__PURE__*/React.createContext(null);\nvar emptyArray = [];\n\n/**\n * The `Sidenav` component is an encapsulation of the page sidebar `Nav`.\n * @see https://rsuitejs.com/components/sidenav/\n */\nvar Sidenav = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'nav' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'sidenav' : _props$classPrefix,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$expanded = props.expanded,\n    expanded = _props$expanded === void 0 ? true : _props$expanded,\n    activeKey = props.activeKey,\n    _props$defaultOpenKey = props.defaultOpenKeys,\n    defaultOpenKeys = _props$defaultOpenKey === void 0 ? emptyArray : _props$defaultOpenKey,\n    openKeysProp = props.openKeys,\n    onSelect = props.onSelect,\n    onOpenChange = props.onOpenChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useControlled = useControlled(openKeysProp, defaultOpenKeys),\n    openKeys = _useControlled[0],\n    setOpenKeys = _useControlled[1];\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix(appearance));\n  var handleOpenChange = useCallback(function (eventKey, event) {\n    var find = function find(key) {\n      return shallowEqual(key, eventKey);\n    };\n    var nextOpenKeys = [].concat(openKeys);\n    if (nextOpenKeys.some(find)) {\n      remove(nextOpenKeys, find);\n    } else {\n      nextOpenKeys.push(eventKey);\n    }\n    setOpenKeys(nextOpenKeys);\n    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(nextOpenKeys, event);\n  }, [onOpenChange, openKeys, setOpenKeys]);\n  var contextValue = useMemo(function () {\n    return {\n      expanded: expanded,\n      activeKey: activeKey,\n      sidenav: true,\n      openKeys: openKeys !== null && openKeys !== void 0 ? openKeys : [],\n      onOpenChange: handleOpenChange,\n      onSelect: onSelect\n    };\n  }, [activeKey, expanded, handleOpenChange, onSelect, openKeys]);\n  return /*#__PURE__*/React.createElement(SidenavContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Transition, {\n    in: expanded,\n    timeout: 300,\n    exitedClassName: prefix('collapse-out'),\n    exitingClassName: prefix('collapse-out', 'collapsing'),\n    enteredClassName: prefix('collapse-in'),\n    enteringClassName: prefix('collapse-in', 'collapsing')\n  }, function (transitionProps, transitionRef) {\n    var className = transitionProps.className,\n      transitionRest = _objectWithoutPropertiesLoose(transitionProps, _excluded2);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, rest, transitionRest, {\n      ref: mergeRefs(ref, transitionRef),\n      className: merge(classes, className)\n    }));\n  }));\n});\nSidenav.Header = SidenavHeader;\nSidenav.Body = SidenavBody;\nSidenav.Toggle = SidenavToggle;\nSidenav.displayName = 'Sidenav';\nSidenav.propTypes = {\n  as: PropTypes.elementType,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  expanded: PropTypes.bool,\n  appearance: oneOf(['default', 'inverse', 'subtle']),\n  defaultOpenKeys: PropTypes.array,\n  openKeys: PropTypes.array,\n  onOpenChange: PropTypes.func,\n  activeKey: deprecatePropType(PropTypes.any, 'Use `activeKey` on <Nav> component instead'),\n  onSelect: deprecatePropType(PropTypes.func, 'Use `onSelect` on <Nav> component instead')\n};\nexport default Sidenav;","map":null,"metadata":{},"sourceType":"module"}