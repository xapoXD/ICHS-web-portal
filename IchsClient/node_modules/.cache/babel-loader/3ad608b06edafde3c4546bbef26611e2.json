{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport { COLUMN_SIZE } from \"../internals/constants/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\n/**\n * The `Col` component is used for layout and grids.\n * @see https://rsuitejs.com/en/components/grid\n */\nvar Col = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'col' : _props$classPrefix,\n    className = props.className,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    rootPrefix = _useClassNames.rootPrefix,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var colClasses = {};\n  var omitKeys = {};\n  var getPropValue = function getPropValue(key) {\n    omitKeys[key] = null;\n    return rest[key];\n  };\n  COLUMN_SIZE.forEach(function (size) {\n    var col = getPropValue(size);\n    var hidden = getPropValue(size + \"Hidden\");\n    var offset = getPropValue(size + \"Offset\");\n    var push = getPropValue(size + \"Push\");\n    var pull = getPropValue(size + \"Pull\");\n    colClasses[rootPrefix(\"hidden-\" + size)] = hidden;\n    colClasses[prefix(size + \"-\" + col)] = col >= 0;\n    colClasses[prefix(size + \"-offset-\" + offset)] = offset >= 0;\n    colClasses[prefix(size + \"-push-\" + push)] = push >= 0;\n    colClasses[prefix(size + \"-pull-\" + pull)] = pull >= 0;\n  });\n  var classes = merge(className, withClassPrefix(), colClasses);\n  var unhandledProps = omit(rest, Object.keys(omitKeys));\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"gridcell\"\n  }, unhandledProps, {\n    ref: ref,\n    className: classes\n  }));\n});\nCol.displayName = 'Col';\nCol.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  xs: PropTypes.number,\n  sm: PropTypes.number,\n  md: PropTypes.number,\n  lg: PropTypes.number,\n  xl: PropTypes.number,\n  xxl: PropTypes.number,\n  xsOffset: PropTypes.number,\n  smOffset: PropTypes.number,\n  mdOffset: PropTypes.number,\n  lgOffset: PropTypes.number,\n  xlOffset: PropTypes.number,\n  xxlOffset: PropTypes.number,\n  xsPush: PropTypes.number,\n  smPush: PropTypes.number,\n  mdPush: PropTypes.number,\n  lgPush: PropTypes.number,\n  xsPull: PropTypes.number,\n  smPull: PropTypes.number,\n  mdPull: PropTypes.number,\n  lgPull: PropTypes.number,\n  xlPull: PropTypes.number,\n  xxlPull: PropTypes.number,\n  xsHidden: PropTypes.bool,\n  smHidden: PropTypes.bool,\n  mdHidden: PropTypes.bool,\n  lgHidden: PropTypes.bool,\n  xlHidden: PropTypes.bool,\n  xxlHidden: PropTypes.bool,\n  as: PropTypes.elementType\n};\nexport default Col;","map":null,"metadata":{},"sourceType":"module"}