{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"checkTrigger\", \"classPrefix\", \"errorFromContext\", \"formDefaultValue\", \"formValue\", \"formError\", \"fluid\", \"nestedField\", \"layout\", \"model\", \"readOnly\", \"plaintext\", \"className\", \"children\", \"disabled\", \"onSubmit\", \"onReset\", \"onCheck\", \"onError\", \"onChange\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { SchemaModel } from 'schema-typed';\nimport { FormValueProvider, FormProvider } from \"./FormContext.js\";\nimport FormControl from \"../FormControl/index.js\";\nimport FormControlLabel from \"../FormControlLabel/index.js\";\nimport FormErrorMessage from \"../FormErrorMessage/index.js\";\nimport FormGroup from \"../FormGroup/index.js\";\nimport FormHelpText from \"../FormHelpText/index.js\";\nimport { useEventCallback } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport useSchemaModel from \"./hooks/useSchemaModel.js\";\nimport useFormValidate from \"./hooks/useFormValidate.js\";\nimport useFormValue from \"./hooks/useFormValue.js\";\nimport useFormClassNames from \"./hooks/useFormClassNames.js\";\nimport useFormRef from \"./hooks/useFormRef.js\";\nvar defaultSchema = SchemaModel({});\n\n/**\n * The `Form` component is a form interface for collecting and validating user input.\n * @see https://rsuitejs.com/components/form\n */\nvar Form = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$checkTrigger = props.checkTrigger,\n    checkTrigger = _props$checkTrigger === void 0 ? 'change' : _props$checkTrigger,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'form' : _props$classPrefix,\n    _props$errorFromConte = props.errorFromContext,\n    errorFromContext = _props$errorFromConte === void 0 ? true : _props$errorFromConte,\n    _props$formDefaultVal = props.formDefaultValue,\n    formDefaultValue = _props$formDefaultVal === void 0 ? {} : _props$formDefaultVal,\n    controlledFormValue = props.formValue,\n    controlledFormError = props.formError,\n    fluid = props.fluid,\n    _props$nestedField = props.nestedField,\n    nestedField = _props$nestedField === void 0 ? false : _props$nestedField,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? 'vertical' : _props$layout,\n    _props$model = props.model,\n    formModel = _props$model === void 0 ? defaultSchema : _props$model,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    className = props.className,\n    children = props.children,\n    disabled = props.disabled,\n    onSubmit = props.onSubmit,\n    onReset = props.onReset,\n    onCheck = props.onCheck,\n    onError = props.onError,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useSchemaModel = useSchemaModel(formModel),\n    getCombinedModel = _useSchemaModel.getCombinedModel,\n    pushFieldRule = _useSchemaModel.pushFieldRule,\n    removeFieldRule = _useSchemaModel.removeFieldRule;\n  var _useFormValue = useFormValue(controlledFormValue, {\n      formDefaultValue: formDefaultValue,\n      nestedField: nestedField\n    }),\n    formValue = _useFormValue.formValue,\n    onRemoveValue = _useFormValue.onRemoveValue,\n    setFieldValue = _useFormValue.setFieldValue,\n    resetFormValue = _useFormValue.resetFormValue;\n  var formValidateProps = {\n    formValue: formValue,\n    getCombinedModel: getCombinedModel,\n    onCheck: onCheck,\n    onError: onError,\n    nestedField: nestedField\n  };\n  var _useFormValidate = useFormValidate(controlledFormError, formValidateProps),\n    formError = _useFormValidate.formError,\n    setFieldError = _useFormValidate.setFieldError,\n    onRemoveError = _useFormValidate.onRemoveError,\n    check = _useFormValidate.check,\n    checkAsync = _useFormValidate.checkAsync,\n    checkForField = _useFormValidate.checkForField,\n    checkForFieldAsync = _useFormValidate.checkForFieldAsync,\n    cleanErrors = _useFormValidate.cleanErrors,\n    resetErrors = _useFormValidate.resetErrors,\n    cleanErrorForField = _useFormValidate.cleanErrorForField;\n  var classes = useFormClassNames({\n    classPrefix: classPrefix,\n    className: className,\n    fluid: fluid,\n    layout: layout,\n    readOnly: readOnly,\n    plaintext: plaintext,\n    disabled: disabled\n  });\n  var submit = useEventCallback(function (event) {\n    // Check the form before submitting\n    if (check()) {\n      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(formValue, event);\n    }\n  });\n  var reset = useEventCallback(function (event) {\n    resetErrors();\n    onReset === null || onReset === void 0 ? void 0 : onReset(resetFormValue(), event);\n  });\n  var handleSubmit = useEventCallback(function (event) {\n    var _event$preventDefault, _event$stopPropagatio;\n    event === null || event === void 0 ? void 0 : (_event$preventDefault = event.preventDefault) === null || _event$preventDefault === void 0 ? void 0 : _event$preventDefault.call(event);\n    event === null || event === void 0 ? void 0 : (_event$stopPropagatio = event.stopPropagation) === null || _event$stopPropagatio === void 0 ? void 0 : _event$stopPropagatio.call(event);\n\n    // Prevent submission when the form is disabled, readOnly, or plaintext\n    if (disabled || readOnly || plaintext) {\n      return;\n    }\n    submit();\n  });\n  var handleReset = useEventCallback(function (event) {\n    var _event$preventDefault2, _event$stopPropagatio2;\n    event === null || event === void 0 ? void 0 : (_event$preventDefault2 = event.preventDefault) === null || _event$preventDefault2 === void 0 ? void 0 : _event$preventDefault2.call(event);\n    event === null || event === void 0 ? void 0 : (_event$stopPropagatio2 = event.stopPropagation) === null || _event$stopPropagatio2 === void 0 ? void 0 : _event$stopPropagatio2.call(event);\n\n    // Prevent reset when the form is disabled, readOnly, or plaintext\n    if (disabled || readOnly || plaintext) {\n      return;\n    }\n    reset(event);\n  });\n  var imperativeMethods = {\n    check: check,\n    checkForField: checkForField,\n    checkAsync: checkAsync,\n    checkForFieldAsync: checkForFieldAsync,\n    cleanErrors: cleanErrors,\n    cleanErrorForField: cleanErrorForField,\n    reset: reset,\n    resetErrors: resetErrors,\n    submit: submit\n  };\n  var formRef = useFormRef(ref, {\n    imperativeMethods: imperativeMethods\n  });\n  var removeFieldValue = useEventCallback(function (name) {\n    var formValue = onRemoveValue(name);\n    onChange === null || onChange === void 0 ? void 0 : onChange(formValue);\n  });\n  var removeFieldError = useEventCallback(function (name) {\n    onRemoveError(name);\n  });\n  var onFieldError = useEventCallback(function (name, checkResult) {\n    setFieldError(name, checkResult);\n  });\n  var onFieldSuccess = useEventCallback(function (name) {\n    removeFieldError(name);\n  });\n  var onFieldChange = useEventCallback(function (name, value, event) {\n    var nextFormValue = setFieldValue(name, value);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextFormValue, event);\n  });\n  var formContextValue = {\n    errorFromContext: errorFromContext,\n    checkTrigger: checkTrigger,\n    plaintext: plaintext,\n    readOnly: readOnly,\n    disabled: disabled,\n    formError: formError,\n    nestedField: nestedField,\n    pushFieldRule: pushFieldRule,\n    getCombinedModel: getCombinedModel,\n    removeFieldValue: removeFieldValue,\n    removeFieldError: removeFieldError,\n    removeFieldRule: removeFieldRule,\n    onFieldSuccess: onFieldSuccess,\n    onFieldChange: onFieldChange,\n    onFieldError: onFieldError\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({}, rest, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    onReset: handleReset,\n    className: classes\n  }), /*#__PURE__*/React.createElement(FormProvider, {\n    value: formContextValue\n  }, /*#__PURE__*/React.createElement(FormValueProvider, {\n    value: formValue\n  }, children)));\n});\nForm.Control = FormControl;\nForm.ControlLabel = FormControlLabel;\nForm.ErrorMessage = FormErrorMessage;\nForm.Group = FormGroup;\nForm.HelpText = FormHelpText;\nForm.displayName = 'Form';\nForm.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  errorFromContext: PropTypes.bool,\n  layout: oneOf(['horizontal', 'vertical', 'inline']),\n  fluid: PropTypes.bool,\n  formValue: PropTypes.object,\n  formDefaultValue: PropTypes.object,\n  formError: PropTypes.object,\n  checkTrigger: oneOf(['change', 'blur', 'none']),\n  onChange: PropTypes.func,\n  onError: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSubmit: PropTypes.func,\n  model: PropTypes.any,\n  readOnly: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  disabled: PropTypes.bool\n};\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}