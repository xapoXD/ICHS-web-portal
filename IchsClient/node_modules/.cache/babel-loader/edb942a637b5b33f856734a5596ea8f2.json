{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2, _templateObject3;\nvar _excluded = [\"as\", \"active\", \"appearance\", \"block\", \"className\", \"children\", \"classPrefix\", \"color\", \"disabled\", \"loading\", \"ripple\", \"size\", \"startIcon\", \"endIcon\", \"type\"];\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Ripple from \"../internals/Ripple/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { ButtonGroupContext } from \"../ButtonGroup/index.js\";\nimport SafeAnchor from \"../SafeAnchor/index.js\";\nimport { isOneOf } from \"../internals/utils/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\n/**\n * The Button component is used to trigger a custom action.\n * @see https://rsuitejs.com/components/button\n */\nvar Button = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var as = props.as,\n    active = props.active,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    block = props.block,\n    className = props.className,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'btn' : _props$classPrefix,\n    color = props.color,\n    disabled = props.disabled,\n    loading = props.loading,\n    _props$ripple = props.ripple,\n    ripple = _props$ripple === void 0 ? true : _props$ripple,\n    sizeProp = props.size,\n    startIcon = props.startIcon,\n    endIcon = props.endIcon,\n    typeProp = props.type,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var buttonGroup = useContext(ButtonGroupContext);\n  var size = sizeProp !== null && sizeProp !== void 0 ? sizeProp : buttonGroup === null || buttonGroup === void 0 ? void 0 : buttonGroup.size;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix(appearance, color, size, {\n    active: active,\n    disabled: disabled,\n    loading: loading,\n    block: block\n  }));\n  var renderButtonContent = useCallback(function () {\n    var spin = /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"spin\"])))\n    });\n    var rippleElement = ripple && !isOneOf(appearance, ['link', 'ghost']) ? /*#__PURE__*/React.createElement(Ripple, null) : null;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, loading && spin, startIcon ? /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"start-icon\"])))\n    }, startIcon) : null, children, endIcon ? /*#__PURE__*/React.createElement(\"span\", {\n      className: prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"end-icon\"])))\n    }, endIcon) : null, rippleElement);\n  }, [appearance, children, endIcon, loading, prefix, ripple, startIcon]);\n  if (rest.href) {\n    return /*#__PURE__*/React.createElement(SafeAnchor, _extends({}, rest, {\n      as: as,\n      ref: ref,\n      \"aria-disabled\": disabled,\n      disabled: disabled,\n      className: classes\n    }), renderButtonContent());\n  }\n  var Component = as || 'button';\n  var type = typeProp || (Component === 'button' ? 'button' : undefined);\n  var role = rest.role || (Component !== 'button' ? 'button' : undefined);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    role: role,\n    type: type,\n    ref: ref,\n    disabled: disabled,\n    \"aria-disabled\": disabled,\n    className: classes\n  }), renderButtonContent());\n});\nButton.displayName = 'Button';\nButton.propTypes = {\n  as: PropTypes.elementType,\n  active: PropTypes.bool,\n  appearance: oneOf(['default', 'primary', 'link', 'subtle', 'ghost']),\n  block: PropTypes.bool,\n  children: PropTypes.node,\n  color: oneOf(['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet']),\n  disabled: PropTypes.bool,\n  href: PropTypes.string,\n  loading: PropTypes.bool,\n  ripple: PropTypes.bool,\n  size: oneOf(['lg', 'md', 'sm', 'xs']),\n  type: oneOf(['button', 'reset', 'submit'])\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}