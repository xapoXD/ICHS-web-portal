{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"appearance\", \"classPrefix\", \"defaultValue\", \"columnHeight\", \"columnWidth\", \"childrenKey\", \"cleanable\", \"data\", \"disabled\", \"disabledItemValues\", \"value\", \"valueKey\", \"labelKey\", \"locale\", \"toggleAs\", \"style\", \"countable\", \"cascade\", \"placeholder\", \"placement\", \"popupClassName\", \"popupStyle\", \"searchable\", \"uncheckableItemValues\", \"id\", \"getChildren\", \"renderValue\", \"renderExtraFooter\", \"renderColumn\", \"renderTreeNode\", \"onEntered\", \"onExited\", \"onClean\", \"onSearch\", \"onSelect\", \"onChange\", \"onCheck\", \"menuClassName\", \"menuStyle\", \"menuWidth\", \"menuHeight\", \"renderMenu\", \"renderMenuItem\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\nimport { findNodeOfTree } from \"../internals/Tree/utils/index.js\";\nimport { useClassNames, useCustom, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { getColumnsAndPaths } from \"../CascadeTree/utils.js\";\nimport { createChainedFunction, mergeRefs } from \"../internals/utils/index.js\";\nimport { PickerToggle, PickerPopup, SelectedElement, PickerToggleTrigger, usePickerClassName, usePickerRef, useToggleKeyDownEvent, useFocusItemValue, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from \"../internals/Picker/index.js\";\nimport { deprecatePropTypeNew } from \"../internals/propTypes/index.js\";\nimport { useCascadeValue, useSearch, useSelect } from \"../MultiCascadeTree/hooks/index.js\";\nimport TreeView from \"../MultiCascadeTree/TreeView.js\";\nimport SearchView from \"../MultiCascadeTree/SearchView.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport useActive from \"../Cascader/useActive.js\";\nvar emptyArray = [];\n\n/**\n * The `MultiCascader` component is used to select multiple values from cascading options.\n * @see https://rsuitejs.com/components/multi-cascader/\n */\nvar MultiCascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _selectedPaths;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n    defaultValue = props.defaultValue,\n    columnHeight = props.columnHeight,\n    columnWidth = props.columnWidth,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    _props$data = props.data,\n    data = _props$data === void 0 ? emptyArray : _props$data,\n    disabled = props.disabled,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    valueProp = props.value,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    overrideLocale = props.locale,\n    toggleAs = props.toggleAs,\n    style = props.style,\n    _props$countable = props.countable,\n    countable = _props$countable === void 0 ? true : _props$countable,\n    _props$cascade = props.cascade,\n    cascade = _props$cascade === void 0 ? true : _props$cascade,\n    placeholder = props.placeholder,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    popupClassName = props.popupClassName,\n    popupStyle = props.popupStyle,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? true : _props$searchable,\n    _props$uncheckableIte = props.uncheckableItemValues,\n    uncheckableItemValues = _props$uncheckableIte === void 0 ? emptyArray : _props$uncheckableIte,\n    id = props.id,\n    getChildren = props.getChildren,\n    renderValue = props.renderValue,\n    renderExtraFooter = props.renderExtraFooter,\n    renderColumn = props.renderColumn,\n    renderTreeNode = props.renderTreeNode,\n    onEntered = props.onEntered,\n    onExited = props.onExited,\n    onClean = props.onClean,\n    onSearch = props.onSearch,\n    onSelect = props.onSelect,\n    onChange = props.onChange,\n    onCheck = props.onCheck,\n    DEPRECATED_menuClassName = props.menuClassName,\n    DEPRECATED_menuStyle = props.menuStyle,\n    DEPRECATED_menuWidth = props.menuWidth,\n    DEPRECATED_menuHeight = props.menuHeight,\n    DEPRECATED_renderMenu = props.renderMenu,\n    DEPRECATED_renderMenuItem = props.renderMenuItem,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _usePickerRef = usePickerRef(ref),\n    trigger = _usePickerRef.trigger,\n    root = _usePickerRef.root,\n    target = _usePickerRef.target,\n    overlay = _usePickerRef.overlay,\n    searchInput = _usePickerRef.searchInput;\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale,\n    rtl = _useCustom.rtl;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var onSelectCallback = useCallback(function (node, cascadePaths, event) {\n    var _trigger$current, _trigger$current$upda;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, event);\n    (_trigger$current = trigger.current) === null || _trigger$current === void 0 ? void 0 : (_trigger$current$upda = _trigger$current.updatePosition) === null || _trigger$current$upda === void 0 ? void 0 : _trigger$current$upda.call(_trigger$current);\n  }, [onSelect, trigger]);\n  var _useSelect = useSelect({\n      data: data,\n      childrenKey: childrenKey,\n      labelKey: labelKey,\n      valueKey: valueKey,\n      onSelect: onSelectCallback,\n      getChildren: getChildren\n    }),\n    selectedPaths = _useSelect.selectedPaths,\n    flattenData = _useSelect.flattenData,\n    columnData = _useSelect.columnData,\n    setColumnData = _useSelect.setColumnData,\n    setSelectedPaths = _useSelect.setSelectedPaths,\n    handleSelect = _useSelect.handleSelect;\n  var _useControlled = useControlled(valueProp, defaultValue),\n    controlledValue = _useControlled[0];\n  var itemKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n  var cascadeValueProps = _extends({}, itemKeys, {\n    uncheckableItemValues: uncheckableItemValues,\n    cascade: cascade,\n    value: controlledValue,\n    onCheck: onCheck,\n    onChange: onChange\n  });\n  var _useCascadeValue = useCascadeValue(cascadeValueProps, flattenData),\n    value = _useCascadeValue.value,\n    setValue = _useCascadeValue.setValue,\n    handleCheck = _useCascadeValue.handleCheck;\n  var selectedItems = flattenData.filter(function (item) {\n    return value.some(function (v) {\n      return v === item[valueKey];\n    });\n  }) || [];\n  var onFocusItemCallback = useCallback(function (value) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, flattenData.find(function (item) {\n        return item[valueKey] === value;\n      }), {\n        getParent: function getParent() {\n          return undefined;\n        },\n        getChildren: function getChildren(item) {\n          return item[childrenKey];\n        }\n      }),\n      columns = _getColumnsAndPaths.columns,\n      path = _getColumnsAndPaths.path;\n    setColumnData(columns);\n    setSelectedPaths(path);\n  }, [childrenKey, data, flattenData, setColumnData, setSelectedPaths, valueKey]);\n\n  // Used to hover the focuse item  when trigger `onKeydown`\n  var _useFocusItemValue = useFocusItemValue(selectedPaths === null || selectedPaths === void 0 ? void 0 : (_selectedPaths = selectedPaths[selectedPaths.length - 1]) === null || _selectedPaths === void 0 ? void 0 : _selectedPaths[valueKey], {\n      rtl: rtl,\n      data: flattenData,\n      valueKey: valueKey,\n      defaultLayer: selectedPaths !== null && selectedPaths !== void 0 && selectedPaths.length ? selectedPaths.length - 1 : 0,\n      target: function target() {\n        return overlay.current;\n      },\n      callback: onFocusItemCallback\n    }),\n    focusItemValue = _useFocusItemValue.focusItemValue,\n    setLayer = _useFocusItemValue.setLayer,\n    setKeys = _useFocusItemValue.setKeys,\n    onFocusItem = _useFocusItemValue.onKeyDown;\n  var onSearchCallback = function onSearchCallback(value, event) {\n    if (value) {\n      setLayer(0);\n    } else if (selectedPaths !== null && selectedPaths !== void 0 && selectedPaths.length) {\n      setLayer(selectedPaths.length - 1);\n    }\n    setKeys([]);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n  };\n  var _useSearch = useSearch({\n      labelKey: labelKey,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      flattenedData: flattenData,\n      uncheckableItemValues: uncheckableItemValues,\n      onSearch: onSearchCallback\n    }),\n    items = _useSearch.items,\n    searchKeyword = _useSearch.searchKeyword,\n    setSearchKeyword = _useSearch.setSearchKeyword,\n    handleSearch = _useSearch.handleSearch;\n  var _useActive = useActive({\n      onEntered: onEntered,\n      onExited: onExited,\n      target: target,\n      setSearchKeyword: setSearchKeyword\n    }),\n    active = _useActive.active,\n    handleEntered = _useActive.handleEntered,\n    handleExited = _useActive.handleExited;\n  var handleClean = useEventCallback(function (event) {\n    if (disabled || !target.current) {\n      return;\n    }\n    setSelectedPaths([]);\n    setValue([]);\n    setColumnData([data]);\n    onChange === null || onChange === void 0 ? void 0 : onChange([], event);\n  });\n  var handleMenuPressEnter = useEventCallback(function (event) {\n    var _overlay$current;\n    var focusItem = findNodeOfTree(data, function (item) {\n      return item[valueKey] === focusItemValue;\n    });\n    var checkbox = (_overlay$current = overlay.current) === null || _overlay$current === void 0 ? void 0 : _overlay$current.querySelector(\"[data-key=\\\"\" + focusItemValue + \"\\\"] [type=\\\"checkbox\\\"]\");\n    if (checkbox) {\n      handleCheck(focusItem, event, (checkbox === null || checkbox === void 0 ? void 0 : checkbox.getAttribute('aria-checked')) !== 'true');\n    }\n  });\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    toggle: !focusItemValue || !active,\n    trigger: trigger,\n    target: target,\n    overlay: overlay,\n    searchInput: searchInput,\n    active: active,\n    onExit: handleClean,\n    onMenuKeyDown: onFocusItem,\n    onMenuPressEnter: handleMenuPressEnter\n  }, rest));\n  var renderCascadeColumn = function renderCascadeColumn(childNodes, column) {\n    var items = column.items,\n      parentItem = column.parentItem,\n      layer = column.layer;\n    if (typeof renderColumn === 'function') {\n      return renderColumn(childNodes, column);\n    } else if (typeof DEPRECATED_renderMenu === 'function') {\n      return DEPRECATED_renderMenu(items, childNodes, parentItem, layer);\n    }\n    return childNodes;\n  };\n  var renderCascadeTreeNode = function renderCascadeTreeNode(node, itemData) {\n    var render = typeof renderTreeNode === 'function' ? renderTreeNode : DEPRECATED_renderMenuItem;\n    if (typeof render === 'function') {\n      return render(node, itemData);\n    }\n    return node;\n  };\n  var renderTreeView = function renderTreeView(positionProps, speakerRef) {\n    var _ref = positionProps || {},\n      left = _ref.left,\n      top = _ref.top,\n      className = _ref.className;\n    var styles = _extends({}, DEPRECATED_menuStyle, popupStyle, {\n      left: left,\n      top: top\n    });\n    var classes = merge(className, DEPRECATED_menuClassName, popupClassName, prefix('popup-multi-cascader'));\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      className: classes,\n      style: styles,\n      target: trigger,\n      onKeyDown: onPickerKeyDown\n    }, searchable && /*#__PURE__*/React.createElement(SearchView, {\n      data: items,\n      value: value,\n      searchKeyword: searchKeyword,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      disabledItemValues: disabledItemValues,\n      onCheck: handleCheck,\n      onSearch: handleSearch\n    }), !searchKeyword && /*#__PURE__*/React.createElement(TreeView, {\n      cascade: cascade,\n      columnWidth: columnWidth !== null && columnWidth !== void 0 ? columnWidth : DEPRECATED_menuWidth,\n      columnHeight: columnHeight !== null && columnHeight !== void 0 ? columnHeight : DEPRECATED_menuHeight,\n      classPrefix: \"cascade-tree\",\n      uncheckableItemValues: uncheckableItemValues,\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      cascadeData: columnData,\n      cascadePaths: selectedPaths,\n      value: value,\n      onSelect: handleSelect,\n      onCheck: handleCheck,\n      renderColumn: renderCascadeColumn,\n      renderTreeNode: renderCascadeTreeNode\n    }), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n  var selectedElement = placeholder;\n  if (selectedItems.length > 0) {\n    selectedElement = /*#__PURE__*/React.createElement(SelectedElement, {\n      selectedItems: selectedItems,\n      countable: countable,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      prefix: prefix,\n      cascade: cascade,\n      locale: locale\n    });\n  }\n\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n  var hasValue = selectedItems.length > 0 || Number(valueProp === null || valueProp === void 0 ? void 0 : valueProp.length) > 0 && isFunction(renderValue);\n  if (hasValue && isFunction(renderValue)) {\n    selectedElement = renderValue(value.length ? value : valueProp !== null && valueProp !== void 0 ? valueProp : [], selectedItems, selectedElement);\n    // If renderValue returns null or undefined, hasValue is false.\n    if (isNil(selectedElement)) {\n      hasValue = false;\n    }\n  }\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n      classPrefix: classPrefix,\n      hasValue: hasValue,\n      countable: countable,\n      name: 'cascader',\n      appearance: appearance,\n      cleanable: cleanable\n    })),\n    classes = _usePickerClassName[0],\n    usedClassNamePropKeys = _usePickerClassName[1];\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    id: id,\n    popupType: \"tree\",\n    multiple: true,\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: trigger,\n    placement: placement,\n    onEnter: handleEntered,\n    onExited: handleExited,\n    speaker: renderTreeView\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    ref: root\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    as: toggleAs,\n    appearance: appearance,\n    disabled: disabled,\n    ref: target,\n    onClean: createChainedFunction(handleClean, onClean),\n    onKeyDown: onPickerKeyDown,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: active,\n    placement: placement,\n    inputValue: value\n  }), selectedElement || locale.placeholder)));\n});\nMultiCascader.displayName = 'MultiCascader';\nMultiCascader.propTypes = _extends({}, listPickerPropTypes, {\n  value: PropTypes.array,\n  disabledItemValues: PropTypes.array,\n  locale: PropTypes.any,\n  appearance: oneOf(['default', 'subtle']),\n  cascade: PropTypes.bool,\n  countable: PropTypes.bool,\n  uncheckableItemValues: PropTypes.array,\n  searchable: PropTypes.bool,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onCheck: PropTypes.func,\n  inline: deprecatePropTypeNew(PropTypes.bool, 'Use `<MultiCascadeTree>` instead.'),\n  renderMenu: deprecatePropTypeNew(PropTypes.func, 'Use \"renderColumn\" property instead.'),\n  renderMenuItem: deprecatePropTypeNew(PropTypes.func, 'Use \"renderTreeNode\" property instead.'),\n  menuWidth: deprecatePropTypeNew(PropTypes.number, 'Use \"columnWidth\" property instead.'),\n  menuHeight: deprecatePropTypeNew(PropTypes.number, 'Use \"columnHeight\" property instead.')\n});\nexport default MultiCascader;","map":null,"metadata":{},"sourceType":"module"}