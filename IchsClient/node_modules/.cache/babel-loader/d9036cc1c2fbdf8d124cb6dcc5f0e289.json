{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useRef, useCallback, useContext } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Position from \"./Position.js\";\nimport { useRootClose } from \"../hooks/index.js\";\nimport { mergeRefs } from \"../utils/index.js\";\nimport Fade from \"../../Animation/Fade.js\";\nimport OverlayContext from \"./OverlayContext.js\";\nexport var overlayPropTypes = {\n  container: PropTypes.any,\n  children: PropTypes.any,\n  childrenProps: PropTypes.object,\n  className: PropTypes.string,\n  containerPadding: PropTypes.number,\n  placement: PropTypes.any,\n  preventOverflow: PropTypes.bool,\n  open: PropTypes.bool,\n  rootClose: PropTypes.bool,\n  transition: PropTypes.any,\n  triggerTarget: PropTypes.any,\n  onClose: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func\n};\n\n/**\n * Overlay is a powerful component that helps you create floating components.\n * @private\n */\nvar Overlay = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useContext = useContext(OverlayContext),\n    overlayContainer = _useContext.overlayContainer;\n  var _props$container = props.container,\n    container = _props$container === void 0 ? overlayContainer : _props$container,\n    containerPadding = props.containerPadding,\n    placement = props.placement,\n    rootClose = props.rootClose,\n    children = props.children,\n    childrenProps = props.childrenProps,\n    _props$transition = props.transition,\n    Transition = _props$transition === void 0 ? Fade : _props$transition,\n    open = props.open,\n    preventOverflow = props.preventOverflow,\n    triggerTarget = props.triggerTarget,\n    onClose = props.onClose,\n    onExited = props.onExited,\n    onExit = props.onExit,\n    onExiting = props.onExiting,\n    onEnter = props.onEnter,\n    onEntering = props.onEntering,\n    onEntered = props.onEntered,\n    followCursor = props.followCursor,\n    cursorPosition = props.cursorPosition;\n  var _useState = useState(!open),\n    exited = _useState[0],\n    setExited = _useState[1];\n  var overlayTarget = useRef(null);\n  if (open) {\n    if (exited) setExited(false);\n  } else if (!Transition && !exited) {\n    setExited(true);\n  }\n  var mountOverlay = open || Transition && !exited;\n  var handleExited = useCallback(function (args) {\n    setExited(true);\n    onExited === null || onExited === void 0 ? void 0 : onExited(args);\n  }, [onExited]);\n  useRootClose(onClose, {\n    triggerTarget: triggerTarget,\n    overlayTarget: overlayTarget,\n    disabled: !rootClose || !mountOverlay\n  });\n  if (!mountOverlay) {\n    return null;\n  }\n  var positionProps = {\n    container: container,\n    containerPadding: containerPadding,\n    triggerTarget: triggerTarget,\n    placement: placement,\n    preventOverflow: preventOverflow,\n    followCursor: followCursor,\n    cursorPosition: cursorPosition\n  };\n  var renderChildWithPosition = function renderChildWithPosition(transitionProps, transitionRef) {\n    return /*#__PURE__*/React.createElement(Position, _extends({}, positionProps, transitionProps, {\n      ref: mergeRefs(ref, transitionRef)\n    }), function (childProps, childRef) {\n      // overlayTarget is the ref on the DOM of the Overlay.\n      if (typeof children === 'function') {\n        return children(Object.assign(childProps, childrenProps), mergeRefs(childRef, overlayTarget));\n      }\n\n      // Position will return coordinates and className\n      var left = childProps.left,\n        top = childProps.top,\n        className = childProps.className;\n      return /*#__PURE__*/React.cloneElement(children, _extends({}, childrenProps, children.props, {\n        className: classNames(className, children.props.className),\n        style: _extends({\n          left: left,\n          top: top\n        }, children.props.style),\n        ref: mergeRefs(childRef, overlayTarget)\n      }));\n    });\n  };\n  if (Transition) {\n    return /*#__PURE__*/React.createElement(Transition, {\n      in: open,\n      transitionAppear: true,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered\n    }, renderChildWithPosition);\n  }\n  return renderChildWithPosition();\n});\nOverlay.displayName = 'Overlay';\nOverlay.propTypes = overlayPropTypes;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}