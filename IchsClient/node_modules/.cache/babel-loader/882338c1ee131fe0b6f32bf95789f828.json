{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"active\", \"children\", \"className\", \"disabled\", \"classPrefix\", \"icon\", \"eventKey\", \"style\", \"onClick\", \"onSelect\", \"divider\", \"panel\", \"tooltip\"],\n  _excluded2 = [\"selected\", \"active\"];\nimport React, { useContext, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { shallowEqual, mergeRefs, createChainedFunction } from \"../internals/utils/index.js\";\nimport Ripple from \"../internals/Ripple/index.js\";\nimport SafeAnchor from \"../SafeAnchor/index.js\";\nimport NavContext from \"../Nav/NavContext.js\";\nimport MenuItem from \"../internals/Menu/MenuItem.js\";\nimport omit from 'lodash/omit';\nimport { SidenavContext } from \"./Sidenav.js\";\nimport Whisper from \"../Whisper/index.js\";\nimport Tooltip from \"../Tooltip/index.js\";\nimport classNames from 'classnames';\n/**\n * @private\n */\nvar SidenavItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var sidenav = useContext(SidenavContext);\n  if (!sidenav) {\n    throw new Error('<SidenavItem> component is not supposed to be used standalone. Use <Nav.Item> inside <Sidenav> instead.');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? SafeAnchor : _props$as,\n    activeProp = props.active,\n    children = props.children,\n    className = props.className,\n    disabled = props.disabled,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'sidenav-item' : _props$classPrefix,\n    icon = props.icon,\n    eventKey = props.eventKey,\n    style = props.style,\n    onClick = props.onClick,\n    onSelect = props.onSelect,\n    divider = props.divider,\n    panel = props.panel,\n    _props$tooltip = props.tooltip,\n    tooltip = _props$tooltip === void 0 ? children : _props$tooltip,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _ref = useContext(NavContext),\n    activeKey = _ref.activeKey,\n    onSelectFromNav = _ref.onSelect;\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var selected = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && shallowEqual(activeKey, eventKey);\n  var whisperRef = React.useRef(null);\n  var handleClick = useCallback(function (event) {\n    var _whisperRef$current;\n    if (disabled) return;\n    (_whisperRef$current = whisperRef.current) === null || _whisperRef$current === void 0 ? void 0 : _whisperRef$current.close();\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    onSelectFromNav === null || onSelectFromNav === void 0 ? void 0 : onSelectFromNav(eventKey, event);\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n  }, [disabled, onSelect, onSelectFromNav, eventKey, onClick]);\n  var clonedIcon = icon ? /*#__PURE__*/React.cloneElement(icon, {\n    className: classNames(prefix('icon'), icon.props.className)\n  }) : null;\n  if (!sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(Whisper, {\n      trigger: \"hover\",\n      speaker: /*#__PURE__*/React.createElement(Tooltip, null, tooltip),\n      placement: \"right\",\n      ref: whisperRef\n    }, function (triggerProps, triggerRef) {\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        selected: selected,\n        disabled: disabled,\n        onActivate: handleClick\n      }, function (_ref2, menuitemRef) {\n        var selected = _ref2.selected,\n          active = _ref2.active,\n          menuitem = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n        var classes = merge(className, withClassPrefix({\n          focus: active,\n          active: selected,\n          disabled: disabled\n        }));\n\n        // Show tooltip when inside a collapse <Sidenav>\n        return /*#__PURE__*/React.createElement(Component, _extends({\n          ref: mergeRefs(mergeRefs(ref, menuitemRef), triggerRef),\n          disabled: Component === SafeAnchor ? disabled : undefined,\n          className: classes,\n          \"data-event-key\": eventKey\n        }, omit(rest, ['divider', 'panel']), triggerProps, menuitem, {\n          onMouseOver: createChainedFunction(menuitem.onMouseOver, triggerProps.onMouseOver),\n          onMouseOut: createChainedFunction(menuitem.onMouseOut, triggerProps.onMouseOut)\n        }), clonedIcon, children, /*#__PURE__*/React.createElement(Ripple, null));\n      });\n    });\n  }\n  if (divider) {\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: ref,\n      role: \"separator\",\n      style: style,\n      className: merge(className, prefix('divider'))\n    }, rest));\n  }\n  if (panel) {\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: ref,\n      role: \"none presentation\",\n      style: style,\n      className: merge(className, prefix('panel'))\n    }, rest), children);\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: merge(className, withClassPrefix({\n      active: selected,\n      disabled: disabled\n    })),\n    onClick: handleClick,\n    style: style,\n    \"aria-selected\": selected || undefined,\n    \"data-event-key\": eventKey\n  }, rest), clonedIcon, children, /*#__PURE__*/React.createElement(Ripple, null));\n});\nSidenavItem.displayName = 'Sidenav.Item';\nSidenavItem.propTypes = {\n  classPrefix: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  style: PropTypes.object,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func\n};\nexport default SidenavItem;","map":null,"metadata":{},"sourceType":"module"}