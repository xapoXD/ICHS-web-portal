{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\nfunction mergeCells(cells) {\n  var nextCells = [];\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n      width = _cells$i$props.width,\n      colSpan = _cells$i$props.colSpan,\n      groupCount = _cells$i$props.groupCount,\n      groupHeader = _cells$i$props.groupHeader,\n      groupAlign = _cells$i$props.groupAlign,\n      groupVerticalAlign = _cells$i$props.groupVerticalAlign,\n      isHeaderCell = _cells$i$props.isHeaderCell,\n      headerHeight = _cells$i$props.headerHeight,\n      groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n          nextCellWidth = _nextCell$props.width,\n          sortable = _nextCell$props.sortable,\n          children = _nextCell$props.children,\n          dataKey = _nextCell$props.dataKey,\n          onSortColumn = _nextCell$props.onSortColumn,\n          sortColumn = _nextCell$props.sortColumn,\n          sortType = _nextCell$props.sortType,\n          align = _nextCell$props.align,\n          verticalAlign = _nextCell$props.verticalAlign,\n          renderSortIcon = _nextCell$props.renderSortIcon;\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          align: align,\n          verticalAlign: verticalAlign,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn,\n          renderSortIcon: renderSortIcon\n        }, children));\n      }\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          align: groupAlign,\n          verticalAlign: groupVerticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n            rowData = _nextCell$props2.rowData,\n            rowIndex = _nextCell$props2.rowIndex,\n            _children = _nextCell$props2.children,\n            colSpanWidth = _nextCell$props2.width,\n            _isHeaderCell = _nextCell$props2.isHeaderCell,\n            _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n    nextCells.push(cells[i]);\n  }\n  return nextCells;\n}\nexport default mergeCells;","map":null,"metadata":{},"sourceType":"module"}