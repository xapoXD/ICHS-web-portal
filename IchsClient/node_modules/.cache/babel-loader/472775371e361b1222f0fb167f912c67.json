{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// Headless Disclosure\n// Ref: https://w3c.github.io/aria-practices/#disclosure\nimport React, { useMemo, useReducer, useRef, useCallback, useContext } from 'react';\nimport DisclosureContext, { DisclosureActionTypes } from \"./DisclosureContext.js\";\nimport DisclosureButton from \"./DisclosureButton.js\";\nimport DisclosureContent from \"./DisclosureContent.js\";\nimport useClickOutside from \"../hooks/useClickOutside.js\";\nvar initialDisclosureState = {\n  open: false\n};\nfunction disclosureReducer(state, action) {\n  switch (action.type) {\n    case DisclosureActionTypes.Show:\n      return _extends({}, state, {\n        open: true\n      });\n    case DisclosureActionTypes.Hide:\n      return _extends({}, state, {\n        open: false\n      });\n  }\n  return state;\n}\nvar Disclosure = /*#__PURE__*/React.memo(function (props) {\n  var children = props.children,\n    openProp = props.open,\n    _props$defaultOpen = props.defaultOpen,\n    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n    _props$hideOnClickOut = props.hideOnClickOutside,\n    hideOnClickOutside = _props$hideOnClickOut === void 0 ? false : _props$hideOnClickOut,\n    onToggle = props.onToggle,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? ['click'] : _props$trigger;\n  var parentDisclosure = useContext(DisclosureContext);\n  var _useReducer = useReducer(disclosureReducer, _extends({}, initialDisclosureState, {\n      open: defaultOpen\n    })),\n    openState = _useReducer[0].open,\n    dispatch = _useReducer[1];\n  var containerElementRef = useRef(null);\n  var open = openProp !== null && openProp !== void 0 ? openProp : openState;\n  useClickOutside({\n    enabled: hideOnClickOutside,\n    isOutside: function isOutside(event) {\n      var _containerElementRef$;\n      return !((_containerElementRef$ = containerElementRef.current) !== null && _containerElementRef$ !== void 0 && _containerElementRef$.contains(event.target));\n    },\n    handle: function handle() {\n      return dispatch({\n        type: DisclosureActionTypes.Hide\n      });\n    }\n  });\n  var onMouseEnter = useCallback(function (event) {\n    if (!open) {\n      dispatch({\n        type: DisclosureActionTypes.Show\n      });\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);\n    }\n  }, [open, dispatch, onToggle]);\n  var onMouseLeave = useCallback(function (event) {\n    if (open) {\n      dispatch({\n        type: DisclosureActionTypes.Hide\n      });\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);\n    }\n  }, [open, dispatch, onToggle]);\n  var contextValue = useMemo(function () {\n    var cascadeDispatch = function cascadeDispatch(action) {\n      var result = dispatch(action);\n      if ('cascade' in action) {\n        parentDisclosure === null || parentDisclosure === void 0 ? void 0 : parentDisclosure[1](action);\n      }\n      return result;\n    };\n    return [{\n      open: open\n    }, cascadeDispatch, {\n      onToggle: onToggle,\n      trigger: trigger\n    }];\n  }, [parentDisclosure, open, dispatch, onToggle, trigger]);\n  var renderProps = useMemo(function () {\n    var renderProps = {\n      open: open\n    };\n    if (trigger.includes('hover')) {\n      renderProps.onMouseEnter = onMouseEnter;\n      renderProps.onMouseLeave = onMouseLeave;\n    }\n    return renderProps;\n  }, [open, trigger, onMouseEnter, onMouseLeave]);\n  return /*#__PURE__*/React.createElement(DisclosureContext.Provider, {\n    value: contextValue\n  }, children(renderProps, containerElementRef));\n});\nDisclosure.Button = DisclosureButton;\nDisclosure.Content = DisclosureContent;\nexport default Disclosure;","map":null,"metadata":{},"sourceType":"module"}