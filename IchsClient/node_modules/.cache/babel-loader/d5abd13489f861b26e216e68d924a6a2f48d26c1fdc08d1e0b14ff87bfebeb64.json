{"ast":null,"code":"var _jsxFileName = \"D:\\\\School\\\\Diploma\\\\ICHS\\\\IchsClient\\\\src\\\\components\\\\custom\\\\TableComponent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './TableView.css'; // Ensure this CSS file exists and is correctly linked.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TableView = ({\n  data\n}) => {\n  console.log('TableComponent, Passed data:', data);\n\n  // Ensure the data is in the correct format\n  if (!data || !Array.isArray(data.StepwiseFilteredData) || data.StepwiseFilteredData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Function to apply conditional formatting based on value comparison\n  const getCellClass = (percentage, overallPercentage) => {\n    if (percentage < overallPercentage) {\n      return 'green';\n    } else if (percentage > overallPercentage) {\n      return 'red';\n    }\n    return ''; // No special class if percentages are equal\n  };\n\n  // Mapping region codes to names (Example mapping, update as needed)\n  const regionMapping = {\n    CZ10: 'Praha',\n    CZ20: 'Středočeský kraj',\n    CZ31: 'Jihočeský kraj',\n    CZ32: 'Plzeňský kraj',\n    CZ41: 'Karlovarský kraj',\n    CZ51: 'Liberecký kraj',\n    CZ52: 'Královéhradecký kraj',\n    CZ53: 'Pardubický kraj',\n    CZ63: 'Kraj Vysočina',\n    CZ64: 'Jihomoravský kraj',\n    CZ71: 'Olomoucký kraj',\n    CZ72: 'Zlínský kraj',\n    CZ80: 'Moravskoslezský kraj',\n    CZ42: 'Ústecký kraj'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), data.StepwiseFilteredData.map((filterData, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: \"2\",\n              children: filterData.AppliedFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Kraj\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), data.StepwiseFilteredData.map((filterData, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Krajsk\\xFD pr\\u016Fm\\u011Br\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Celost\\xE1tn\\xED pr\\u016Fm\\u011Br\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.StepwiseFilteredData[0].RegionSummary.map((regionData, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: regionMapping[regionData.Region] || 'Unknown'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), data.StepwiseFilteredData.map((filterData, filterIndex) => {\n            var _filterData$RegionSum;\n            const regionPercentage = ((_filterData$RegionSum = filterData.RegionSummary[index]) === null || _filterData$RegionSum === void 0 ? void 0 : _filterData$RegionSum.Percentage) || 0;\n            const overallPercentage = filterData.OverallPercentage || 0;\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: getCellClass(regionPercentage, overallPercentage),\n                children: [regionPercentage.toFixed(2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [overallPercentage.toFixed(2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this)]\n            }, filterIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 37\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n// Adding prop types to enforce type checking\n_c = TableView;\nTableView.propTypes = {\n  data: PropTypes.shape({\n    StepwiseFilteredData: PropTypes.arrayOf(PropTypes.shape({\n      AppliedFilter: PropTypes.string.isRequired,\n      RegionSummary: PropTypes.arrayOf(PropTypes.shape({\n        Region: PropTypes.string.isRequired,\n        Percentage: PropTypes.number.isRequired\n      })).isRequired,\n      OverallPercentage: PropTypes.number.isRequired\n    })).isRequired\n  }).isRequired\n};\nexport default TableView;\nvar _c;\n$RefreshReg$(_c, \"TableView\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","TableView","data","console","log","Array","isArray","StepwiseFilteredData","length","children","fileName","_jsxFileName","lineNumber","columnNumber","getCellClass","percentage","overallPercentage","regionMapping","CZ10","CZ20","CZ31","CZ32","CZ41","CZ51","CZ52","CZ53","CZ63","CZ64","CZ71","CZ72","CZ80","CZ42","className","map","filterData","index","Fragment","colSpan","AppliedFilter","RegionSummary","regionData","Region","filterIndex","_filterData$RegionSum","regionPercentage","Percentage","OverallPercentage","toFixed","_c","propTypes","shape","arrayOf","string","isRequired","number","$RefreshReg$"],"sources":["D:/School/Diploma/ICHS/IchsClient/src/components/custom/TableComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TableView.css'; // Ensure this CSS file exists and is correctly linked.\n\nconst TableView = ({ data }) => {\n\n    console.log('TableComponent, Passed data:', data);\n\n    // Ensure the data is in the correct format\n    if (!data || !Array.isArray(data.StepwiseFilteredData) || data.StepwiseFilteredData.length === 0) {\n        return <div>No data available</div>;\n    }\n\n    // Function to apply conditional formatting based on value comparison\n    const getCellClass = (percentage, overallPercentage) => {\n        if (percentage < overallPercentage) {\n            return 'green';\n        } else if (percentage > overallPercentage) {\n            return 'red';\n        }\n        return ''; // No special class if percentages are equal\n    };\n\n    // Mapping region codes to names (Example mapping, update as needed)\n    const regionMapping = {\n        CZ10: 'Praha',\n        CZ20: 'Středočeský kraj',\n        CZ31: 'Jihočeský kraj',\n        CZ32: 'Plzeňský kraj',\n        CZ41: 'Karlovarský kraj',\n        CZ51: 'Liberecký kraj',\n        CZ52: 'Královéhradecký kraj',\n        CZ53: 'Pardubický kraj',\n        CZ63: 'Kraj Vysočina',\n        CZ64: 'Jihomoravský kraj',\n        CZ71: 'Olomoucký kraj',\n        CZ72: 'Zlínský kraj',\n        CZ80: 'Moravskoslezský kraj',\n        CZ42: 'Ústecký kraj'\n    };\n\n    return (\n        <div className=\"table-container\">\n\n            <table className=\"data-table\">\n                <thead>\n                    <tr>\n                        <th>Region</th>\n                        {data.StepwiseFilteredData.map((filterData, index) => (\n                            <React.Fragment key={index}>\n                                <th colSpan=\"2\">{filterData.AppliedFilter}</th>\n                            </React.Fragment>\n                        ))}\n                    </tr>\n                    <tr>\n                        <th>Kraj</th>\n                        {data.StepwiseFilteredData.map((filterData, index) => (\n                            <React.Fragment key={index}>\n                                <th>Krajský průměr</th>\n                                <th>Celostátní průměr</th>\n                            </React.Fragment>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.StepwiseFilteredData[0].RegionSummary.map((regionData, index) => (\n                        <tr key={index}>\n                            <td>{regionMapping[regionData.Region] || 'Unknown'}</td>\n                            {data.StepwiseFilteredData.map((filterData, filterIndex) => {\n                                const regionPercentage = filterData.RegionSummary[index]?.Percentage || 0;\n                                const overallPercentage = filterData.OverallPercentage || 0;\n                                return (\n                                    <React.Fragment key={filterIndex}>\n                                        <td className={getCellClass(regionPercentage, overallPercentage)}>\n                                            {regionPercentage.toFixed(2)}%\n                                        </td>\n                                        <td>\n                                            {overallPercentage.toFixed(2)}%\n                                        </td>\n                                    </React.Fragment>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\n// Adding prop types to enforce type checking\nTableView.propTypes = {\n    data: PropTypes.shape({\n        StepwiseFilteredData: PropTypes.arrayOf(PropTypes.shape({\n            AppliedFilter: PropTypes.string.isRequired,\n            RegionSummary: PropTypes.arrayOf(PropTypes.shape({\n                Region: PropTypes.string.isRequired,\n                Percentage: PropTypes.number.isRequired\n            })).isRequired,\n            OverallPercentage: PropTypes.number.isRequired\n        })).isRequired\n    }).isRequired\n};\n\nexport default TableView;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAE5BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,IAAI,CAAC;;EAEjD;EACA,IAAI,CAACA,IAAI,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACK,oBAAoB,CAAC,IAAIL,IAAI,CAACK,oBAAoB,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9F,oBAAOR,OAAA;MAAAS,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvC;;EAEA;EACA,MAAMC,YAAY,GAAGA,CAACC,UAAU,EAAEC,iBAAiB,KAAK;IACpD,IAAID,UAAU,GAAGC,iBAAiB,EAAE;MAChC,OAAO,OAAO;IAClB,CAAC,MAAM,IAAID,UAAU,GAAGC,iBAAiB,EAAE;MACvC,OAAO,KAAK;IAChB;IACA,OAAO,EAAE,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG;IAClBC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,kBAAkB;IACxBC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,kBAAkB;IACxBC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,mBAAmB;IACzBC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;EACV,CAAC;EAED,oBACI/B,OAAA;IAAKgC,SAAS,EAAC,iBAAiB;IAAAvB,QAAA,eAE5BT,OAAA;MAAOgC,SAAS,EAAC,YAAY;MAAAvB,QAAA,gBACzBT,OAAA;QAAAS,QAAA,gBACIT,OAAA;UAAAS,QAAA,gBACIT,OAAA;YAAAS,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACdX,IAAI,CAACK,oBAAoB,CAAC0B,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC7CnC,OAAA,CAACH,KAAK,CAACuC,QAAQ;YAAA3B,QAAA,eACXT,OAAA;cAAIqC,OAAO,EAAC,GAAG;cAAA5B,QAAA,EAAEyB,UAAU,CAACI;YAAa;cAAA5B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC,GAD9BsB,KAAK;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACnB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACLb,OAAA;UAAAS,QAAA,gBACIT,OAAA;YAAAS,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACZX,IAAI,CAACK,oBAAoB,CAAC0B,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC7CnC,OAAA,CAACH,KAAK,CAACuC,QAAQ;YAAA3B,QAAA,gBACXT,OAAA;cAAAS,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBb,OAAA;cAAAS,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA,GAFTsB,KAAK;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CACnB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRb,OAAA;QAAAS,QAAA,EACKP,IAAI,CAACK,oBAAoB,CAAC,CAAC,CAAC,CAACgC,aAAa,CAACN,GAAG,CAAC,CAACO,UAAU,EAAEL,KAAK,kBAC9DnC,OAAA;UAAAS,QAAA,gBACIT,OAAA;YAAAS,QAAA,EAAKQ,aAAa,CAACuB,UAAU,CAACC,MAAM,CAAC,IAAI;UAAS;YAAA/B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACvDX,IAAI,CAACK,oBAAoB,CAAC0B,GAAG,CAAC,CAACC,UAAU,EAAEQ,WAAW,KAAK;YAAA,IAAAC,qBAAA;YACxD,MAAMC,gBAAgB,GAAG,EAAAD,qBAAA,GAAAT,UAAU,CAACK,aAAa,CAACJ,KAAK,CAAC,cAAAQ,qBAAA,uBAA/BA,qBAAA,CAAiCE,UAAU,KAAI,CAAC;YACzE,MAAM7B,iBAAiB,GAAGkB,UAAU,CAACY,iBAAiB,IAAI,CAAC;YAC3D,oBACI9C,OAAA,CAACH,KAAK,CAACuC,QAAQ;cAAA3B,QAAA,gBACXT,OAAA;gBAAIgC,SAAS,EAAElB,YAAY,CAAC8B,gBAAgB,EAAE5B,iBAAiB,CAAE;gBAAAP,QAAA,GAC5DmC,gBAAgB,CAACG,OAAO,CAAC,CAAC,CAAC,EAAC,GACjC;cAAA;gBAAArC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACLb,OAAA;gBAAAS,QAAA,GACKO,iBAAiB,CAAC+B,OAAO,CAAC,CAAC,CAAC,EAAC,GAClC;cAAA;gBAAArC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA,GANY6B,WAAW;cAAAhC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOhB,CAAC;UAEzB,CAAC,CAAC;QAAA,GAfGsB,KAAK;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;;AAED;AAAAmC,EAAA,GAtFM/C,SAAS;AAuFfA,SAAS,CAACgD,SAAS,GAAG;EAClB/C,IAAI,EAAEJ,SAAS,CAACoD,KAAK,CAAC;IAClB3C,oBAAoB,EAAET,SAAS,CAACqD,OAAO,CAACrD,SAAS,CAACoD,KAAK,CAAC;MACpDZ,aAAa,EAAExC,SAAS,CAACsD,MAAM,CAACC,UAAU;MAC1Cd,aAAa,EAAEzC,SAAS,CAACqD,OAAO,CAACrD,SAAS,CAACoD,KAAK,CAAC;QAC7CT,MAAM,EAAE3C,SAAS,CAACsD,MAAM,CAACC,UAAU;QACnCR,UAAU,EAAE/C,SAAS,CAACwD,MAAM,CAACD;MACjC,CAAC,CAAC,CAAC,CAACA,UAAU;MACdP,iBAAiB,EAAEhD,SAAS,CAACwD,MAAM,CAACD;IACxC,CAAC,CAAC,CAAC,CAACA;EACR,CAAC,CAAC,CAACA;AACP,CAAC;AAED,eAAepD,SAAS;AAAC,IAAA+C,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}