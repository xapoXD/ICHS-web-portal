{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"mask\", \"guide\", \"placeholderChar\", \"value\", \"showMask\", \"pipe\", \"render\", \"onChange\"];\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport createTextMaskInputElement from \"./createTextMaskInputElement.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\n\n/**\n * https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#guide\n */\n\nvar defaultRender = function defaultRender(ref, props) {\n  return /*#__PURE__*/React.createElement(\"input\", _extends({\n    ref: ref\n  }, props));\n};\n\n/**\n * The `TextMask` component is used to format the user input data.\n * @see https://rsuitejs.com/components/input/#masked-input\n */\nvar TextMask = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var mask = props.mask,\n    _props$guide = props.guide,\n    guide = _props$guide === void 0 ? true : _props$guide,\n    placeholderChar = props.placeholderChar,\n    value = props.value,\n    showMask = props.showMask,\n    pipe = props.pipe,\n    _props$render = props.render,\n    render = _props$render === void 0 ? defaultRender : _props$render,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var inputRef = useRef(null);\n  var textMaskInputElement = useRef();\n  var initTextMask = useCallback(function () {\n    var _textMaskInputElement;\n    textMaskInputElement.current = createTextMaskInputElement(_extends({\n      inputElement: inputRef.current\n    }, props));\n    (_textMaskInputElement = textMaskInputElement.current) === null || _textMaskInputElement === void 0 ? void 0 : _textMaskInputElement.update(value);\n  }, [props, value]);\n  var handleChange = useCallback(function (event) {\n    var _textMaskInputElement2;\n    (_textMaskInputElement2 = textMaskInputElement.current) === null || _textMaskInputElement2 === void 0 ? void 0 : _textMaskInputElement2.update();\n    onChange === null || onChange === void 0 ? void 0 : onChange(event);\n  }, [onChange]);\n  useEffect(function () {\n    initTextMask();\n  }, [guide, placeholderChar, showMask, pipe, mask, value, initTextMask]);\n  return render(mergeRefs(inputRef, ref), _extends({\n    onChange: handleChange,\n    defaultValue: value\n  }, omit(rest, ['keepCharPositions'])));\n});\nTextMask.displayName = 'TextMask';\nTextMask.propTypes = {\n  render: PropTypes.func,\n  onChange: PropTypes.func,\n  mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.bool]).isRequired,\n  guide: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  pipe: PropTypes.func,\n  placeholderChar: PropTypes.string,\n  keepCharPositions: PropTypes.bool,\n  showMask: PropTypes.bool\n};\nexport default TextMask;","map":null,"metadata":{},"sourceType":"module"}