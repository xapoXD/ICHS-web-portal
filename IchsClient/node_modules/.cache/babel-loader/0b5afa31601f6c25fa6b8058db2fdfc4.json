{"ast":null,"code":"// src/useSet.ts\nimport { useCallback, useMemo, useState } from \"react\";\nfunction useSet(iterable) {\n  const [set, setSet] = useState(() => new Set(iterable));\n  const add = useCallback((...values) => {\n    setSet(prev => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.add(value);\n      }\n      return copy;\n    });\n  }, []);\n  const deleteValues = useCallback((...values) => {\n    setSet(prev => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const toggle = useCallback(value => {\n    setSet(prev => {\n      const copy = new Set(prev);\n      if (!copy.has(value)) {\n        copy.add(value);\n      } else {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setSet( /* @__PURE__ */new Set());\n  }, []);\n  const sync = useCallback(values => {\n    setSet(new Set(values));\n  }, []);\n  return useMemo(() => {\n    return {\n      size: set.size,\n      has: value => set.has(value),\n      add,\n      delete: deleteValues,\n      clear,\n      sync,\n      toArray: () => Array.from(set),\n      toggle\n    };\n  }, [set, add, deleteValues, clear, sync, toggle]);\n}\nexport { useSet };","map":null,"metadata":{},"sourceType":"module"}