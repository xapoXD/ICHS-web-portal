{"ast":null,"code":"'use client';\n\nimport ReactDOM from 'react-dom';\nfunction safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    // eslint-disable-next-line react/no-find-dom-node\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n  return componentOrElement !== null && componentOrElement !== void 0 ? componentOrElement : null;\n}\nvar getRefTarget = function getRefTarget(ref) {\n  return ref && ('current' in ref ? ref.current : ref);\n};\nexport function getDOMNode(elementOrRef) {\n  // If elementOrRef is an instance of Position, child is returned. [PositionInstance]\n  var element = (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.root) || (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.child) || getRefTarget(elementOrRef);\n\n  // Native HTML elements\n  if (element !== null && element !== void 0 && element.nodeType && typeof (element === null || element === void 0 ? void 0 : element.nodeName) === 'string') {\n    return element;\n  }\n\n  // If you can't get the native HTML element, you can only get it through findDOMNode.\n  // eslint-disable-next-line react/no-find-dom-node\n  return safeFindDOMNode(element);\n}\nexport default getDOMNode;","map":null,"metadata":{},"sourceType":"module"}