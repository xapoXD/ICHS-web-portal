{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"length\", \"scrollLength\", \"classPrefix\", \"vertical\", \"className\", \"tableId\", \"onMouseDown\", \"onScroll\"];\nimport React, { useState, useRef, useCallback, useImperativeHandle } from 'react';\nimport DOMMouseMoveTracker from 'dom-lib/DOMMouseMoveTracker';\nimport addStyle from 'dom-lib/addStyle';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_MIN_WIDTH, TRANSITION_DURATION, BEZIER } from './constants';\nimport { useMount, useClassNames, useUpdateEffect, defer } from './utils';\nimport TableContext from './TableContext';\nvar Scrollbar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _barRef$current, _styles;\n  var _props$length = props.length,\n    length = _props$length === void 0 ? 1 : _props$length,\n    _props$scrollLength = props.scrollLength,\n    scrollLength = _props$scrollLength === void 0 ? 1 : _props$scrollLength,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'scrollbar' : _props$classPrefix,\n    vertical = props.vertical,\n    className = props.className,\n    tableId = props.tableId,\n    onMouseDown = props.onMouseDown,\n    onScroll = props.onScroll,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _React$useContext = React.useContext(TableContext),\n    translateDOMPositionXY = _React$useContext.translateDOMPositionXY;\n  var _useState = useState(false),\n    handlePressed = _useState[0],\n    setHandlePressed = _useState[1];\n  var _useState2 = useState({\n      top: 0,\n      left: 0\n    }),\n    barOffset = _useState2[0],\n    setBarOffset = _useState2[1];\n  var scrollOffset = useRef(0);\n  var scrollRange = useRef(scrollLength);\n  var barRef = useRef(null);\n  var handleRef = useRef(null);\n  var mouseMoveTracker = useRef();\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix({\n    vertical: vertical,\n    horizontal: !vertical,\n    pressed: handlePressed\n  }),\n  // keep the 'fixed' class name if it has already been given by useAffix hook\n  ((_barRef$current = barRef.current) === null || _barRef$current === void 0 ? void 0 : _barRef$current.classList.contains('fixed')) && 'fixed');\n  var width = length / scrollLength * 100;\n  var styles = (_styles = {}, _styles[vertical ? 'height' : 'width'] = width + \"%\", _styles[vertical ? 'minHeight' : 'minWidth'] = SCROLLBAR_MIN_WIDTH, _styles);\n  var valuenow = scrollOffset.current / length * 100 + width;\n  useMount(function () {\n    defer(function () {\n      if (barRef.current) {\n        setBarOffset(getOffset(barRef.current));\n      }\n    });\n    return function () {\n      releaseMouseMoves();\n    };\n  });\n  useUpdateEffect(function () {\n    if (scrollOffset.current) {\n      // Update the position of the scroll bar when the height of the table content area changes.\n      scrollOffset.current = scrollRange.current / scrollLength * scrollOffset.current;\n      updateScrollBarPosition(0);\n    }\n    scrollRange.current = scrollLength;\n  }, [scrollLength]);\n  useImperativeHandle(ref, function () {\n    return {\n      get root() {\n        return barRef.current;\n      },\n      get handle() {\n        return handleRef.current;\n      },\n      onWheelScroll: function onWheelScroll(delta, momentum) {\n        var nextDelta = delta / (scrollLength / length);\n        updateScrollBarPosition(nextDelta, undefined, momentum);\n      },\n      resetScrollBarPosition: function resetScrollBarPosition(forceDelta) {\n        if (forceDelta === void 0) {\n          forceDelta = 0;\n        }\n        scrollOffset.current = 0;\n        updateScrollBarPosition(0, forceDelta);\n      }\n    };\n  });\n  var updateScrollBarPosition = useCallback(function (delta, forceDelta, momentum) {\n    var max = scrollLength && length ? length - Math.max(length / scrollLength * length, SCROLLBAR_MIN_WIDTH + 2) : 0;\n    var styles = momentum ? {\n      'transition-duration': TRANSITION_DURATION + \"ms\",\n      'transition-timing-function': BEZIER\n    } : {};\n    var getSafeValue = function getSafeValue(value) {\n      if (value === void 0) {\n        value = 0;\n      }\n      return Math.min(Math.max(value, 0), max);\n    };\n    if (typeof forceDelta === 'undefined') {\n      scrollOffset.current += delta;\n      scrollOffset.current = getSafeValue(scrollOffset.current);\n    } else {\n      scrollOffset.current = getSafeValue(forceDelta);\n    }\n    if (vertical) {\n      translateDOMPositionXY === null || translateDOMPositionXY === void 0 ? void 0 : translateDOMPositionXY(styles, 0, scrollOffset.current);\n    } else {\n      translateDOMPositionXY === null || translateDOMPositionXY === void 0 ? void 0 : translateDOMPositionXY(styles, scrollOffset.current, 0);\n    }\n    if (handleRef.current) {\n      addStyle(handleRef.current, styles);\n    }\n  }, [length, scrollLength, translateDOMPositionXY, vertical]);\n  var handleScroll = useCallback(function (delta, event) {\n    var scrollDelta = delta * (scrollLength / length);\n    updateScrollBarPosition(delta);\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll(scrollDelta, event);\n  }, [length, onScroll, scrollLength, updateScrollBarPosition]);\n  var handleClick = useCallback(function (event) {\n    var _handleRef$current;\n    if (handleRef.current && (_handleRef$current = handleRef.current) !== null && _handleRef$current !== void 0 && _handleRef$current.contains(event.target)) {\n      return;\n    }\n    if (typeof (barOffset === null || barOffset === void 0 ? void 0 : barOffset.top) !== 'number' || typeof (barOffset === null || barOffset === void 0 ? void 0 : barOffset.left) !== 'number') {\n      return;\n    }\n    var offset = vertical ? event.pageY - (barOffset === null || barOffset === void 0 ? void 0 : barOffset.top) : event.pageX - barOffset.left;\n    var handleWidth = length / scrollLength * length;\n    var delta = offset - handleWidth;\n    var nextDelta = offset > scrollOffset.current ? delta - scrollOffset.current : offset - scrollOffset.current;\n    handleScroll(nextDelta, event);\n  }, [barOffset, handleScroll, length, scrollLength, vertical]);\n  var releaseMouseMoves = useCallback(function () {\n    var _mouseMoveTracker$cur, _mouseMoveTracker$cur2;\n    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : (_mouseMoveTracker$cur2 = _mouseMoveTracker$cur.releaseMouseMoves) === null || _mouseMoveTracker$cur2 === void 0 ? void 0 : _mouseMoveTracker$cur2.call(_mouseMoveTracker$cur);\n    mouseMoveTracker.current = null;\n  }, []);\n  var handleDragMove = useCallback(function (deltaX, deltaY, event) {\n    var _window, _window$event;\n    if (!mouseMoveTracker.current || !mouseMoveTracker.current.isDragging()) {\n      return;\n    }\n    if ((event === null || event === void 0 ? void 0 : event.buttons) === 0 || ((_window = window) === null || _window === void 0 ? void 0 : (_window$event = _window.event) === null || _window$event === void 0 ? void 0 : _window$event['buttons']) === 0) {\n      releaseMouseMoves();\n      return;\n    }\n    handleScroll(vertical ? deltaY : deltaX, event);\n  }, [handleScroll, releaseMouseMoves, vertical]);\n  var handleDragEnd = useCallback(function () {\n    releaseMouseMoves();\n    setHandlePressed(false);\n  }, [releaseMouseMoves]);\n  var getMouseMoveTracker = useCallback(function () {\n    return mouseMoveTracker.current || new DOMMouseMoveTracker(handleDragMove, handleDragEnd, document.body);\n  }, [handleDragEnd, handleDragMove]);\n  var handleMouseDown = useCallback(function (event) {\n    var _mouseMoveTracker$cur3;\n    mouseMoveTracker.current = getMouseMoveTracker();\n    mouseMoveTracker === null || mouseMoveTracker === void 0 ? void 0 : (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.captureMouseMoves(event);\n    setHandlePressed(true);\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n  }, [getMouseMoveTracker, onMouseDown]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"scrollbar\",\n    \"aria-controls\": tableId,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": valuenow,\n    \"aria-orientation\": vertical ? 'vertical' : 'horizontal'\n  }, rest, {\n    ref: barRef,\n    className: classes,\n    onClick: handleClick\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: handleRef,\n    className: prefix('handle'),\n    style: styles,\n    onMouseDown: handleMouseDown,\n    role: \"button\",\n    tabIndex: -1\n  }));\n});\nScrollbar.displayName = 'Table.Scrollbar';\nexport default Scrollbar;","map":null,"metadata":{},"sourceType":"module"}