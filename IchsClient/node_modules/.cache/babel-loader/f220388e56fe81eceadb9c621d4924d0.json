{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"collapsible\", \"width\", \"style\"];\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { ContainerContext } from \"../Container/Container.js\";\n/**\n * The `Sidebar` component for use with the `Container` component.\n * @see https://rsuitejs.com/components/container/\n */\nvar Sidebar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'aside' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'sidebar' : _props$classPrefix,\n    className = props.className,\n    collapsible = props.collapsible,\n    _props$width = props.width,\n    width = _props$width === void 0 ? 260 : _props$width,\n    style = props.style,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix({\n    collapse: collapsible\n  }));\n  var _useContext = useContext(ContainerContext),\n    setHasSidebar = _useContext.setHasSidebar;\n  useEffect(function () {\n    /** Notify the Container that the Sidebar is in the child node of the Container. */\n    setHasSidebar === null || setHasSidebar === void 0 ? void 0 : setHasSidebar(true);\n  }, [setHasSidebar]);\n  var styles = _extends({\n    flex: \"0 0 \" + width + \"px\",\n    width: width\n  }, style);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    style: styles\n  }));\n});\nSidebar.displayName = 'Sidebar';\nSidebar.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  collapsible: PropTypes.bool,\n  style: PropTypes.object\n};\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}