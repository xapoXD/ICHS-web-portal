{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"cascade\", \"cascadeData\", \"cascadePaths\", \"childrenKey\", \"disabledItemValues\", \"columnWidth\", \"columnHeight\", \"uncheckableItemValues\", \"value\", \"valueKey\", \"labelKey\", \"style\", \"renderTreeNode\", \"renderColumn\", \"onCheck\", \"onSelect\"];\nimport React from 'react';\nimport SpinnerIcon from '@rsuite/icons/legacy/Spinner';\nimport AngleLeftIcon from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRightIcon from '@rsuite/icons/legacy/AngleRight';\nimport { useClassNames, useCustom, useEventCallback } from \"../internals/hooks/index.js\";\nimport { shallowEqual } from \"../internals/utils/index.js\";\nimport { ListCheckItem, useCombobox } from \"../internals/Picker/index.js\";\nimport { isSomeParentChecked, isSomeChildChecked } from \"./utils.js\";\nvar emptyArray = [];\nvar TreeView = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'tree' : _props$classPrefix,\n    className = props.className,\n    cascade = props.cascade,\n    _props$cascadeData = props.cascadeData,\n    cascadeData = _props$cascadeData === void 0 ? emptyArray : _props$cascadeData,\n    _props$cascadePaths = props.cascadePaths,\n    cascadePaths = _props$cascadePaths === void 0 ? emptyArray : _props$cascadePaths,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    _props$columnWidth = props.columnWidth,\n    columnWidth = _props$columnWidth === void 0 ? 156 : _props$columnWidth,\n    _props$columnHeight = props.columnHeight,\n    columnHeight = _props$columnHeight === void 0 ? 200 : _props$columnHeight,\n    _props$uncheckableIte = props.uncheckableItemValues,\n    uncheckableItemValues = _props$uncheckableIte === void 0 ? emptyArray : _props$uncheckableIte,\n    value = props.value,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    style = props.style,\n    renderTreeNode = props.renderTreeNode,\n    renderColumn = props.renderColumn,\n    _onCheck = props.onCheck,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, prefix('items'));\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useCombobox = useCombobox(),\n    id = _useCombobox.id,\n    labelId = _useCombobox.labelId,\n    popupType = _useCombobox.popupType,\n    multiple = _useCombobox.multiple;\n  var getCascadePaths = function getCascadePaths(layer, node) {\n    var paths = [];\n    for (var i = 0; i < cascadeData.length && i < layer; i += 1) {\n      if (i < layer - 1 && cascadePaths) {\n        paths.push(cascadePaths[i]);\n      }\n    }\n    paths.push(node);\n    return paths;\n  };\n  var handleSelect = useEventCallback(function (layer, node, event) {\n    var cascadePaths = getCascadePaths(layer + 1, node);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, cascadePaths, event);\n  });\n  var renderCascadeNode = function renderCascadeNode(nodeProps) {\n    var node = nodeProps.node,\n      index = nodeProps.index,\n      layer = nodeProps.layer,\n      focus = nodeProps.focus,\n      uncheckable = nodeProps.uncheckable,\n      size = nodeProps.size;\n    var children = node[childrenKey];\n    var nodeValue = node[valueKey];\n    var label = node[labelKey];\n    var disabled = disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, nodeValue);\n    });\n\n    // Use `value` in keys when If `value` is string or number\n    var onlyKey = typeof value === 'number' || typeof value === 'string' ? value : index;\n    var Icon = node.loading ? SpinnerIcon : rtl ? AngleLeftIcon : AngleRightIcon;\n    var active = value.some(function (v) {\n      return v === nodeValue;\n    });\n    if (cascade) {\n      active = active || isSomeParentChecked(node, value, {\n        valueKey: valueKey\n      });\n    }\n    return /*#__PURE__*/React.createElement(ListCheckItem, {\n      as: \"li\",\n      role: \"treeitem\",\n      \"aria-level\": layer + 1,\n      \"aria-setsize\": size,\n      \"aria-posinset\": index + 1,\n      \"aria-label\": typeof label === 'string' ? label : undefined,\n      key: layer + \"-\" + onlyKey,\n      disabled: disabled,\n      active: active,\n      focus: focus\n      // Pass the node as a value to Item, and use it in event callbacks.\n      ,\n\n      value: nodeValue,\n      className: children ? prefix('has-children') : undefined,\n      indeterminate: cascade && !active && isSomeChildChecked(node, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      }),\n      onSelectItem: function onSelectItem(_value, event) {\n        return handleSelect(layer, node, event);\n      },\n      onCheck: function onCheck(_value, event, checked) {\n        return _onCheck === null || _onCheck === void 0 ? void 0 : _onCheck(node, event, checked);\n      },\n      checkable: !uncheckable,\n      labelClickable: false\n    }, renderTreeNode ? renderTreeNode(label, node) : label, children ? /*#__PURE__*/React.createElement(Icon, {\n      className: prefix('caret'),\n      spin: node.loading\n    }) : null);\n  };\n  var columnStyles = {\n    height: columnHeight,\n    width: columnWidth\n  };\n  var cascadeNodes = cascadeData.map(function (children, layer) {\n    var uncheckableCount = 0;\n    var onlyKey = layer + \"_\" + children.length;\n    var childNodes = /*#__PURE__*/React.createElement(React.Fragment, null, children.map(function (item, index) {\n      var uncheckable = uncheckableItemValues.some(function (uncheckableValue) {\n        return shallowEqual(uncheckableValue, item[valueKey]);\n      });\n      if (uncheckable) {\n        uncheckableCount++;\n      }\n      var focus = cascadePaths[layer] && shallowEqual(cascadePaths[layer][valueKey], item[valueKey]);\n      return renderCascadeNode({\n        node: item,\n        index: index,\n        layer: layer,\n        focus: focus,\n        uncheckable: uncheckable,\n        size: children.length\n      });\n    }));\n    var parentItem = cascadePaths[layer - 1];\n    var columnClasses = prefix('column', {\n      'column-uncheckable': uncheckableCount === children.length\n    });\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      role: \"group\",\n      key: onlyKey,\n      className: columnClasses,\n      \"data-layer\": layer,\n      style: columnStyles\n    }, renderColumn ? renderColumn(childNodes, {\n      items: children,\n      parentItem: parentItem,\n      layer: layer\n    }) : childNodes);\n  });\n  var styles = _extends({}, style, {\n    width: cascadeData.length * columnWidth\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"tree\",\n    id: id ? id + \"-\" + popupType : undefined,\n    \"aria-labelledby\": labelId,\n    \"aria-multiselectable\": multiple\n  }, rest, {\n    ref: ref,\n    className: classes,\n    style: styles\n  }), cascadeNodes);\n});\nTreeView.displayName = 'TreeView';\nexport default TreeView;","map":null,"metadata":{},"sourceType":"module"}