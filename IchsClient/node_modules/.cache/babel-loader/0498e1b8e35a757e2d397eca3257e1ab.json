{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport Icon from './Icon';\nimport { inBrowserEnv, defaultClassPrefix } from './utils';\nimport { useMemo } from 'react';\nvar cache = new Set();\nfunction isValidScriptUrl(scriptUrl) {\n  return typeof scriptUrl === 'string' && scriptUrl.length && !cache.has(scriptUrl);\n}\nfunction insertScripts(scriptUrls, index, loadedCallback) {\n  if (index === void 0) {\n    index = 0;\n  }\n  var nextIndex = index + 1;\n  var currentScriptUrl = scriptUrls[index];\n  var loadNextScript = function loadNextScript() {\n    insertScripts(scriptUrls, nextIndex, loadedCallback);\n  };\n  if (isValidScriptUrl(currentScriptUrl)) {\n    var script = document.createElement('script');\n    script.setAttribute('src', currentScriptUrl);\n    script.setAttribute('data-prop', 'icon-font');\n    if (scriptUrls.length > nextIndex) {\n      script.onload = loadNextScript;\n      script.onerror = loadNextScript;\n    }\n    cache.add(currentScriptUrl);\n    document.body.appendChild(script);\n  } else if (scriptUrls.length > nextIndex) {\n    loadNextScript();\n  }\n  if (nextIndex >= scriptUrls.length && typeof loadedCallback === 'function') {\n    loadedCallback();\n  }\n}\nfunction createIconFont(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    scriptUrl = _ref.scriptUrl,\n    _ref$commonProps = _ref.commonProps,\n    commonProps = _ref$commonProps === void 0 ? {} : _ref$commonProps,\n    onLoaded = _ref.onLoaded;\n  if (scriptUrl && inBrowserEnv()) {\n    var scriptUrls = Array.isArray(scriptUrl) ? scriptUrl : [scriptUrl];\n    insertScripts(scriptUrls.reverse(), 0, onLoaded);\n  }\n  var IconFont = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var icon = props.icon,\n      children = props.children,\n      className = props.className,\n      restProps = _objectWithoutPropertiesLoose(props, [\"icon\", \"children\", \"className\"]);\n    var clesses = classNames(className, commonProps.className, defaultClassPrefix('icon-font'));\n    /**\n     * Children will overwrite <use />\n     */\n\n    var content = useMemo(function () {\n      if (children) {\n        return children;\n      }\n      if (icon) {\n        return /*#__PURE__*/React.createElement(\"use\", {\n          xlinkHref: \"#\" + icon\n        });\n      }\n    }, [icon, children]);\n    return /*#__PURE__*/React.createElement(Icon, _extends({}, commonProps, restProps, {\n      className: clesses,\n      ref: ref\n    }), content);\n  });\n  IconFont.displayName = 'IconFont';\n  return IconFont;\n}\nexport default createIconFont;","map":null,"metadata":{},"sourceType":"module"}