{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"controlId\", \"className\"];\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useUniqueId } from \"../internals/hooks/index.js\";\nvar FormGroupContext = /*#__PURE__*/React.createContext({});\nexport var useFormGroup = function useFormGroup(controlId) {\n  var context = React.useContext(FormGroupContext);\n  var fallbackId = useUniqueId('rs-');\n  var id = controlId || context.controlId || fallbackId;\n  var helpTextId = id + \"-help-text\";\n  var labelId = id + \"-label\";\n  var errorMessageId = id + \"-error-message\";\n  return {\n    /**\n     * The `id` of the `<Form.Control>` component.\n     */\n    controlId: id,\n    /**\n     * The `id` of the `<Form.HelpText>` component.\n     */\n    helpTextId: helpTextId,\n    /**\n     * The `id` of the `<Form.ControlLabel>` component.\n     */\n    labelId: labelId,\n    /**\n     * The `id` of the `<Form.ErrorMessage>` component.\n     */\n    errorMessageId: errorMessageId\n  };\n};\n\n/**\n * The `<Form.Group>` component is the easiest way to add some structure to forms.\n * @see https://rsuitejs.com/components/form/\n */\nvar FormGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'form-group' : _props$classPrefix,\n    controlIdProp = props.controlId,\n    className = props.className,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  var controlId = useUniqueId('rs-', controlIdProp);\n  var contextValue = useMemo(function () {\n    return {\n      controlId: controlId\n    };\n  }, [controlId]);\n  return /*#__PURE__*/React.createElement(FormGroupContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    role: \"group\"\n  })));\n});\nFormGroup.displayName = 'FormGroup';\nFormGroup.propTypes = {\n  controlId: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string\n};\nexport default FormGroup;","map":null,"metadata":{},"sourceType":"module"}