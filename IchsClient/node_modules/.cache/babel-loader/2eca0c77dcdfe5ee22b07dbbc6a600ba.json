{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"activeKey\", \"onSelect\"],\n  _excluded2 = [\"as\", \"title\", \"onClose\", \"onOpen\", \"onToggle\", \"trigger\", \"placement\", \"toggleAs\", \"toggleClassName\", \"open\", \"defaultOpen\", \"classPrefix\", \"className\", \"disabled\", \"children\", \"menuStyle\", \"style\"],\n  _excluded3 = [\"open\"],\n  _excluded4 = [\"open\"];\nimport React, { useContext, useMemo, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport DropdownMenu from \"./DropdownMenu.js\";\nimport { PLACEMENT_8 } from \"../internals/constants/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { mergeRefs, placementPolyfill, warnOnce } from \"../internals/utils/index.js\";\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\nimport DropdownItem from \"./DropdownItem.js\";\nimport DropdownContext from \"./DropdownContext.js\";\nimport Menu from \"../internals/Menu/Menu.js\";\nimport DropdownToggle from \"./DropdownToggle.js\";\nimport kebabCase from 'lodash/kebabCase';\nimport NavContext from \"../Nav/NavContext.js\";\nimport { initialState, reducer } from \"./DropdownState.js\";\nimport Nav from \"../Nav/index.js\";\nimport DropdownSeparator from \"./DropdownSeparator.js\";\n/**\n * The `Dropdown` component is used to select an option from a set of options.\n * @see https://rsuitejs.com/components/dropdown\n *\n * The `<Dropdown>` API\n * - When used inside `<Sidenav>`, renders a `<TreeviewRootItem>`;\n * - Otherwise renders a `<MenuRoot>`\n */\nvar Dropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var activeKey = props.activeKey,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _rest$as = rest.as,\n    Component = _rest$as === void 0 ? 'div' : _rest$as,\n    title = rest.title,\n    onClose = rest.onClose,\n    onOpen = rest.onOpen,\n    onToggle = rest.onToggle,\n    _rest$trigger = rest.trigger,\n    trigger = _rest$trigger === void 0 ? 'click' : _rest$trigger,\n    _rest$placement = rest.placement,\n    placement = _rest$placement === void 0 ? 'bottomStart' : _rest$placement,\n    toggleAs = rest.toggleAs,\n    toggleClassName = rest.toggleClassName,\n    open = rest.open,\n    defaultOpen = rest.defaultOpen,\n    _rest$classPrefix = rest.classPrefix,\n    classPrefix = _rest$classPrefix === void 0 ? 'dropdown' : _rest$classPrefix,\n    className = rest.className,\n    disabled = rest.disabled,\n    children = rest.children,\n    menuStyle = rest.menuStyle,\n    style = rest.style,\n    toggleProps = _objectWithoutPropertiesLoose(rest, _excluded2);\n  var nav = useContext(NavContext);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n    withMenuClassPrefix = _useClassNames2.withClassPrefix,\n    mergeMenuClassName = _useClassNames2.merge;\n  var menuButtonTriggers = useMemo(function () {\n    if (!trigger) {\n      return undefined;\n    }\n    var triggerMap = {\n      hover: 'mouseover',\n      click: 'click',\n      contextMenu: 'contextmenu'\n    };\n    if (!Array.isArray(trigger)) {\n      return [triggerMap[trigger]];\n    }\n    return trigger.map(function (t) {\n      return triggerMap[t];\n    });\n  }, [trigger]);\n  var _useReducer = useReducer(reducer, initialState),\n    items = _useReducer[0].items,\n    dispatch = _useReducer[1];\n  var hasSelectedItem = useMemo(function () {\n    return items.some(function (item) {\n      return item.props.selected;\n    });\n  }, [items]);\n  var dropdownContextValue = useMemo(function () {\n    return {\n      activeKey: activeKey,\n      onSelect: onSelect,\n      hasSelectedItem: hasSelectedItem,\n      dispatch: dispatch\n    };\n  }, [activeKey, onSelect, hasSelectedItem, dispatch]);\n\n  // Deprecate <Dropdown> within <Nav> usage\n  // in favor of <Nav.Menu> API\n  if (nav) {\n    warnOnce('Usage of <Dropdown> within <Nav> is deprecated. Replace with <Nav.Menu>');\n    return /*#__PURE__*/React.createElement(Nav.Menu, _extends({\n      ref: ref\n    }, props));\n  }\n  var renderMenuButton = function renderMenuButton(menuButtonProps, menuButtonRef) {\n    return /*#__PURE__*/React.createElement(DropdownToggle, _extends({\n      ref: menuButtonRef,\n      as: toggleAs,\n      className: toggleClassName,\n      placement: placement,\n      disabled: disabled\n    }, omit(menuButtonProps, ['open']), omit(toggleProps, ['data-testid'])), title);\n  };\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: dropdownContextValue\n  }, /*#__PURE__*/React.createElement(Menu, {\n    open: open,\n    defaultOpen: defaultOpen,\n    menuButtonText: title,\n    renderMenuButton: renderMenuButton,\n    disabled: disabled,\n    openMenuOn: menuButtonTriggers,\n    renderMenuPopup: function renderMenuPopup(_ref, popupRef) {\n      var open = _ref.open,\n        popupProps = _objectWithoutPropertiesLoose(_ref, _excluded3);\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix({}));\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: popupRef,\n        className: menuClassName,\n        style: menuStyle,\n        hidden: !open\n      }, popupProps), children);\n    },\n    onToggleMenu: function onToggleMenu(open) {\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(open);\n      if (open) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n      } else {\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }\n  }, function (_ref2, menuContainerRef) {\n    var _withClassPrefix;\n    var open = _ref2.open,\n      menuContainer = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n    var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = !!placement, _withClassPrefix.disabled = disabled, _withClassPrefix.open = open, _withClassPrefix['selected-within'] = hasSelectedItem, _withClassPrefix)));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: mergeRefs(ref, menuContainerRef),\n      className: classes\n    }, menuContainer, pick(toggleProps, ['data-testid']), {\n      style: style\n    }));\n  }));\n});\nDropdown.Item = DropdownItem;\nDropdown.Menu = DropdownMenu;\nDropdown.Separator = DropdownSeparator;\nDropdown.displayName = 'Dropdown';\nDropdown.propTypes = {\n  activeKey: PropTypes.any,\n  classPrefix: PropTypes.string,\n  trigger: PropTypes.oneOfType([PropTypes.array, oneOf(['click', 'hover', 'contextMenu'])]),\n  placement: oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  open: deprecatePropType(PropTypes.bool),\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  toggleAs: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderToggle: PropTypes.func\n};\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}