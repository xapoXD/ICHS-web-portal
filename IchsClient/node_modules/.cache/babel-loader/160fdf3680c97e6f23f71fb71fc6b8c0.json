{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useCallback } from 'react';\nimport intersection from 'lodash/intersection';\nimport isUndefined from 'lodash/isUndefined';\nimport { getNodeParentKeys } from \"../utils/getNodeParentKeys.js\";\nimport { isSearching } from \"../utils/isSearching.js\";\nimport { UNSAFE_flattenTree } from \"../utils/flattenTree.js\";\nimport { getNodeCheckState } from \"../../CheckTree/utils.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\n/**\n * Determines whether a node should be shown based on the expanded state of its parent nodes.\n */\nfunction shouldShowNodeByParentExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n  var intersectionKeys = intersection(expandItemValues, parentKeys);\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n  return false;\n}\nfunction useVirtualizedTreeData(nodes, data, options) {\n  var _useItemDataKeys = useItemDataKeys(),\n    childrenKey = _useItemDataKeys.childrenKey,\n    valueKey = _useItemDataKeys.valueKey;\n\n  /**\n   * Formats the virtualized tree data.\n   */\n  return useCallback(function () {\n    var cascade = options.cascade,\n      searchKeyword = options.searchKeyword,\n      expandItemValues = options.expandItemValues;\n    return UNSAFE_flattenTree(data, childrenKey, function (node) {\n      var formatted = {};\n      var curNode = nodes === null || nodes === void 0 ? void 0 : nodes[node.refKey];\n      var parentKeys = getNodeParentKeys(nodes, curNode, valueKey);\n      /**\n       * When using virtualized,\n       * if the parent node is collapsed, the child nodes should be hidden\n       * avoid component height calculation errors\n       */\n      var visible = curNode !== null && curNode !== void 0 && curNode.parent ? shouldShowNodeByParentExpanded(expandItemValues, parentKeys) : true;\n\n      /**\n       * when searching, every node default expand\n       * the node's visible should follow the original state\n       */\n      if (isSearching(searchKeyword)) {\n        visible = node.visible;\n      }\n      if (curNode) {\n        var checkState = !isUndefined(cascade) ? getNodeCheckState(curNode, {\n          cascade: cascade,\n          nodes: nodes,\n          childrenKey: childrenKey\n        }) : undefined;\n        formatted = _extends({}, node, {\n          check: curNode.check,\n          uncheckable: curNode.uncheckable,\n          hasChildren: !!node[childrenKey],\n          layer: curNode.layer,\n          parent: curNode.parent,\n          checkState: checkState,\n          visible: visible\n        });\n      }\n      return formatted;\n    });\n  }, [childrenKey, data, nodes, options, valueKey]);\n}\nexport default useVirtualizedTreeData;","map":null,"metadata":{},"sourceType":"module"}