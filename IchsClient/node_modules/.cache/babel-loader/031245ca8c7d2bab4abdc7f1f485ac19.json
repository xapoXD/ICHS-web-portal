{"ast":null,"code":"'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport { KEY_VALUES } from \"../../internals/constants/index.js\";\nimport { useEventCallback, useCustom } from \"../../internals/hooks/index.js\";\nimport { onMenuKeyDown } from \"../../internals/Picker/index.js\";\nimport { useItemDataKeys, useRegisterTreeMethods } from \"../../internals/Tree/TreeProvider.js\";\nimport { isSearching, focusNextItem, getFocusableItems, getActiveItem, focusPreviousItem, focusCurrentItem, focusTreeNode, handleLeftArrow, handleRightArrow } from \"../utils/index.js\";\nimport useTreeNodeRefs from \"./useTreeNodeRefs.js\";\n/**\n * Custom hook that manages the focus behavior of a tree component.\n */\nfunction useFocusTree(props) {\n  var filteredData = props.filteredData,\n    searchKeyword = props.searchKeyword,\n    flattenedNodes = props.flattenedNodes,\n    expandItemValues = props.expandItemValues,\n    disabledItemValues = props.disabledItemValues,\n    onExpand = props.onExpand,\n    onFocused = props.onFocused;\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useItemDataKeys = useItemDataKeys(),\n    valueKey = _useItemDataKeys.valueKey,\n    childrenKey = _useItemDataKeys.childrenKey;\n  var _useTreeNodeRefs = useTreeNodeRefs(),\n    treeNodesRefs = _useTreeNodeRefs.treeNodesRefs,\n    saveTreeNodeRef = _useTreeNodeRefs.saveTreeNodeRef;\n  var treeViewRef = useRef(null);\n  var _useState = useState(null),\n    focusItemValue = _useState[0],\n    setFocusItemValue = _useState[1];\n  var register = useRegisterTreeMethods();\n  var flattenedNodesRef = useRef(flattenedNodes);\n  var getFocusProps = function getFocusProps(value) {\n    var options = {\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      expandItemValues: expandItemValues\n    };\n    var focusableItems = getFocusableItems(filteredData, options, isSearching(searchKeyword));\n    return {\n      focusItemValue: value || focusItemValue,\n      valueKey: valueKey,\n      focusableItems: focusableItems,\n      treeNodesRefs: treeNodesRefs\n    };\n  };\n  var handleFocusItem = useEventCallback(function (key) {\n    var focusProps = getFocusProps();\n    var focusedValue = null;\n    if (key === KEY_VALUES.DOWN) {\n      focusedValue = focusNextItem(focusProps);\n    } else if (key === KEY_VALUES.UP) {\n      focusedValue = focusPreviousItem(focusProps);\n    }\n    if (focusedValue) {\n      setFocusItemValue(focusedValue);\n      onFocused === null || onFocused === void 0 ? void 0 : onFocused(focusedValue);\n    }\n  });\n  var handleLeftArrowEvent = useEventCallback(function () {\n    if (isNil(focusItemValue)) {\n      return;\n    }\n    var focusItem = getActiveItem(focusItemValue, flattenedNodes, valueKey);\n    var expand = expandItemValues.includes(focusItem === null || focusItem === void 0 ? void 0 : focusItem[valueKey]);\n    var onFocusItem = function onFocusItem() {\n      var _focusItem$parent, _focusItem$parent2;\n      var focusedValue = focusItem === null || focusItem === void 0 ? void 0 : (_focusItem$parent = focusItem.parent) === null || _focusItem$parent === void 0 ? void 0 : _focusItem$parent[valueKey];\n      setFocusItemValue(focusedValue);\n      onFocused === null || onFocused === void 0 ? void 0 : onFocused(focusedValue);\n      focusTreeNode(focusItem === null || focusItem === void 0 ? void 0 : (_focusItem$parent2 = focusItem.parent) === null || _focusItem$parent2 === void 0 ? void 0 : _focusItem$parent2.refKey, treeNodesRefs);\n    };\n    handleLeftArrow({\n      focusItem: focusItem,\n      expand: expand,\n      onExpand: onExpand,\n      childrenKey: childrenKey,\n      onFocusItem: onFocusItem\n    });\n  });\n  var handleRightArrowEvent = useEventCallback(function () {\n    if (isNil(focusItemValue)) {\n      return;\n    }\n    var focusItem = getActiveItem(focusItemValue, flattenedNodes, valueKey);\n    var expand = expandItemValues.includes(focusItem === null || focusItem === void 0 ? void 0 : focusItem[valueKey]);\n    var onFocusItem = function onFocusItem() {\n      return handleFocusItem(KEY_VALUES.DOWN);\n    };\n    handleRightArrow({\n      focusItem: focusItem,\n      expand: expand,\n      childrenKey: childrenKey,\n      onExpand: onExpand,\n      onFocusItem: onFocusItem\n    });\n  });\n  var onTreeKeydown = useEventCallback(function (event) {\n    onMenuKeyDown(event, {\n      down: function down() {\n        return handleFocusItem(KEY_VALUES.DOWN);\n      },\n      up: function up() {\n        return handleFocusItem(KEY_VALUES.UP);\n      },\n      left: rtl ? handleRightArrowEvent : handleLeftArrowEvent,\n      right: rtl ? handleLeftArrowEvent : handleRightArrowEvent\n    });\n  });\n  var focusTreeFirstNode = useEventCallback(function () {\n    handleFocusItem(KEY_VALUES.DOWN);\n  });\n  var focusTreeActiveNode = useCallback(function () {\n    var refKey = focusCurrentItem({\n      container: treeViewRef.current\n    });\n    if (refKey) {\n      var _flattenedNodesRef$cu;\n      var node = (_flattenedNodesRef$cu = flattenedNodesRef.current) === null || _flattenedNodesRef$cu === void 0 ? void 0 : _flattenedNodesRef$cu[refKey];\n      if (node) {\n        setFocusItemValue(node[valueKey]);\n        onFocused === null || onFocused === void 0 ? void 0 : onFocused(node[valueKey]);\n      }\n    }\n  }, [onFocused, valueKey]);\n  useEffect(function () {\n    var unregister = register === null || register === void 0 ? void 0 : register({\n      focusTreeFirstNode: focusTreeFirstNode,\n      focusTreeActiveNode: focusTreeActiveNode\n    });\n    return function () {\n      unregister === null || unregister === void 0 ? void 0 : unregister();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    flattenedNodesRef.current = flattenedNodes;\n  }, [flattenedNodes]);\n  return {\n    treeViewRef: treeViewRef,\n    focusTreeFirstNode: focusTreeFirstNode,\n    focusItemValue: focusItemValue,\n    treeNodesRefs: treeNodesRefs,\n    saveTreeNodeRef: saveTreeNodeRef,\n    setFocusItemValue: setFocusItemValue,\n    onTreeKeydown: onTreeKeydown\n  };\n}\nexport default useFocusTree;","map":null,"metadata":{},"sourceType":"module"}