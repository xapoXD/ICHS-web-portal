{"ast":null,"code":"'use client';\n\nimport delay from 'lodash/delay';\nimport addMonths from 'date-fns/addMonths';\nimport addDays from 'date-fns/addDays';\nimport { useEventCallback, useCustom } from \"../../internals/hooks/index.js\";\nimport { getAriaLabel } from \"../../Calendar/utils.js\";\nimport { onMenuKeyDown } from \"../../internals/Picker/utils.js\";\nfunction useFocus(props) {\n  var target = props.target,\n    showMonth = props.showMonth,\n    id = props.id,\n    localeProp = props.locale;\n  var _useCustom = useCustom('DatePicker', localeProp),\n    locale = _useCustom.locale,\n    formatDate = _useCustom.formatDate;\n\n  /**\n   * Get the corresponding container based on date selection and month selection\n   */\n  var getOverlayContainer = function getOverlayContainer() {\n    return showMonth ? document.getElementById(id + \"-calendar-month-dropdown\") : document.getElementById(id + \"-calendar-table\");\n  };\n\n  /**\n   * Check whether the date is focusable\n   */\n  var checkFocusable = function checkFocusable(date) {\n    var formatStr = showMonth ? locale.formattedMonthPattern : locale.formattedDayPattern;\n    var ariaLabel = getAriaLabel(date, formatStr, formatDate);\n    var container = getOverlayContainer();\n    var dateElement = container === null || container === void 0 ? void 0 : container.querySelector(\"[aria-label=\\\"\" + ariaLabel + \"\\\"]\");\n    if ((dateElement === null || dateElement === void 0 ? void 0 : dateElement.getAttribute('aria-disabled')) === 'true') {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Focus on the currently selected date element\n   */\n  var focusSelectedDate = function focusSelectedDate() {\n    delay(function () {\n      var container = getOverlayContainer();\n      var selectedElement = container === null || container === void 0 ? void 0 : container.querySelector('[aria-selected=\"true\"]');\n      selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.focus();\n    }, 1);\n  };\n\n  /**\n   * Focus on the input element\n   */\n  var focusInput = useEventCallback(function () {\n    delay(function () {\n      var _target$current;\n      return (_target$current = target.current) === null || _target$current === void 0 ? void 0 : _target$current.focus();\n    }, 1);\n  });\n  var onKeyFocusEvent = useEventCallback(function (event, options) {\n    var date = options.date,\n      callback = options.callback;\n    var delta = 0;\n    var step = showMonth ? 6 : 7;\n    var changeDateFunc = showMonth ? addMonths : addDays;\n    onMenuKeyDown(event, {\n      down: function down() {\n        delta = step;\n      },\n      up: function up() {\n        delta = -step;\n      },\n      right: function right() {\n        delta = 1;\n      },\n      left: function left() {\n        delta = -1;\n      }\n    });\n    var nextDate = changeDateFunc(date, delta);\n    if (checkFocusable(nextDate)) {\n      callback(nextDate);\n      focusSelectedDate();\n    }\n  });\n  return {\n    focusInput: focusInput,\n    focusSelectedDate: focusSelectedDate,\n    onKeyFocusEvent: onKeyFocusEvent\n  };\n}\nexport default useFocus;","map":null,"metadata":{},"sourceType":"module"}