{"ast":null,"code":"'use client';\n\nimport requestAnimationFramePolyfill from 'dom-lib/requestAnimationFramePolyfill';\nimport cancelAnimationFramePolyfill from 'dom-lib/cancelAnimationFramePolyfill';\nexport var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return cancelAnimationFramePolyfill(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nexport var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n  var frame = {};\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call(null);\n    } else {\n      frame.id = requestAnimationFramePolyfill(timeout);\n    }\n  };\n  frame = {\n    id: requestAnimationFramePolyfill(timeout)\n  };\n  return frame;\n};","map":null,"metadata":{},"sourceType":"module"}