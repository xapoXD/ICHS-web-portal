{"ast":null,"code":"'use client';\n\nimport { shallowEqual } from \"../../internals/utils/index.js\";\n// Active tree node selector\nvar SELECTED_TREEITEM_SELECTOR = '[role=\"treeitem\"][aria-selected=\"true\"]';\n\n/**\n * Retrieves the focusable items from the filtered data based on the provided props.\n * Excludes nodes that are not visible or are disabled.\n */\nexport var getFocusableItems = function getFocusableItems(filteredData, props, isSearching) {\n  var disabledItemValues = props.disabledItemValues,\n    valueKey = props.valueKey,\n    childrenKey = props.childrenKey,\n    expandItemValues = props.expandItemValues;\n  var items = [];\n  var loop = function loop(nodes) {\n    nodes.forEach(function (node) {\n      var disabled = disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      });\n      if (!disabled && node.visible) {\n        items.push(node);\n      }\n      // always expand when searching\n      var expand = isSearching ? true : expandItemValues.includes(node[valueKey]);\n      if (node[childrenKey] && expand) {\n        loop(node[childrenKey]);\n      }\n    });\n  };\n  loop(filteredData);\n  return items;\n};\n\n/**\n * Returns the index of the active item in the focusItems array.\n *\n */\nvar getActiveIndex = function getActiveIndex(focusItemValue, focusItems, valueKey) {\n  var activeIndex = -1;\n  focusItems.forEach(function (item, index) {\n    if (shallowEqual(item[valueKey], focusItemValue)) {\n      activeIndex = index;\n    }\n  });\n  return activeIndex;\n};\n\n/**\n * Retrieves the active item from the flattened nodes based on the provided focus item value.\n */\nexport var getActiveItem = function getActiveItem(focusItemValue, flattenedNodes, valueKey) {\n  var nodeData = null;\n  var activeNode = Object.values(flattenedNodes).find(function (node) {\n    return shallowEqual(node[valueKey], focusItemValue);\n  });\n  if (activeNode) {\n    nodeData = activeNode;\n  }\n  return nodeData;\n};\n\n/**\n * Focuses on a specific tree node element.\n *\n */\nexport var focusTreeNode = function focusTreeNode(refKey, treeNodeRefs) {\n  var _treeItem$focus;\n  var treeItem = treeNodeRefs[refKey];\n  treeItem === null || treeItem === void 0 ? void 0 : (_treeItem$focus = treeItem.focus) === null || _treeItem$focus === void 0 ? void 0 : _treeItem$focus.call(treeItem);\n};\n/**\n * Focuses on the next item in a tree.\n */\nexport var focusNextItem = function focusNextItem(props) {\n  var focusItemValue = props.focusItemValue,\n    focusableItems = props.focusableItems,\n    treeNodesRefs = props.treeNodesRefs,\n    valueKey = props.valueKey;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var nextIndex = activeIndex === focusableItems.length - 1 ? 0 : activeIndex + 1;\n  var value = focusableItems[nextIndex][valueKey];\n  focusTreeNode(focusableItems[nextIndex].refKey, treeNodesRefs);\n  return value;\n};\n\n/**\n * Focuses on the previous item in a tree.\n */\nexport var focusPreviousItem = function focusPreviousItem(props) {\n  var focusItemValue = props.focusItemValue,\n    focusableItems = props.focusableItems,\n    treeNodesRefs = props.treeNodesRefs,\n    valueKey = props.valueKey;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var prevIndex = activeIndex === 0 ? focusableItems.length - 1 : activeIndex - 1;\n  prevIndex = prevIndex >= 0 ? prevIndex : 0;\n  var value = focusableItems[prevIndex][valueKey];\n  focusTreeNode(focusableItems[prevIndex].refKey, treeNodesRefs);\n  return value;\n};\n\n/**\n * Returns the index of the first visible node in the tree that matches the given value.\n */\nvar getScrollToIndex = function getScrollToIndex(nodes, value, valueKey) {\n  return nodes.filter(function (n) {\n    return n.visible;\n  }).findIndex(function (item) {\n    return item[valueKey] === value;\n  });\n};\n/**\n * Scrolls the list to the active tree node.\n *\n * @param props - The props object containing the necessary parameters.\n */\nexport function scrollToActiveTreeNode(props) {\n  var list = props.list,\n    value = props.value,\n    valueKey = props.valueKey,\n    virtualized = props.virtualized,\n    formattedNodes = props.formattedNodes;\n  if (virtualized && value) {\n    var _list$scrollToItem;\n    var scrollIndex = getScrollToIndex(formattedNodes, value, valueKey);\n    list === null || list === void 0 ? void 0 : (_list$scrollToItem = list.scrollToItem) === null || _list$scrollToItem === void 0 ? void 0 : _list$scrollToItem.call(list, scrollIndex);\n  }\n}\nexport var focusCurrentItem = function focusCurrentItem(props) {\n  var _props$selector = props.selector,\n    selector = _props$selector === void 0 ? SELECTED_TREEITEM_SELECTOR : _props$selector,\n    container = props.container;\n  var activeItem = container === null || container === void 0 ? void 0 : container.querySelector(selector);\n  if (activeItem) {\n    var _activeItem$focus, _activeItem$dataset;\n    activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$focus = activeItem.focus) === null || _activeItem$focus === void 0 ? void 0 : _activeItem$focus.call(activeItem);\n    return (_activeItem$dataset = activeItem.dataset) === null || _activeItem$dataset === void 0 ? void 0 : _activeItem$dataset.key;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}