{"ast":null,"code":"'use client';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { shallowEqual } from \"../../internals/utils/index.js\";\nfunction useData(props) {\n  var _props$controlledData = props.controlledData,\n    controlledData = _props$controlledData === void 0 ? [] : _props$controlledData,\n    _props$cacheData = props.cacheData,\n    cacheData = _props$cacheData === void 0 ? [] : _props$cacheData,\n    onChange = props.onChange;\n  var _useState = useState(controlledData),\n    uncontrolledData = _useState[0],\n    setData = _useState[1];\n  var _useState2 = useState([]),\n    newData = _useState2[0],\n    setNewData = _useState2[1];\n  var data = useMemo(function () {\n    return [].concat(uncontrolledData, newData);\n  }, [newData, uncontrolledData]);\n  var dataWithCache = useMemo(function () {\n    return [].concat(data, cacheData);\n  }, [data, cacheData]);\n\n  // Update the state when the data in props changes\n  useEffect(function () {\n    if (controlledData && !shallowEqual(controlledData, uncontrolledData)) {\n      setData(controlledData);\n      setNewData([]);\n      onChange === null || onChange === void 0 ? void 0 : onChange(controlledData);\n    }\n  }, [controlledData, uncontrolledData, onChange]);\n  return {\n    data: data,\n    dataWithCache: dataWithCache,\n    newData: newData,\n    setNewData: setNewData\n  };\n}\nexport default useData;","map":null,"metadata":{},"sourceType":"module"}