{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"children\", \"classPrefix\", \"className\", \"disabled\", \"size\", \"showControls\", \"stateOnBlur\", \"placeholder\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport EditableControls from \"./EditableControls.js\";\nimport useFocusEvent from \"./useFocusEvent.js\";\nimport useEditState from \"./useEditState.js\";\nimport { renderChildren, defaultRenderInput } from \"./renderChildren.js\";\nvar InlineEdit = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$children = props.children,\n    children = _props$children === void 0 ? defaultRenderInput : _props$children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'inline-edit' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    size = props.size,\n    _props$showControls = props.showControls,\n    showControls = _props$showControls === void 0 ? true : _props$showControls,\n    _props$stateOnBlur = props.stateOnBlur,\n    stateOnBlur = _props$stateOnBlur === void 0 ? 'save' : _props$stateOnBlur,\n    placeholder = props.placeholder,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var _useEditState = useEditState(_extends({}, rest, {\n      disabled: disabled\n    })),\n    value = _useEditState.value,\n    isEditing = _useEditState.isEditing,\n    onSave = _useEditState.onSave,\n    onCancel = _useEditState.onCancel,\n    onChange = _useEditState.onChange,\n    onKeyDown = _useEditState.onKeyDown,\n    onClick = _useEditState.onClick,\n    htmlProps = _useEditState.htmlProps;\n  var _useFocusEvent = useFocusEvent({\n      isEditing: isEditing,\n      stateOnBlur: stateOnBlur,\n      onSave: onSave,\n      onCancel: onCancel\n    }),\n    target = _useFocusEvent.target,\n    root = _useFocusEvent.root,\n    onBlur = _useFocusEvent.onBlur;\n  var childrenProps = {\n    size: size,\n    value: value,\n    disabled: disabled,\n    placeholder: placeholder,\n    plaintext: !isEditing,\n    onChange: onChange,\n    onBlur: onBlur\n  };\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: mergeRefs(root, ref),\n    tabIndex: 0,\n    className: merge(className, withClassPrefix(size, {\n      disabled: disabled\n    })),\n    onClick: onClick,\n    onKeyDown: onKeyDown\n  }, htmlProps), renderChildren(children, childrenProps, target), showControls && isEditing && /*#__PURE__*/React.createElement(EditableControls, {\n    className: prefix('controls'),\n    onSave: onSave,\n    onCancel: onCancel\n  }));\n});\nInlineEdit.displayName = 'InlineEdit';\nInlineEdit.propTypes = {\n  children: PropTypes.any,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  value: PropTypes.any,\n  showControls: PropTypes.bool,\n  placeholder: PropTypes.string,\n  size: oneOf(['lg', 'md', 'sm', 'xs']),\n  stateOnBlur: oneOf(['save', 'cancel']),\n  onChange: PropTypes.func,\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func,\n  onEdit: PropTypes.func\n};\nexport default InlineEdit;","map":null,"metadata":{},"sourceType":"module"}