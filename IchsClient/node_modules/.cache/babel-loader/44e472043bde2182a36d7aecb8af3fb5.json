{"ast":null,"code":"import formatErrorMessage, { joinName } from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name, label) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      const errorMsg = typeof errorMessage === 'function' ? errorMessage() : errorMessage;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMsg, {\n        ...params,\n        name: label || joinName(name)\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":null,"metadata":{},"sourceType":"module"}