{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"className\", \"disableHeight\", \"disableWidth\", \"defaultHeight\", \"defaultWidth\", \"style\", \"onResize\"];\nimport React, { useState, useRef } from 'react';\nimport { useCallback } from 'react';\nimport getStyle from 'dom-lib/getStyle';\nimport { useElementResize, useMount } from \"../hooks/index.js\";\nimport { mergeRefs } from \"../utils/index.js\";\n/**\n * High-order component that automatically adjusts the width and height of a single child.\n *\n * @private\n */\nvar AutoSizer = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n    className = props.className,\n    disableHeight = props.disableHeight,\n    disableWidth = props.disableWidth,\n    defaultHeight = props.defaultHeight,\n    defaultWidth = props.defaultWidth,\n    style = props.style,\n    onResize = props.onResize,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useState = useState(defaultHeight || 0),\n    height = _useState[0],\n    setHeight = _useState[1];\n  var _useState2 = useState(defaultWidth || 0),\n    width = _useState2[0],\n    setWidth = _useState2[1];\n  var rootRef = useRef(null);\n  var getParentNode = useCallback(function () {\n    var _rootRef$current;\n    if ((_rootRef$current = rootRef.current) !== null && _rootRef$current !== void 0 && _rootRef$current.parentNode && rootRef.current.parentNode.ownerDocument && rootRef.current.parentNode.ownerDocument.defaultView && rootRef.current.parentNode instanceof rootRef.current.parentNode.ownerDocument.defaultView.HTMLElement) {\n      return rootRef.current.parentNode;\n    }\n    return null;\n  }, []);\n  var handleResize = useCallback(function () {\n    var parentNode = getParentNode();\n    if (parentNode) {\n      var offsetHeight = parentNode.offsetHeight || 0;\n      var offsetWidth = parentNode.offsetWidth || 0;\n      var _style = getStyle(parentNode);\n      var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;\n      var paddingRight = parseInt(_style.paddingRight, 10) || 0;\n      var paddingTop = parseInt(_style.paddingTop, 10) || 0;\n      var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;\n      var newHeight = offsetHeight - paddingTop - paddingBottom;\n      var newWidth = offsetWidth - paddingLeft - paddingRight;\n      if (!disableHeight && height !== newHeight || !disableWidth && width !== newWidth) {\n        setHeight(offsetHeight - paddingTop - paddingBottom);\n        setWidth(offsetWidth - paddingLeft - paddingRight);\n        onResize === null || onResize === void 0 ? void 0 : onResize({\n          height: offsetHeight,\n          width: offsetWidth\n        });\n      }\n    }\n  }, [disableHeight, disableWidth, getParentNode, height, onResize, width]);\n  useMount(handleResize);\n  useElementResize(getParentNode(), handleResize);\n  var outerStyle = {\n    overflow: 'visible'\n  };\n  var childParams = {\n    width: 0,\n    height: 0\n  };\n  if (!disableHeight) {\n    outerStyle.height = 0;\n    childParams.height = height;\n  }\n  if (!disableWidth) {\n    outerStyle.width = 0;\n    childParams.width = width;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: className,\n    ref: mergeRefs(rootRef, ref),\n    style: _extends({}, outerStyle, style)\n  }, rest), children(childParams));\n});\nexport default AutoSizer;","map":null,"metadata":{},"sourceType":"module"}