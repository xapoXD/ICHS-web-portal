{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _omit from \"lodash/omit\";\nimport _isFunction from \"lodash/isFunction\";\nimport _pick from \"lodash/pick\";\nimport _isNil from \"lodash/isNil\";\nvar _excluded = [\"as\", \"id\", \"appearance\", \"cleanable\", \"countable\", \"cascade\", \"classPrefix\", \"childrenKey\", \"disabled\", \"data\", \"defaultValue\", \"defaultExpandAll\", \"disabledItemValues\", \"expandItemValues\", \"defaultExpandItemValues\", \"placeholder\", \"popupClassName\", \"popupStyle\", \"popupAutoWidth\", \"placement\", \"treeHeight\", \"toggleAs\", \"menuAutoWidth\", \"menuClassName\", \"menuStyle\", \"style\", \"searchBy\", \"searchKeyword\", \"showIndentLine\", \"searchable\", \"valueKey\", \"value\", \"virtualized\", \"uncheckableItemValues\", \"locale\", \"labelKey\", \"listProps\", \"getChildren\", \"renderExtraFooter\", \"onEnter\", \"onChange\", \"onClean\", \"onExit\", \"onSearch\", \"onSelect\", \"onSelectItem\", \"onScroll\", \"onExpand\", \"renderValue\", \"renderMenu\", \"renderTree\", \"renderTreeIcon\", \"renderTreeNode\"];\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useCustom, useClassNames, useEventCallback } from \"../internals/hooks/index.js\";\nimport { createChainedFunction, mergeRefs } from \"../internals/utils/index.js\";\nimport { PickerToggle, onMenuKeyDown, PickerPopup, SelectedElement, PickerToggleTrigger, usePickerClassName, useToggleKeyDownEvent, usePickerRef, pickTriggerPropKeys, omitTriggerPropKeys } from \"../internals/Picker/index.js\";\nimport CheckTreeView from \"../CheckTree/CheckTreeView.js\";\nimport { getSelectedItems } from \"../CheckTree/utils.js\";\nimport useTreeValue from \"../CheckTree/hooks/useTreeValue.js\";\nimport useFlattenTree from \"../Tree/hooks/useFlattenTree.js\";\nimport useTreeWithChildren from \"../Tree/hooks/useTreeWithChildren.js\";\nimport useExpandTree from \"../Tree/hooks/useExpandTree.js\";\nimport useFocusState from \"./hooks/useFocusState.js\";\nimport { TreeProvider, useTreeImperativeHandle } from \"../internals/Tree/TreeProvider.js\";\n/**\n * The `CheckTreePicker` component is used for selecting multiple options which are organized in a tree structure.\n *\n * @see https://rsuitejs.com/components/check-tree-picker\n */\nvar CheckTreePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    id = props.id,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    _props$countable = props.countable,\n    countable = _props$countable === void 0 ? true : _props$countable,\n    _props$cascade = props.cascade,\n    cascade = _props$cascade === void 0 ? true : _props$cascade,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    disabled = props.disabled,\n    _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,\n    _props$defaultExpandA = props.defaultExpandAll,\n    defaultExpandAll = _props$defaultExpandA === void 0 ? false : _props$defaultExpandA,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    controlledExpandItemValues = props.expandItemValues,\n    _props$defaultExpandI = props.defaultExpandItemValues,\n    defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI,\n    placeholder = props.placeholder,\n    popupClassName = props.popupClassName,\n    popupStyle = props.popupStyle,\n    _props$popupAutoWidth = props.popupAutoWidth,\n    popupAutoWidth = _props$popupAutoWidth === void 0 ? true : _props$popupAutoWidth,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    _props$treeHeight = props.treeHeight,\n    treeHeight = _props$treeHeight === void 0 ? 320 : _props$treeHeight,\n    toggleAs = props.toggleAs,\n    _props$menuAutoWidth = props.menuAutoWidth,\n    menuAutoWidth = _props$menuAutoWidth === void 0 ? popupAutoWidth : _props$menuAutoWidth,\n    DEPRECATED_menuClassName = props.menuClassName,\n    DEPRECATED_menuStyle = props.menuStyle,\n    style = props.style,\n    searchBy = props.searchBy,\n    searchKeyword = props.searchKeyword,\n    showIndentLine = props.showIndentLine,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? true : _props$searchable,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    controlledValue = props.value,\n    _props$virtualized = props.virtualized,\n    virtualized = _props$virtualized === void 0 ? false : _props$virtualized,\n    _props$uncheckableIte = props.uncheckableItemValues,\n    uncheckableItemValues = _props$uncheckableIte === void 0 ? [] : _props$uncheckableIte,\n    overrideLocale = props.locale,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    listProps = props.listProps,\n    getChildren = props.getChildren,\n    renderExtraFooter = props.renderExtraFooter,\n    onEnter = props.onEnter,\n    onChange = props.onChange,\n    onClean = props.onClean,\n    onExit = props.onExit,\n    onSearch = props.onSearch,\n    onSelect = props.onSelect,\n    onSelectItem = props.onSelectItem,\n    onScroll = props.onScroll,\n    onExpand = props.onExpand,\n    renderValue = props.renderValue,\n    DEPRECATED_renderMenu = props.renderMenu,\n    _props$renderTree = props.renderTree,\n    renderTree = _props$renderTree === void 0 ? DEPRECATED_renderMenu : _props$renderTree,\n    renderTreeIcon = props.renderTreeIcon,\n    renderTreeNode = props.renderTreeNode,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _usePickerRef = usePickerRef(ref),\n    trigger = _usePickerRef.trigger,\n    root = _usePickerRef.root,\n    target = _usePickerRef.target,\n    overlay = _usePickerRef.overlay,\n    list = _usePickerRef.list,\n    searchInput = _usePickerRef.searchInput,\n    treeView = _usePickerRef.treeView;\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix;\n  var _useTreeValue = useTreeValue(controlledValue, {\n      defaultValue: defaultValue,\n      uncheckableItemValues: uncheckableItemValues\n    }),\n    value = _useTreeValue[0],\n    setValue = _useTreeValue[1];\n  var itemDataKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n  var _useTreeWithChildren = useTreeWithChildren(data, itemDataKeys),\n    treeData = _useTreeWithChildren.treeData,\n    loadingNodeValues = _useTreeWithChildren.loadingNodeValues,\n    appendChild = _useTreeWithChildren.appendChild;\n  var _useExpandTree = useExpandTree(data, _extends({}, itemDataKeys, {\n      defaultExpandAll: defaultExpandAll,\n      defaultExpandItemValues: defaultExpandItemValues,\n      controlledExpandItemValues: controlledExpandItemValues,\n      onExpand: onExpand,\n      getChildren: getChildren,\n      appendChild: appendChild\n    })),\n    expandItemValues = _useExpandTree.expandItemValues,\n    handleExpandTreeNode = _useExpandTree.handleExpandTreeNode;\n  var flattenedNodes = useFlattenTree(treeData, _extends({}, itemDataKeys, {\n    uncheckableItemValues: uncheckableItemValues,\n    multiple: true,\n    cascade: cascade,\n    value: value\n  }));\n  var selectedNodes = getSelectedItems(flattenedNodes, value);\n  var _useTreeImperativeHan = useTreeImperativeHandle(),\n    register = _useTreeImperativeHan.register,\n    focusFirstNode = _useTreeImperativeHan.focusFirstNode;\n  var _useFocusState = useFocusState({\n      target: target,\n      onEnter: onEnter,\n      onExit: onExit\n    }),\n    focusItemValue = _useFocusState.focusItemValue,\n    setFocusItemValue = _useFocusState.setFocusItemValue,\n    active = _useFocusState.active,\n    triggerProps = _useFocusState.triggerProps;\n  var handleClean = useEventCallback(function (event) {\n    var target = event.target;\n    // exclude searchbox\n    if (target.matches('input[role=\"searchbox\"]') || disabled || !cleanable) {\n      return;\n    }\n    setFocusItemValue(null);\n    setValue([]);\n    onChange === null || onChange === void 0 ? void 0 : onChange([], event);\n  });\n  var handleTreeKeyDown = useEventCallback(function (event) {\n    onMenuKeyDown(event, {\n      del: handleClean,\n      down: function down() {\n        return focusFirstNode();\n      }\n    });\n  });\n  var onPickerKeydown = useToggleKeyDownEvent(_extends({\n    toggle: !focusItemValue || !active,\n    trigger: trigger,\n    target: target,\n    overlay: overlay,\n    searchInput: searchInput,\n    active: active,\n    onExit: handleClean,\n    onMenuKeyDown: handleTreeKeyDown\n  }, rest));\n  var handleChange = useEventCallback(function (nextValue, event) {\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n  });\n  var treeContext = useMemo(function () {\n    return {\n      register: register,\n      props: {\n        labelKey: labelKey,\n        valueKey: valueKey,\n        childrenKey: childrenKey,\n        virtualized: virtualized,\n        renderTreeIcon: renderTreeIcon,\n        renderTreeNode: renderTreeNode\n      }\n    };\n  }, [childrenKey, labelKey, valueKey, virtualized, register, renderTreeIcon, renderTreeNode]);\n  var checkTreeView = /*#__PURE__*/React.createElement(TreeProvider, {\n    value: treeContext\n  }, /*#__PURE__*/React.createElement(CheckTreeView, {\n    ref: treeView,\n    disabledItemValues: disabledItemValues,\n    expandItemValues: expandItemValues,\n    uncheckableItemValues: uncheckableItemValues,\n    cascade: cascade,\n    data: treeData,\n    height: treeHeight,\n    showIndentLine: showIndentLine,\n    listProps: listProps,\n    listRef: list,\n    searchBy: searchBy,\n    searchable: searchable,\n    searchKeyword: searchKeyword,\n    searchInputRef: searchInput,\n    onScroll: onScroll,\n    onSelect: onSelect,\n    onSelectItem: onSelectItem,\n    onExpand: handleExpandTreeNode,\n    onSearch: onSearch,\n    onChange: handleChange,\n    onFocusItem: setFocusItemValue,\n    value: value,\n    loadingNodeValues: loadingNodeValues,\n    flattenedNodes: flattenedNodes\n  }));\n  var renderTreeView = function renderTreeView(positionProps, speakerRef) {\n    var left = positionProps.left,\n      top = positionProps.top,\n      className = positionProps.className;\n    var classes = classNames(className, popupClassName, DEPRECATED_menuClassName, prefix('check-tree-menu'));\n    var mergedMenuStyle = _extends({}, popupStyle, DEPRECATED_menuStyle, {\n      left: left,\n      top: top\n    });\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: mergedMenuStyle,\n      onKeyDown: onPickerKeydown,\n      target: trigger\n    }, renderTree ? renderTree(checkTreeView) : checkTreeView, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n  var hasValidValue = selectedNodes.length > 0 || value.length > 0 && _isFunction(renderValue);\n  var selectedElement = placeholder;\n  if (hasValidValue) {\n    selectedElement = /*#__PURE__*/React.createElement(SelectedElement, {\n      selectedItems: selectedNodes,\n      countable: countable,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      prefix: prefix,\n      cascade: cascade,\n      locale: locale\n    });\n    if (_isFunction(renderValue)) {\n      selectedElement = renderValue(value, selectedNodes, selectedElement);\n      if (_isNil(selectedElement)) {\n        hasValidValue = false;\n      }\n    }\n  }\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n      classPrefix: classPrefix,\n      appearance: appearance,\n      countable: countable,\n      cleanable: cleanable,\n      disabled: disabled,\n      hasValue: hasValidValue,\n      name: 'check-tree'\n    })),\n    classes = _usePickerClassName[0],\n    usedClassNamePropKeys = _usePickerClassName[1];\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, _extends({\n    id: id,\n    popupType: \"tree\",\n    multiple: true,\n    pickerProps: _pick(props, pickTriggerPropKeys),\n    ref: trigger,\n    placement: placement,\n    speaker: renderTreeView\n  }, triggerProps), /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    ref: root\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, _omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    ref: target,\n    appearance: appearance,\n    onKeyDown: onPickerKeydown,\n    onClean: createChainedFunction(handleClean, onClean),\n    cleanable: cleanable && !disabled,\n    disabled: disabled,\n    as: toggleAs,\n    hasValue: hasValidValue,\n    active: active,\n    placement: placement,\n    inputValue: value,\n    focusItemValue: focusItemValue\n  }), selectedElement || locale.placeholder)));\n});\nCheckTreePicker.displayName = 'CheckTreePicker';\nexport default CheckTreePicker;","map":null,"metadata":{},"sourceType":"module"}