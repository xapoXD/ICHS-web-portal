{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport addStyle from 'dom-lib/addStyle';\nimport removeStyle from 'dom-lib/removeStyle';\nimport on from 'dom-lib/on';\nimport toggleClass from './toggleClass';\nimport isNumberOrTrue from './isNumberOrTrue';\nimport useUpdateEffect from './useUpdateEffect';\nvar useAffix = function useAffix(props) {\n  var getTableHeight = props.getTableHeight,\n    contentHeight = props.contentHeight,\n    affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n    affixHeader = props.affixHeader,\n    tableOffset = props.tableOffset,\n    headerOffset = props.headerOffset,\n    headerHeight = props.headerHeight,\n    scrollbarXRef = props.scrollbarXRef,\n    affixHeaderWrapperRef = props.affixHeaderWrapperRef;\n  var scrollListener = useRef();\n  var handleAffixHorizontalScrollbar = useCallback(function () {\n    var _tableOffset$current, _scrollbarXRef$curren;\n    var scrollY = window.scrollY || window.pageYOffset;\n    var windowHeight = getHeight(window);\n    var height = getTableHeight();\n    var bottom = typeof affixHorizontalScrollbar === 'number' ? affixHorizontalScrollbar : 0;\n    var offsetTop = ((_tableOffset$current = tableOffset.current) === null || _tableOffset$current === void 0 ? void 0 : _tableOffset$current.top) || 0;\n    var fixedScrollbar = scrollY + windowHeight < height + (offsetTop + bottom) && scrollY + windowHeight - headerHeight > offsetTop + bottom;\n    if (scrollbarXRef !== null && scrollbarXRef !== void 0 && (_scrollbarXRef$curren = scrollbarXRef.current) !== null && _scrollbarXRef$curren !== void 0 && _scrollbarXRef$curren.root) {\n      toggleClass(scrollbarXRef.current.root, 'fixed', fixedScrollbar);\n      if (fixedScrollbar) {\n        addStyle(scrollbarXRef.current.root, 'bottom', bottom + \"px\");\n      } else {\n        removeStyle(scrollbarXRef.current.root, 'bottom');\n      }\n    }\n  }, [affixHorizontalScrollbar, headerHeight, scrollbarXRef, getTableHeight, tableOffset]);\n  var handleAffixTableHeader = useCallback(function () {\n    var _headerOffset$current;\n    var top = typeof affixHeader === 'number' ? affixHeader : 0;\n    var scrollY = window.scrollY || window.pageYOffset;\n    var offsetTop = ((_headerOffset$current = headerOffset.current) === null || _headerOffset$current === void 0 ? void 0 : _headerOffset$current.top) || 0;\n    var fixedHeader = scrollY - (offsetTop - top) >= 0 && scrollY < offsetTop - top + contentHeight.current;\n    if (affixHeaderWrapperRef.current) {\n      toggleClass(affixHeaderWrapperRef.current, 'fixed', fixedHeader);\n    }\n  }, [affixHeader, affixHeaderWrapperRef, contentHeight, headerOffset]);\n  var handleWindowScroll = useCallback(function () {\n    if (isNumberOrTrue(affixHeader)) {\n      handleAffixTableHeader();\n    }\n    if (isNumberOrTrue(affixHorizontalScrollbar)) {\n      handleAffixHorizontalScrollbar();\n    }\n  }, [affixHeader, affixHorizontalScrollbar, handleAffixTableHeader, handleAffixHorizontalScrollbar]);\n  /**\n   * Update the position of the fixed element after the height of the table changes.\n   * fix: https://github.com/rsuite/rsuite/issues/1716\n   */\n\n  useUpdateEffect(handleWindowScroll, [getTableHeight]);\n  useEffect(function () {\n    if (isNumberOrTrue(affixHeader) || isNumberOrTrue(affixHorizontalScrollbar)) {\n      scrollListener.current = on(window, 'scroll', handleWindowScroll);\n    }\n    return function () {\n      var _scrollListener$curre;\n      (_scrollListener$curre = scrollListener.current) === null || _scrollListener$curre === void 0 ? void 0 : _scrollListener$curre.off();\n    };\n  }, [affixHeader, affixHorizontalScrollbar, handleWindowScroll]);\n};\nexport default useAffix;","map":null,"metadata":{},"sourceType":"module"}