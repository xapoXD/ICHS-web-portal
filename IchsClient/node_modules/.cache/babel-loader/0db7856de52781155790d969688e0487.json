{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"disabled\", \"style\", \"children\", \"position\", \"vertical\", \"tooltip\", \"rtl\", \"value\", \"role\", \"tabIndex\", \"renderTooltip\", \"onDragStart\", \"onDragMove\", \"onDragEnd\", \"onKeyDown\", \"data-range\", \"data-key\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from \"../Tooltip/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport Input from \"./Input.js\";\nimport useDrag from \"./useDrag.js\";\nvar Handle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _extends2;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'slider' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    style = props.style,\n    children = props.children,\n    position = props.position,\n    vertical = props.vertical,\n    tooltip = props.tooltip,\n    rtl = props.rtl,\n    value = props.value,\n    role = props.role,\n    tabIndex = props.tabIndex,\n    renderTooltip = props.renderTooltip,\n    onDragStart = props.onDragStart,\n    onDragMove = props.onDragMove,\n    onDragEnd = props.onDragEnd,\n    onKeyDown = props.onKeyDown,\n    dataRange = props['data-range'],\n    dateKey = props['data-key'],\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var horizontalKey = rtl ? 'right' : 'left';\n  var direction = vertical ? 'bottom' : horizontalKey;\n  var styles = _extends({}, style, (_extends2 = {}, _extends2[direction] = position + \"%\", _extends2));\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var _useDrag = useDrag({\n      tooltip: tooltip,\n      disabled: disabled,\n      onDragStart: onDragStart,\n      onDragMove: onDragMove,\n      onDragEnd: onDragEnd\n    }),\n    active = _useDrag.active,\n    onMoveStart = _useDrag.onMoveStart,\n    onMouseEnter = _useDrag.onMouseEnter,\n    rootRef = _useDrag.rootRef,\n    tooltipRef = _useDrag.tooltipRef;\n  var handleClasses = merge(className, prefix('handle'), {\n    active: active\n  });\n  return /*#__PURE__*/React.createElement(Component, {\n    role: role,\n    tabIndex: tabIndex,\n    ref: mergeRefs(ref, rootRef),\n    className: handleClasses,\n    onMouseDown: onMoveStart,\n    onMouseEnter: onMouseEnter,\n    onTouchStart: onMoveStart,\n    onKeyDown: onKeyDown,\n    style: styles,\n    \"data-range\": dataRange,\n    \"data-key\": dateKey,\n    \"data-testid\": \"slider-handle\"\n  }, tooltip && /*#__PURE__*/React.createElement(Tooltip, {\n    \"aria-hidden\": \"true\",\n    ref: tooltipRef,\n    className: merge(prefix('tooltip'), 'placement-top')\n  }, renderTooltip ? renderTooltip(value) : value), /*#__PURE__*/React.createElement(Input, _extends({\n    tabIndex: -1,\n    value: value\n  }, rest)), children);\n});\nHandle.displayName = 'Handle';\nHandle.propTypes = {\n  as: PropTypes.elementType,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  vertical: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  rtl: PropTypes.bool,\n  position: PropTypes.number,\n  value: PropTypes.number,\n  renderTooltip: PropTypes.func,\n  style: PropTypes.object,\n  onDragMove: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func\n};\nexport default Handle;","map":null,"metadata":{},"sourceType":"module"}