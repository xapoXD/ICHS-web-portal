{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"inline\", \"children\", \"classPrefix\", \"value\", \"defaultValue\", \"appearance\", \"name\", \"plaintext\", \"disabled\", \"readOnly\", \"onChange\"];\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nexport var RadioContext = /*#__PURE__*/React.createContext(void 0);\n\n/**\n * The `RadioGroup` component is used to group a collection of `Radio` components.\n * @see https://rsuitejs.com/components/radio/#radio-group\n */\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    inline = props.inline,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'radio-group' : _props$classPrefix,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    name = props.name,\n    plaintext = props.plaintext,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix(appearance, {\n    inline: inline\n  }));\n  var _useControlled = useControlled(valueProp, defaultValue),\n    value = _useControlled[0],\n    setValue = _useControlled[1],\n    isControlled = _useControlled[2];\n  var handleChange = useEventCallback(function (nextValue, event) {\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue !== null && nextValue !== void 0 ? nextValue : '', event);\n  });\n  var contextValue = useMemo(function () {\n    return {\n      inline: inline,\n      name: name,\n      value: typeof value === 'undefined' ? null : value,\n      controlled: isControlled,\n      plaintext: plaintext,\n      disabled: disabled,\n      readOnly: readOnly,\n      onChange: handleChange\n    };\n  }, [disabled, handleChange, inline, isControlled, name, plaintext, readOnly, value]);\n  return /*#__PURE__*/React.createElement(RadioContext.Provider, {\n    value: contextValue\n  }, plaintext ? /*#__PURE__*/React.createElement(Plaintext, _extends({\n    ref: ref,\n    localeKey: \"notSelected\"\n  }, rest), value ? children : null) : /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"radiogroup\"\n  }, rest, {\n    ref: ref,\n    className: classes\n  }), children));\n});\nRadioGroup.displayName = 'RadioGroup';\nRadioGroup.propTypes = {\n  appearance: oneOf(['default', 'picker']),\n  name: PropTypes.string,\n  inline: PropTypes.bool,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  onChange: PropTypes.func,\n  plaintext: PropTypes.bool\n};\nexport default RadioGroup;","map":null,"metadata":{},"sourceType":"module"}