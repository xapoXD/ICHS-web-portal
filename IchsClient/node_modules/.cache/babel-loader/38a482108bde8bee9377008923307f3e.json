{"ast":null,"code":"'use client';\n\nimport remove from 'lodash/remove';\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  traverse(node);\n  return parents;\n}\n\n/**\n * Check if any child nodes are selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nexport var isSomeChildChecked = function isSomeChildChecked(node, value, itemKeys) {\n  var childrenKey = itemKeys.childrenKey,\n    valueKey = itemKeys.valueKey;\n  if (!node[childrenKey] || !value) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    var _child$childrenKey;\n    if (value.some(function (n) {\n      return n === child[valueKey];\n    })) {\n      return true;\n    }\n    if ((_child$childrenKey = child[childrenKey]) !== null && _child$childrenKey !== void 0 && _child$childrenKey.length) {\n      return isSomeChildChecked(child, value, itemKeys);\n    }\n    return false;\n  });\n};\n\n/**\n * Check if the parent is selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nexport var isSomeParentChecked = function isSomeParentChecked(node, value, itemKeys) {\n  var valueKey = itemKeys.valueKey;\n  if (!value) {\n    return false;\n  }\n  if (value.some(function (n) {\n    return n === node[valueKey];\n  })) {\n    return true;\n  }\n  if (node.parent) {\n    return isSomeParentChecked(node.parent, value, itemKeys);\n  }\n  return false;\n};\nexport var getOtherItemValuesByUnselectChild = function getOtherItemValuesByUnselectChild(itemNode, value, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var parentValues = [];\n  var itemValues = [];\n\n  // Find the parent node of the current node by value\n  function findParent(item) {\n    parentValues.push(item[valueKey]);\n    if (value.some(function (v) {\n      return v === item[valueKey];\n    })) {\n      return item;\n    }\n    if (item.parent) {\n      var p = findParent(item.parent);\n      if (p) {\n        return p;\n      }\n    }\n    return null;\n  }\n\n  // Get child nodes through parent node\n  function pushChildValue(item) {\n    if (!item[childrenKey]) {\n      return;\n    }\n    item[childrenKey].forEach(function (n) {\n      // Determine whether it is a direct parent\n      if (parentValues.some(function (v) {\n        return v === n[valueKey];\n      }) && n[childrenKey]) {\n        pushChildValue(n);\n      } else if (n[valueKey] !== itemNode[valueKey]) {\n        itemValues.push(n[valueKey]);\n      }\n    });\n  }\n  var parent = findParent(itemNode);\n  if (!parent) {\n    return [];\n  }\n  pushChildValue(parent);\n  return itemValues;\n};\n\n/**\n * Remove the values of all children.\n */\nexport var removeAllChildrenValue = function removeAllChildrenValue(value, item, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var removedValue = [];\n  if (!item[childrenKey]) {\n    return;\n  }\n  item[childrenKey].forEach(function (n) {\n    removedValue = removedValue.concat(remove(value, function (v) {\n      return v === n[valueKey];\n    }));\n    if (n[childrenKey]) {\n      removeAllChildrenValue(value, n, itemKeys);\n    }\n  });\n  return removedValue;\n};","map":null,"metadata":{},"sourceType":"module"}