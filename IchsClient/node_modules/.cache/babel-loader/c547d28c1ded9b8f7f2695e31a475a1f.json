{"ast":null,"code":"'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from \"../internals/hooks/index.js\";\n/**\n * A hook that loads an image and returns the status of the image.\n *\n * @example\n * ```jsx\n * const { loaded } = useImage({ src:'https://example.com/image.jpg' });\n *\n * return loaded ? <img src=\"https://example.com/image.jpg\" /> : <Placeholder />;\n * ```\n */\nvar useImage = function useImage(props) {\n  var src = props.src,\n    srcSet = props.srcSet,\n    sizes = props.sizes,\n    crossOrigin = props.crossOrigin,\n    onError = props.onError;\n  var _useState = useState('pending'),\n    status = _useState[0],\n    setStatus = _useState[1];\n  var imgRef = useRef(null);\n  var flush = function flush() {\n    if (imgRef.current) {\n      imgRef.current.onload = null;\n      imgRef.current.onerror = null;\n      imgRef.current = null;\n    }\n  };\n  var handleLoad = useCallback(function () {\n    setStatus('loaded');\n    flush();\n  }, []);\n  var handleError = useCallback(function (event) {\n    setStatus('error');\n    flush();\n    onError === null || onError === void 0 ? void 0 : onError(event);\n  }, [onError]);\n  useEffect(function () {\n    setStatus(src ? 'loading' : 'pending');\n  }, [src]);\n  var loadImge = useCallback(function () {\n    if (!src) {\n      return;\n    }\n    var img = new Image();\n    img.onload = handleLoad;\n    img.onerror = handleError;\n    if (src) img.src = src;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    imgRef.current = img;\n  }, [crossOrigin, handleError, handleLoad, sizes, src, srcSet]);\n  useIsomorphicLayoutEffect(function () {\n    if (status === 'loading') {\n      loadImge();\n    }\n  }, [loadImge, status]);\n  useEffect(function () {\n    return flush;\n  }, []);\n  return {\n    loaded: status === 'loaded',\n    status: status\n  };\n};\nexport default useImage;","map":null,"metadata":{},"sourceType":"module"}