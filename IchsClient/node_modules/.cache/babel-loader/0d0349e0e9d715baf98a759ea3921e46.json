{"ast":null,"code":"'use client';\n\nimport { useImperativeHandle, useRef } from 'react';\nimport { useEventCallback } from \"../../hooks/index.js\";\nimport { RSUITE_PICKER_TYPE } from \"../../symbols.js\";\n/**\n * A hook of the exposed method of Picker\n */\nfunction usePickerRef(ref) {\n  var trigger = useRef(null);\n  var root = useRef(null);\n  var target = useRef(null);\n  var overlay = useRef(null);\n  var list = useRef(null);\n  var searchInput = useRef(null);\n  var treeView = useRef(null);\n  var handleOpen = useEventCallback(function () {\n    var _trigger$current;\n    trigger === null || trigger === void 0 ? void 0 : (_trigger$current = trigger.current) === null || _trigger$current === void 0 ? void 0 : _trigger$current.open();\n  });\n  var handleClose = useEventCallback(function () {\n    var _trigger$current2;\n    trigger === null || trigger === void 0 ? void 0 : (_trigger$current2 = trigger.current) === null || _trigger$current2 === void 0 ? void 0 : _trigger$current2.close();\n  });\n  var handleUpdatePosition = useEventCallback(function () {\n    var _trigger$current3;\n    trigger === null || trigger === void 0 ? void 0 : (_trigger$current3 = trigger.current) === null || _trigger$current3 === void 0 ? void 0 : _trigger$current3.updatePosition();\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      get root() {\n        var _ref, _trigger$current4;\n        return (_ref = (root === null || root === void 0 ? void 0 : root.current) || (trigger === null || trigger === void 0 ? void 0 : (_trigger$current4 = trigger.current) === null || _trigger$current4 === void 0 ? void 0 : _trigger$current4.root)) !== null && _ref !== void 0 ? _ref : null;\n      },\n      get overlay() {\n        var _overlay$current;\n        if (!(overlay !== null && overlay !== void 0 && overlay.current)) {\n          throw new Error('The overlay is not found. Please confirm whether the picker is open.');\n        }\n        return (_overlay$current = overlay === null || overlay === void 0 ? void 0 : overlay.current) !== null && _overlay$current !== void 0 ? _overlay$current : null;\n      },\n      get target() {\n        var _target$current;\n        return (_target$current = target === null || target === void 0 ? void 0 : target.current) !== null && _target$current !== void 0 ? _target$current : null;\n      },\n      get list() {\n        if (!(list !== null && list !== void 0 && list.current)) {\n          throw new Error(\"\\n            The list is not found.\\n            1.Please set virtualized for the component.\\n            2.Please confirm whether the picker is open.\\n          \");\n        }\n        return list === null || list === void 0 ? void 0 : list.current;\n      },\n      type: RSUITE_PICKER_TYPE,\n      updatePosition: handleUpdatePosition,\n      open: handleOpen,\n      close: handleClose\n    };\n  });\n  return {\n    trigger: trigger,\n    root: root,\n    overlay: overlay,\n    target: target,\n    list: list,\n    searchInput: searchInput,\n    treeView: treeView\n  };\n}\nexport default usePickerRef;","map":null,"metadata":{},"sourceType":"module"}