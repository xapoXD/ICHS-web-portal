{"ast":null,"code":"/**\n * Source code reference from:\n * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/dom/DOMMouseMoveTracker.js\n */\nimport on from \"./on.js\";\nimport cancelAnimationFramePolyfill from \"./cancelAnimationFramePolyfill.js\";\nimport requestAnimationFramePolyfill from \"./requestAnimationFramePolyfill.js\";\n/**\n * Mouse drag tracker, get the coordinate value where the mouse moves in time.\n *\n * ```typescript\n * const tracker = new DOMMouseMoveTracker(\n *   onMove:(deltaX: number, deltaY: number, moveEvent: Object) => void,\n *   onMoveEnd:() => void,\n *   container: HTMLElement\n * );\n * ```\n */\n\nvar DOMMouseMoveTracker = /*#__PURE__*/function () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function DOMMouseMoveTracker(onMove, onMoveEnd, domNode) {\n    var _this = this;\n    this.isDraggingStatus = false;\n    this.animationFrameID = null;\n    this.domNode = void 0;\n    this.onMove = null;\n    this.onMoveEnd = null;\n    this.eventMoveToken = null;\n    this.eventUpToken = null;\n    this.moveEvent = null;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.x = 0;\n    this.y = 0;\n    this.isDragging = function () {\n      return _this.isDraggingStatus;\n    };\n    this.onMouseMove = function (event) {\n      var x = event.clientX;\n      var y = event.clientY;\n      _this.deltaX += x - _this.x;\n      _this.deltaY += y - _this.y;\n      if (_this.animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\n        _this.animationFrameID = requestAnimationFramePolyfill(_this.didMouseMove);\n      }\n      _this.x = x;\n      _this.y = y;\n      _this.moveEvent = event;\n      event.preventDefault();\n    };\n    this.didMouseMove = function () {\n      _this.animationFrameID = null;\n      _this.onMove(_this.deltaX, _this.deltaY, _this.moveEvent);\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    };\n    this.onMouseUp = function (event) {\n      if (_this.animationFrameID) {\n        _this.didMouseMove();\n      }\n      _this.onMoveEnd && _this.onMoveEnd(event);\n    };\n    this.domNode = domNode;\n    this.onMove = onMove;\n    this.onMoveEnd = onMoveEnd;\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */\n\n  var _proto = DOMMouseMoveTracker.prototype;\n  _proto.captureMouseMoves = function captureMouseMoves(event) {\n    if (!this.eventMoveToken && !this.eventUpToken) {\n      this.eventMoveToken = on(this.domNode, 'mousemove', this.onMouseMove);\n      this.eventUpToken = on(this.domNode, 'mouseup', this.onMouseUp);\n    }\n    if (!this.isDraggingStatus) {\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.isDraggingStatus = true;\n      this.x = event.clientX;\n      this.y = event.clientY;\n    }\n    event.preventDefault();\n  }\n  /**\n   * These releases all of the listeners on document.body.\n   */;\n\n  _proto.releaseMouseMoves = function releaseMouseMoves() {\n    if (this.eventMoveToken) {\n      this.eventMoveToken.off();\n      this.eventMoveToken = null;\n    }\n    if (this.eventUpToken) {\n      this.eventUpToken.off();\n      this.eventUpToken = null;\n    }\n    if (this.animationFrameID !== null) {\n      cancelAnimationFramePolyfill(this.animationFrameID);\n      this.animationFrameID = null;\n    }\n    if (this.isDraggingStatus) {\n      this.isDraggingStatus = false;\n      this.x = 0;\n      this.y = 0;\n    }\n  }\n  /**\n   * Returns whether or not if the mouse movement is being tracked.\n   */;\n\n  return DOMMouseMoveTracker;\n}();\nexport default DOMMouseMoveTracker;","map":null,"metadata":{},"sourceType":"module"}