{"ast":null,"code":"'use client';\n\nimport { useState, useRef } from 'react';\nimport { useMount, useEventCallback } from \"../../hooks/index.js\";\nfunction getScrollState(target) {\n  var scrollTop = target.scrollTop;\n  var scrollHeight = target.scrollHeight;\n  var clientHeight = target.clientHeight;\n  if (scrollHeight <= clientHeight) {\n    return null;\n  } else if (scrollTop === 0) {\n    return 'top';\n  } else if (scrollTop + clientHeight === scrollHeight) {\n    return 'bottom';\n  } else {\n    return 'middle';\n  }\n}\nexport function useScrollState(scrollShadow) {\n  var bodyRef = useRef(null);\n  var _useState = useState(null),\n    scrollState = _useState[0],\n    setScrollState = _useState[1];\n  useMount(function () {\n    var observer;\n    if (bodyRef.current && scrollShadow) {\n      var target = bodyRef.current;\n      setScrollState(getScrollState(target));\n      var lastScrollHeight = target.scrollHeight;\n\n      // Listen for changes in scrollHeight\n      observer = new MutationObserver(function () {\n        var newScrollHeight = target === null || target === void 0 ? void 0 : target.scrollHeight;\n        if (newScrollHeight && newScrollHeight !== lastScrollHeight) {\n          setScrollState(getScrollState(target));\n          lastScrollHeight = newScrollHeight;\n        }\n      });\n      observer.observe(target, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }\n    return function () {\n      var _observer;\n      (_observer = observer) === null || _observer === void 0 ? void 0 : _observer.disconnect();\n    };\n  });\n  var handleScroll = useEventCallback(function (event) {\n    var target = event.currentTarget;\n    setScrollState(getScrollState(target));\n  });\n  return {\n    scrollState: scrollState,\n    handleScroll: scrollShadow ? handleScroll : undefined,\n    bodyRef: bodyRef\n  };\n}","map":null,"metadata":{},"sourceType":"module"}