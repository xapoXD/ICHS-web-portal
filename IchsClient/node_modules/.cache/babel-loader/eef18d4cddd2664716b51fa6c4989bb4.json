{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nvar _excluded = [\"as\", \"title\", \"className\", \"children\", \"checked\", \"color\", \"defaultChecked\", \"classPrefix\", \"tabIndex\", \"inputRef\", \"inputProps\", \"disabled\", \"readOnly\", \"plaintext\", \"inline\", \"name\", \"value\", \"onChange\", \"onClick\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { RadioContext } from \"../RadioGroup/RadioGroup.js\";\nimport { useClassNames, useControlled, useEventCallback, useUniqueId } from \"../internals/hooks/index.js\";\nimport { partitionHTMLProps } from \"../internals/utils/index.js\";\nimport { refType } from \"../internals/propTypes/index.js\";\n/**\n * The `Radio` component is a simple radio button.\n * @see https://rsuitejs.com/components/radio\n */\nvar Radio = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var radioContext = useContext(RadioContext);\n  var _ref = radioContext !== null && radioContext !== void 0 ? radioContext : {},\n    groupValue = _ref.value,\n    inlineContext = _ref.inline,\n    nameContext = _ref.name,\n    disabledContext = _ref.disabled,\n    readOnlyContext = _ref.readOnly,\n    plaintextContext = _ref.plaintext,\n    onGroupChange = _ref.onChange;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    title = props.title,\n    className = props.className,\n    children = props.children,\n    checkedProp = props.checked,\n    color = props.color,\n    defaultChecked = props.defaultChecked,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'radio' : _props$classPrefix,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n    inputRef = props.inputRef,\n    inputProps = props.inputProps,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? readOnlyContext : _props$readOnly,\n    _props$plaintext = props.plaintext,\n    plaintext = _props$plaintext === void 0 ? plaintextContext : _props$plaintext,\n    _props$inline = props.inline,\n    inline = _props$inline === void 0 ? inlineContext : _props$inline,\n    _props$name = props.name,\n    name = _props$name === void 0 ? nameContext : _props$name,\n    value = props.value,\n    onChange = props.onChange,\n    onClick = props.onClick,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useControlled = useControlled(typeof groupValue !== 'undefined' ? groupValue === value : checkedProp, defaultChecked || false),\n    checked = _useControlled[0],\n    setChecked = _useControlled[1],\n    selfControlled = _useControlled[2];\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix(color, {\n    inline: inline,\n    disabled: disabled,\n    checked: checked\n  }));\n  var _partitionHTMLProps = partitionHTMLProps(rest),\n    htmlInputProps = _partitionHTMLProps[0],\n    restProps = _partitionHTMLProps[1];\n  var handleChange = useEventCallback(function (event) {\n    if (disabled || readOnly) {\n      return;\n    }\n    setChecked(true);\n    onGroupChange === null || onGroupChange === void 0 ? void 0 : onGroupChange(value, event);\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, true, event);\n  });\n  var controlled = radioContext ? true : selfControlled;\n  if (typeof controlled !== 'undefined') {\n    // In uncontrolled situations, use defaultChecked instead of checked\n    htmlInputProps[controlled ? 'checked' : 'defaultChecked'] = checked;\n  }\n  var labelId = useUniqueId('label-');\n  if (plaintext) {\n    return checked ? /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n      ref: ref,\n      className: classes\n    }), children) : null;\n  }\n  var control = /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"control\"])))\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, inputProps, {\n    \"aria-labelledby\": labelId,\n    \"aria-checked\": checked,\n    \"aria-disabled\": disabled,\n    ref: inputRef,\n    type: \"radio\",\n    name: name,\n    value: value,\n    tabIndex: tabIndex,\n    readOnly: readOnly,\n    disabled: disabled,\n    onChange: handleChange\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"inner\"]))),\n    \"aria-hidden\": true\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n    ref: ref,\n    onClick: onClick,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"checker\"])))\n  }, children ? /*#__PURE__*/React.createElement(\"label\", {\n    title: title\n  }, control, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"label\"]))),\n    id: labelId\n  }, children)) : control));\n});\nRadio.displayName = 'Radio';\nRadio.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  inputProps: PropTypes.any,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  value: PropTypes.any,\n  inputRef: refType,\n  onChange: PropTypes.func\n};\nexport default Radio;","map":null,"metadata":{},"sourceType":"module"}