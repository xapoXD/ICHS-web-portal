{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"activePage\", \"classPrefix\", \"className\", \"disabled\", \"size\", \"style\", \"total\", \"prev\", \"next\", \"first\", \"last\", \"limitOptions\", \"limit\", \"locale\", \"layout\", \"maxButtons\", \"onChangePage\", \"onChangeLimit\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Pagination from \"./Pagination.js\";\nimport Divider from \"../Divider/index.js\";\nimport Input from \"../Input/index.js\";\nimport { useClassNames, useCustom, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { tplTransform } from \"../internals/utils/index.js\";\nimport LimitPicker from \"./LimitPicker.js\";\n\n/**\n * The layout of the paging component.\n */\n\nvar defaultLayout = ['pager'];\nvar defaultLimitOptions = [30, 50, 100];\n\n/**\n * Pagination component for displaying page numbers.\n *\n * @see https://rsuitejs.com/components/pagination\n */\nvar PaginationGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    activePageProp = props.activePage,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'pagination-group' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    size = props.size,\n    style = props.style,\n    total = props.total,\n    prev = props.prev,\n    next = props.next,\n    first = props.first,\n    last = props.last,\n    _props$limitOptions = props.limitOptions,\n    limitOptions = _props$limitOptions === void 0 ? defaultLimitOptions : _props$limitOptions,\n    limitProp = props.limit,\n    localeProp = props.locale,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? defaultLayout : _props$layout,\n    maxButtons = props.maxButtons,\n    onChangePage = props.onChangePage,\n    onChangeLimit = props.onChangeLimit,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _useControlled = useControlled(limitProp, 30),\n    limit = _useControlled[0],\n    setLimit = _useControlled[1];\n  var _useControlled2 = useControlled(activePageProp, 1),\n    activePage = _useControlled2[0],\n    setActivePage = _useControlled2[1];\n  var _useCustom = useCustom('Pagination', localeProp),\n    locale = _useCustom.locale;\n  var pages = Math.floor(total / limit) + (total % limit ? 1 : 0);\n  var classes = merge(className, withClassPrefix(size));\n  var handleInputBlur = useEventCallback(function (event) {\n    var value = parseInt(event.target.value);\n    if (value > 0 && value <= pages) {\n      onChangePage === null || onChangePage === void 0 ? void 0 : onChangePage(value);\n      setActivePage(value);\n    }\n    event.target.value = '';\n  });\n  var handleInputPressEnter = useEventCallback(function (event) {\n    var _event$target;\n    (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.blur();\n  });\n  var handleChangeLimit = useEventCallback(function (value) {\n    setLimit(value);\n    onChangeLimit === null || onChangeLimit === void 0 ? void 0 : onChangeLimit(value);\n  });\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: ref,\n    className: classes,\n    style: style\n  }, layout.map(function (key, index) {\n    var onlyKey = \"\" + key + index;\n    switch (key) {\n      case '-':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: prefix('grow'),\n          key: onlyKey\n        });\n      case '|':\n        return /*#__PURE__*/React.createElement(Divider, {\n          vertical: true,\n          key: onlyKey\n        });\n      case 'pager':\n        return /*#__PURE__*/React.createElement(Pagination, _extends({\n          key: onlyKey,\n          size: size,\n          prev: prev,\n          next: next,\n          first: first,\n          last: last,\n          maxButtons: maxButtons,\n          pages: pages,\n          disabled: disabled,\n          onSelect: onChangePage // fixme don't use any\n          ,\n\n          activePage: activePage\n        }, rest));\n      case 'total':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: onlyKey,\n          className: prefix('total')\n        }, locale.total && tplTransform(locale.total, total));\n      case 'skip':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: onlyKey,\n          className: classNames(prefix('skip'))\n        }, locale.skip && tplTransform(locale.skip, /*#__PURE__*/React.createElement(Input, {\n          size: size,\n          onBlur: handleInputBlur,\n          onPressEnter: handleInputPressEnter\n        })));\n      case 'limit':\n        return /*#__PURE__*/React.createElement(LimitPicker, {\n          key: onlyKey,\n          size: size,\n          locale: locale,\n          limit: limit,\n          onChangeLimit: handleChangeLimit,\n          limitOptions: limitOptions,\n          disabled: disabled,\n          prefix: prefix\n        });\n      default:\n        return key;\n    }\n  }));\n});\nPaginationGroup.displayName = 'PaginationGroup';\nPaginationGroup.propTypes = _extends({}, Pagination.propTypes, {\n  locale: PropTypes.any,\n  layout: PropTypes.array,\n  limitOptions: PropTypes.array,\n  limit: PropTypes.number,\n  total: PropTypes.number,\n  onChangePage: PropTypes.func,\n  onChangeLimit: PropTypes.func\n});\nexport default PaginationGroup;","map":null,"metadata":{},"sourceType":"module"}