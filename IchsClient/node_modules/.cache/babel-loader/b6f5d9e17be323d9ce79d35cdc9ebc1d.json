{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useSet } from 'react-use-set';\nimport { useEventCallback, useIsMounted } from \"../../internals/hooks/index.js\";\nimport { shallowEqual } from \"../../internals/utils/index.js\";\n/**\n * Hook for handling the state after the option is selected\n */\nvar useSelect = function useSelect(props) {\n  var value = props.value,\n    onSelect = props.onSelect,\n    getChildren = props.getChildren,\n    valueKey = props.valueKey,\n    onChange = props.onChange,\n    childrenKey = props.childrenKey,\n    selectedItem = props.selectedItem,\n    childrenMap = props.childrenMap;\n\n  // The item that focus is on\n  var _useState = useState(selectedItem),\n    activeItem = _useState[0],\n    setActiveItem = _useState[1];\n  var isMounted = useIsMounted();\n  var loadingItemsSet = useSet();\n  var handleSelect = useEventCallback(function (node, event) {\n    var _itemData$childrenKey;\n    var itemData = node.itemData,\n      isLeafNode = node.isLeafNode;\n    setActiveItem(itemData);\n\n    // Lazy load node's children\n    if (typeof getChildren === 'function' && ((_itemData$childrenKey = itemData[childrenKey]) === null || _itemData$childrenKey === void 0 ? void 0 : _itemData$childrenKey.length) === 0 && !childrenMap.has(itemData)) {\n      loadingItemsSet.add(itemData);\n      var children = getChildren(itemData);\n      if (children instanceof Promise) {\n        children.then(function (data) {\n          if (isMounted()) {\n            loadingItemsSet.delete(itemData);\n            childrenMap.set(itemData, data);\n          }\n        });\n      } else {\n        loadingItemsSet.delete(itemData);\n        childrenMap.set(itemData, children);\n      }\n    }\n    if (isLeafNode) {\n      var nextValue = itemData[valueKey];\n      if (!shallowEqual(value, nextValue)) {\n        onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n      }\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, event);\n  });\n  return {\n    loadingItemsSet: loadingItemsSet,\n    activeItem: activeItem,\n    setActiveItem: setActiveItem,\n    handleSelect: handleSelect\n  };\n};\nexport default useSelect;","map":null,"metadata":{},"sourceType":"module"}