{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n  constructor(errorMessage) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  rangeLength(minLength, maxLength, errorMessage = this.locale.rangeLength) {\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n  minLength(minLength, errorMessage = this.locale.minLength) {\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n  maxLength(maxLength, errorMessage = this.locale.maxLength) {\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n  unrepeatable(errorMessage = this.locale.unrepeatable) {\n    super.pushRule({\n      onValid: items => {\n        const hash = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n    return this;\n  }\n  of(type) {\n    super.pushRule({\n      onValid: (items, data, fieldName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(fieldName) ? [...fieldName, `[${index}]`] : [fieldName, `[${index}]`];\n          return type.check(value, data, name);\n        });\n        const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n        return {\n          hasError,\n          array: checkResults\n        };\n      }\n    });\n    return this;\n  }\n}\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}