{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"tooltip\", \"children\", \"id\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from \"../Tooltip/index.js\";\nimport Whisper from \"../Whisper/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { useFormGroup } from \"../FormGroup/index.js\";\nimport HelpIcon from '@rsuite/icons/legacy/HelpO';\n/**\n * The `<Form.HelpText>` component is used to display help information in the form.\n * @see https://rsuitejs.com/components/form/\n */\nvar FormHelpText = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useFormGroup = useFormGroup(),\n    helpTextId = _useFormGroup.helpTextId;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'span' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'form-help-text' : _props$classPrefix,\n    className = props.className,\n    tooltip = props.tooltip,\n    children = props.children,\n    _props$id = props.id,\n    id = _props$id === void 0 ? helpTextId : _props$id,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix({\n    tooltip: tooltip\n  }));\n  if (tooltip) {\n    return /*#__PURE__*/React.createElement(Whisper, {\n      ref: ref,\n      placement: \"topEnd\",\n      speaker: /*#__PURE__*/React.createElement(Tooltip, _extends({\n        id: id\n      }, rest), children)\n    }, /*#__PURE__*/React.createElement(Component, {\n      role: \"img\",\n      \"aria-label\": \"help\",\n      className: classes\n    }, /*#__PURE__*/React.createElement(HelpIcon, {\n      \"aria-hidden\": true\n    })));\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    id: id\n  }, rest, {\n    ref: ref,\n    className: classes\n  }), children);\n});\nFormHelpText.displayName = 'FormHelpText';\nFormHelpText.propTypes = {\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string\n};\nexport default FormHelpText;","map":null,"metadata":{},"sourceType":"module"}