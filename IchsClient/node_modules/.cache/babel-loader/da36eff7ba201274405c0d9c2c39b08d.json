{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"aria-label\", \"aria-labelledby\", \"aria-valuetext\", \"as\", \"graduated\", \"className\", \"barClassName\", \"progress\", \"vertical\", \"disabled\", \"readOnly\", \"plaintext\", \"classPrefix\", \"min\", \"handleClassName\", \"handleStyle\", \"handleTitle\", \"tooltip\", \"step\", \"defaultValue\", \"value\", \"max\", \"placeholder\", \"getAriaValueText\", \"renderTooltip\", \"renderMark\", \"onChange\", \"onChangeCommitted\"];\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport ProgressBar from \"./ProgressBar.js\";\nimport Handle from \"./Handle.js\";\nimport Graduated from \"./Graduated.js\";\nimport { useClassNames, useControlled, useCustom, useEventCallback } from \"../internals/hooks/index.js\";\nimport { precisionMath, checkValue, getPosition } from \"./utils.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nexport var sliderPropTypes = {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.number,\n  defaultValue: PropTypes.number,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  handleClassName: PropTypes.string,\n  handleTitle: PropTypes.node,\n  barClassName: PropTypes.string,\n  handleStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  graduated: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  progress: PropTypes.bool,\n  vertical: PropTypes.bool,\n  onChange: PropTypes.func,\n  onChangeCommitted: PropTypes.func,\n  renderMark: PropTypes.func,\n  renderTooltip: PropTypes.func,\n  getAriaValueText: PropTypes.func\n};\n\n/**\n * A Slider is an interface for users to adjust a value in a specific range.\n *\n * @see https://rsuitejs.com/components/slider\n */\nvar Slider = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var ariaLabel = props['aria-label'],\n    ariaLabelledby = props['aria-labelledby'],\n    ariaValuetext = props['aria-valuetext'],\n    _props$as = props.as,\n    Componnet = _props$as === void 0 ? 'div' : _props$as,\n    graduated = props.graduated,\n    className = props.className,\n    barClassName = props.barClassName,\n    progress = props.progress,\n    vertical = props.vertical,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'slider' : _props$classPrefix,\n    _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    handleClassName = props.handleClassName,\n    handleStyle = props.handleStyle,\n    handleTitle = props.handleTitle,\n    _props$tooltip = props.tooltip,\n    tooltip = _props$tooltip === void 0 ? true : _props$tooltip,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? 0 : _props$defaultValue,\n    valueProp = props.value,\n    _props$max = props.max,\n    maxProp = _props$max === void 0 ? 100 : _props$max,\n    placeholder = props.placeholder,\n    getAriaValueText = props.getAriaValueText,\n    renderTooltip = props.renderTooltip,\n    renderMark = props.renderMark,\n    onChange = props.onChange,\n    onChangeCommitted = props.onChangeCommitted,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var barRef = useRef(null);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var _useCustom = useCustom('Slider'),\n    rtl = _useCustom.rtl;\n  var classes = merge(className, withClassPrefix({\n    vertical: vertical,\n    disabled: disabled,\n    graduated: graduated,\n    'with-mark': renderMark,\n    readonly: readOnly\n  }));\n  var max = useMemo(function () {\n    return precisionMath(Math.floor((maxProp - min) / step) * step + min);\n  }, [maxProp, min, step]);\n\n  /**\n   * Returns a valid value that does not exceed the specified range of values.\n   */\n  var getValidValue = useCallback(function (value) {\n    return checkValue(value, min, max);\n  }, [max, min]);\n  var _useControlled = useControlled(getValidValue(valueProp), getValidValue(defaultValue)),\n    value = _useControlled[0],\n    setValue = _useControlled[1];\n  var count = useMemo(function () {\n    return precisionMath((max - min) / step);\n  }, [max, min, step]);\n\n  // Get the height of the progress bar\n  var getBarHeight = useCallback(function () {\n    return barRef.current ? getHeight(barRef.current) : 0;\n  }, []);\n  // Get the width of the progress bar\n  var getBarWidth = useCallback(function () {\n    return barRef.current ? getWidth(barRef.current) : 0;\n  }, []);\n  var getValueByOffset = useCallback(function (offset) {\n    var value = 0;\n    if (isNaN(offset)) {\n      return value;\n    }\n    if (vertical) {\n      var barHeight = getBarHeight();\n      value = Math.round(offset / (barHeight / count)) * step;\n    } else {\n      var barWidth = getBarWidth();\n      value = Math.round(offset / (barWidth / count)) * step;\n    }\n    return precisionMath(value);\n  }, [count, getBarHeight, getBarWidth, step, vertical]);\n\n  /**\n   * A value within the valid range is calculated from the position triggered by the event.\n   */\n  var getValueByPosition = useCallback(function (event) {\n    var barOffset = getOffset(barRef.current);\n    var _getPosition = getPosition(event),\n      pageX = _getPosition.pageX,\n      pageY = _getPosition.pageY;\n    var offset = vertical ? barOffset.top + barOffset.height - pageY : pageX - barOffset.left;\n    var offsetValue = rtl && !vertical ? barOffset.width - offset : offset;\n    return getValueByOffset(offsetValue) + min;\n  }, [getValueByOffset, min, rtl, vertical]);\n\n  /**\n   * Callback function that is fired when the mousemove is triggered\n   */\n  var handleChangeValue = useEventCallback(function (event) {\n    if (disabled || readOnly) {\n      return;\n    }\n    var nextValue = getValidValue(getValueByPosition(event));\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n  });\n\n  /**\n   * Callback function that is fired when the mouseup is triggered\n   */\n  var handleChangeCommitted = useEventCallback(function (event) {\n    if (disabled || readOnly) {\n      return;\n    }\n    var nextValue = getValidValue(getValueByPosition(event));\n    onChangeCommitted === null || onChangeCommitted === void 0 ? void 0 : onChangeCommitted(nextValue, event);\n  });\n  var handleClickBar = useEventCallback(function (event) {\n    handleChangeValue(event);\n    handleChangeCommitted(event);\n  });\n  var handleKeyDown = useEventCallback(function (event) {\n    var nextValue;\n    var increaseKey = rtl ? 'ArrowLeft' : 'ArrowRight';\n    var decreaseKey = rtl ? 'ArrowRight' : 'ArrowLeft';\n    switch (event.key) {\n      case 'Home':\n        nextValue = min;\n        break;\n      case 'End':\n        nextValue = max;\n        break;\n      case increaseKey:\n      case 'ArrowUp':\n        nextValue = Math.min(max, value + step);\n        break;\n      case decreaseKey:\n      case 'ArrowDown':\n        nextValue = Math.max(min, value - step);\n        break;\n      default:\n        return;\n    }\n\n    // Prevent scroll of the page\n    event.preventDefault();\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n  });\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      localeKey: \"notSelected\",\n      ref: ref,\n      placeholder: placeholder\n    }, value);\n  }\n  return /*#__PURE__*/React.createElement(Componnet, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    role: \"presentation\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: barRef,\n    className: merge(barClassName, prefix('bar')),\n    onClick: handleClickBar,\n    \"data-testid\": \"slider-bar\"\n  }, progress && /*#__PURE__*/React.createElement(ProgressBar, {\n    rtl: rtl,\n    vertical: vertical,\n    start: 0,\n    end: (value - min) / (max - min) * 100\n  }), graduated && /*#__PURE__*/React.createElement(Graduated, {\n    step: step,\n    min: min,\n    max: max,\n    count: count,\n    value: value,\n    renderMark: renderMark\n  })), /*#__PURE__*/React.createElement(Handle, {\n    position: (value - min) / (max - min) * 100,\n    className: handleClassName,\n    style: handleStyle,\n    disabled: disabled,\n    vertical: vertical,\n    tooltip: tooltip,\n    rtl: rtl,\n    value: value,\n    renderTooltip: renderTooltip,\n    onDragMove: handleChangeValue,\n    onKeyDown: handleKeyDown,\n    onDragEnd: handleChangeCommitted,\n    tabIndex: disabled || readOnly ? undefined : 0,\n    \"aria-orientation\": vertical ? 'vertical' : 'horizontal',\n    \"aria-valuenow\": value,\n    \"aria-disabled\": disabled,\n    \"aria-valuetext\": getAriaValueText ? getAriaValueText(value) : ariaValuetext,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min\n  }, handleTitle));\n});\nSlider.displayName = 'Slider';\nSlider.propTypes = sliderPropTypes;\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}