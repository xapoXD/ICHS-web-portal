{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useRef, useCallback } from 'react';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport { useControlled } from \"../../internals/hooks/index.js\";\nexport default function useFormValue(controlledValue, props) {\n  var formDefaultValue = props.formDefaultValue,\n    nestedField = props.nestedField;\n  var _useControlled = useControlled(controlledValue, formDefaultValue),\n    formValue = _useControlled[0],\n    setFormValue = _useControlled[1];\n  var realFormValueRef = useRef(formValue);\n  realFormValueRef.current = formValue;\n  var setFieldValue = useCallback(function (fieldName, fieldValue) {\n    var _extends2;\n    var nextFormError = nestedField ? set(_extends({}, formValue), fieldName, fieldValue) : _extends({}, formValue, (_extends2 = {}, _extends2[fieldName] = fieldValue, _extends2));\n    setFormValue(nextFormError);\n    return nextFormError;\n  }, [formValue, nestedField, setFormValue]);\n  var onRemoveValue = useCallback(function (name) {\n    /**\n     * when this function is called when the children component is unmount,\n     * it's an old render frame so use Ref to get future value\n     */\n    var formValue = omit(realFormValueRef.current, [name]);\n    realFormValueRef.current = formValue;\n    setFormValue(formValue);\n    return formValue;\n  }, [setFormValue]);\n  var resetFormValue = useCallback(function (nextValue) {\n    var value = nextValue || formDefaultValue;\n    setFormValue(value);\n    return value;\n  }, [formDefaultValue, setFormValue]);\n  return {\n    formValue: formValue,\n    setFormValue: setFormValue,\n    setFieldValue: setFieldValue,\n    onRemoveValue: onRemoveValue,\n    resetFormValue: resetFormValue\n  };\n}","map":null,"metadata":{},"sourceType":"module"}