{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getSelectIndexGap, isCursorAfterMonth, getDatePattern } from \"../DateInput/index.js\";\nexport var DateType = /*#__PURE__*/function (DateType) {\n  DateType[\"Start\"] = \"Start\";\n  DateType[\"End\"] = \"End\";\n  return DateType;\n}({});\nexport function getInputSelectedState(options) {\n  var input = options.input,\n    direction = options.direction,\n    formatStr = options.formatStr,\n    rangeFormatStr = options.rangeFormatStr,\n    localize = options.localize,\n    selectedMonth = options.selectedMonth,\n    _options$valueOffset = options.valueOffset,\n    valueOffset = _options$valueOffset === void 0 ? 0 : _options$valueOffset,\n    character = options.character,\n    dateType = options.dateType,\n    dateString = options.dateString;\n  var getPatternSelectedIndexes = function getPatternSelectedIndexes(pattern) {\n    var selectionStart = 0;\n    var selectionEnd = 0;\n    if (dateType === DateType.Start) {\n      selectionStart = rangeFormatStr.indexOf(pattern);\n      selectionEnd = rangeFormatStr.split(character)[0].lastIndexOf(pattern) + 1;\n    } else if (dateType === DateType.End) {\n      var position = rangeFormatStr.indexOf(character) + character.length;\n      selectionStart = rangeFormatStr.indexOf(pattern, position);\n      selectionEnd = rangeFormatStr.lastIndexOf(pattern) + 1;\n    }\n    var endDateGap = dateString.indexOf(character) - rangeFormatStr.indexOf(character);\n\n    // If the date type is end, and the end date is not selected, the selection range needs to be adjusted.\n    if (dateType === DateType.End && endDateGap > 0) {\n      selectionStart += endDateGap;\n      selectionEnd += endDateGap;\n    }\n    var gap = getSelectIndexGap({\n      pattern: pattern,\n      formatStr: formatStr,\n      valueOffset: valueOffset,\n      selectedMonth: selectedMonth,\n      localize: localize\n    });\n    var isSelectedMonth = pattern === 'M';\n    var isNullMonth = selectedMonth === null && !(isSelectedMonth && valueOffset !== 0);\n\n    // If the month is null and the valueOffset is 0, the month will not be updated, and the gap is 0 at this time.\n    if (isNullMonth) {\n      return {\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n      };\n    }\n    if (isSelectedMonth) {\n      return {\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd + gap\n      };\n    }\n    if (isCursorAfterMonth(selectionStart, formatStr)) {\n      return {\n        selectionStart: selectionStart + gap,\n        selectionEnd: selectionEnd + gap\n      };\n    }\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  };\n  if (typeof input.selectionEnd === 'number' && typeof input.selectionStart === 'number') {\n    var index = input.selectionStart;\n    var positionOffset = -1;\n    if (direction === 'left') {\n      index = input.selectionStart - 1;\n    } else if (direction === 'right') {\n      index = input.selectionEnd + 1;\n      positionOffset = 1;\n    }\n\n    // The start position of the index of the end date\n    var endDateIndex = dateString.indexOf(character) + character.length;\n    var datePattern = getDatePattern({\n      selectionIndex: dateType === DateType.End ? index - endDateIndex : index,\n      positionOffset: positionOffset,\n      formatStr: formatStr,\n      dateString: dateString,\n      valueOffset: valueOffset,\n      selectedMonth: selectedMonth,\n      localize: localize\n    });\n    var indexes = getPatternSelectedIndexes(datePattern);\n    return _extends({\n      selectedPattern: datePattern\n    }, indexes);\n  }\n  return {\n    selectedPattern: 'y',\n    selectionStart: 0,\n    selectionEnd: 0\n  };\n}\nexport function getDateType(dateString, character, cursorIndex) {\n  var splitIndex = dateString.indexOf(character);\n  if (cursorIndex > splitIndex) {\n    return DateType.End;\n  }\n  return DateType.Start;\n}\nexport function isSwitchDateType(dateString, character, cursorIndex, direction) {\n  var characterIndex = dateString.indexOf(character);\n  var startIndex = cursorIndex;\n  var endIndex = startIndex + character.length;\n  if (direction === 'left') {\n    endIndex = cursorIndex;\n    startIndex = endIndex - character.length;\n  }\n\n  // Check whether the cursor is a separator before and after\n  if (dateString.substring(startIndex, endIndex) === character) {\n    return true;\n  }\n\n  // Check whether the cursor is a number or letter before and after. If not, switch the date type.\n  // eg: `2020年12月01日`, the cursor is behind 01, press the right key, and switch to the end date.\n  if (direction === 'right') {\n    if (!dateString.substring(cursorIndex, characterIndex).match(/[0-9a-zA-Z]/)) {\n      return true;\n    }\n  }\n  if (!dateString.substring(characterIndex, cursorIndex).match(/[0-9a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}