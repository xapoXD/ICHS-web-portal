{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"renderToggle\", \"children\", \"noCaret\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowDownLineIcon from '@rsuite/icons/ArrowDownLine';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport NavbarItem from \"./NavbarItem.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\n/**\n * @private this component is not supposed to be used directly\n *          Instead it's rendered by a <Nav.Menu> call\n *\n * <Nav>\n *   <Nav.Menu> -> This will render <NavDropdown> component that renders a <NavDropdownToggle>\n *   </Nav.Menu>\n * </Nav>\n */\nvar NavbarDropdownToggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? NavbarItem : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'navbar-item' : _props$classPrefix,\n    renderToggle = props.renderToggle,\n    children = props.children,\n    noCaret = props.noCaret,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix({\n    'no-caret': noCaret\n  }));\n  var toggle = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), children, !noCaret && /*#__PURE__*/React.createElement(ArrowDownLineIcon, {\n    className: prefix('caret')\n  }));\n  return renderToggle ? renderToggle(rest, ref) : toggle;\n});\nNavbarDropdownToggle.displayName = 'Navbar.Dropdown.Toggle';\nNavbarDropdownToggle.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  noCaret: PropTypes.bool,\n  as: PropTypes.elementType,\n  renderToggle: PropTypes.func,\n  placement: oneOf(['bottomStart', 'bottomEnd', 'topStart', 'topEnd', 'leftStart', 'rightStart', 'leftEnd', 'rightEnd'])\n};\nexport default NavbarDropdownToggle;","map":null,"metadata":{},"sourceType":"module"}