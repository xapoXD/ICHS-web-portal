{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport { SCROLLBAR_WIDTH, SORT_TYPE } from '../constants';\nimport useControlled from './useControlled';\nimport getTableColumns from './getTableColumns';\nimport getTotalByColumns from './getTotalByColumns';\nimport getColumnProps from './getColumnProps';\nimport useUpdateEffect from './useUpdateEffect';\nimport flushSync from './flushSync';\nimport useMount from './useMount';\n\n/**\n * Attach rendering-related attributes to all cells of the form and cache them.\n * @param props\n * @returns\n */\nvar useCellDescriptor = function useCellDescriptor(props) {\n  var children = props.children,\n    rtl = props.rtl,\n    mouseAreaRef = props.mouseAreaRef,\n    tableRef = props.tableRef,\n    minScrollX = props.minScrollX,\n    scrollX = props.scrollX,\n    tableWidth = props.tableWidth,\n    headerHeight = props.headerHeight,\n    showHeader = props.showHeader,\n    sortTypeProp = props.sortType,\n    defaultSortType = props.defaultSortType,\n    sortColumn = props.sortColumn,\n    rowHeight = props.rowHeight,\n    onSortColumn = props.onSortColumn,\n    onHeaderCellResize = props.onHeaderCellResize,\n    prefix = props.prefix;\n  var _useControlled = useControlled(sortTypeProp, defaultSortType),\n    sortType = _useControlled[0],\n    setSortType = _useControlled[1];\n  var _useState = useState(),\n    cacheData = _useState[0],\n    setCacheData = _useState[1];\n  var clearCache = useCallback(function () {\n    setCacheData(null);\n  }, []);\n  var setColumnResizing = useCallback(function (resizing) {\n    if (!tableRef.current) {\n      return;\n    }\n    if (resizing) {\n      addClass(tableRef.current, prefix('column-resizing'));\n    } else {\n      removeClass(tableRef.current, prefix('column-resizing'));\n    }\n  }, [prefix, tableRef]);\n  /**\n   * storage column width from props.\n   * if current column width not equal initial column width, use current column width and update cache.\n   */\n\n  var initialColumnWidths = useRef({});\n  var columnWidths = useRef({});\n  useMount(function () {\n    // As the cells are cached before the table width is updated, it is necessary to clear the cache again. fix: #430\n    clearCache();\n  });\n  useUpdateEffect(function () {\n    clearCache();\n  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);\n  var handleColumnResizeEnd = useCallback(function (columnWidth, _cursorDelta, dataKey, index) {\n    columnWidths.current[dataKey + \"_\" + index + \"_width\"] = columnWidth;\n    setColumnResizing(false);\n    if (mouseAreaRef.current) {\n      addStyle(mouseAreaRef.current, {\n        display: 'none'\n      });\n    } // fix: https://github.com/rsuite/rsuite-table/issues/398\n\n    flushSync(function () {\n      return clearCache();\n    });\n    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);\n  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);\n  var handleColumnResizeMove = useCallback(function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = mouseAreaLeft;\n    var dir = 'left';\n    if (rtl) {\n      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;\n      dir = 'right';\n    }\n    if (!fixed) {\n      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);\n    }\n    if (mouseAreaRef.current) {\n      var _addStyle;\n      addStyle(mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    }\n  }, [minScrollX, mouseAreaRef, rtl, scrollX]);\n  var handleColumnResizeStart = useCallback(function (width, left, fixed) {\n    setColumnResizing(true);\n    handleColumnResizeMove(width, left, fixed);\n  }, [handleColumnResizeMove, setColumnResizing]);\n  var handleSortColumn = useCallback(function (dataKey) {\n    var nextSortType = sortType;\n    if (sortColumn === dataKey) {\n      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n      setSortType(nextSortType);\n    }\n    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);\n  }, [onSortColumn, setSortType, sortColumn, sortType]);\n  if (cacheData) {\n    return cacheData;\n  }\n  var hasCustomTreeCol = false;\n  var left = 0; // Cell left margin\n\n  var headerCells = []; // Table header cell\n\n  var bodyCells = []; // Table body cell\n\n  if (!children) {\n    var _cacheCell = {\n      columns: [],\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      hasCustomTreeCol: hasCustomTreeCol,\n      allColumnsWidth: left\n    };\n    setCacheData(_cacheCell);\n    return _cacheCell;\n  }\n  var columns = getTableColumns(children);\n  var count = columns.length;\n  var _getTotalByColumns = getTotalByColumns(columns),\n    totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n    totalWidth = _getTotalByColumns.totalWidth;\n  React.Children.forEach(columns, function (column, index) {\n    if ( /*#__PURE__*/React.isValidElement(column)) {\n      var _initialColumnWidths$, _columnWidths$current;\n      var columnChildren = column.props.children;\n      var columnProps = getColumnProps(column);\n      var _width = columnProps.width,\n        resizable = columnProps.resizable,\n        flexGrow = columnProps.flexGrow,\n        minWidth = columnProps.minWidth,\n        onResize = columnProps.onResize,\n        treeCol = columnProps.treeCol;\n      if (treeCol) {\n        hasCustomTreeCol = true;\n      }\n      if (columnChildren.length !== 2) {\n        throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n      }\n      var headerCell = columnChildren[0];\n      var cell = columnChildren[1];\n      var cellWidthId = cell.props.dataKey + \"_\" + index + \"_width\"; // get column width from cache.\n\n      var initialColumnWidth = (_initialColumnWidths$ = initialColumnWidths.current) === null || _initialColumnWidths$ === void 0 ? void 0 : _initialColumnWidths$[cellWidthId];\n      var currentWidth = (_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cellWidthId];\n      var cellWidth = currentWidth || _width || 0;\n      var isControlled = typeof _width === 'number' && typeof onResize === 'function';\n      /**\n       * in resizable mode,\n       *    if width !== initialColumnWidth, use current column width and update cache.\n       */\n\n      if (resizable && (initialColumnWidth || _width) && initialColumnWidth !== _width) {\n        // initial or update initialColumnWidth cache.\n        initialColumnWidths.current[cellWidthId] = _width;\n        /**\n         * if currentWidth exist, update columnWidths cache.\n         */\n\n        if (currentWidth) {\n          columnWidths.current[cellWidthId] = _width; // update cellWidth\n\n          cellWidth = _width;\n        }\n      }\n      if (tableWidth.current && flexGrow && totalFlexGrow) {\n        var grewWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n        /**\n         * resizable = false, width will be recalc when table render.\n         * resizable = true, only first render will use grewWidth.\n         */\n\n        cellWidth = resizable ? currentWidth || grewWidth : grewWidth;\n      }\n      var cellProps = _extends({}, omit(columnProps, ['children']), {\n        'aria-colindex': index + 1,\n        left: left,\n        headerHeight: headerHeight,\n        key: index,\n        width: isControlled ? _width : cellWidth,\n        height: typeof rowHeight === 'function' ? rowHeight() : rowHeight,\n        firstColumn: index === 0,\n        lastColumn: index === count - 1\n      });\n      if (showHeader && headerHeight) {\n        var headerCellProps = {\n          // Resizable column\n          // `index` is used to define the serial number when dragging the column width\n          index: index,\n          dataKey: cell.props.dataKey,\n          isHeaderCell: true,\n          minWidth: columnProps.minWidth,\n          sortable: columnProps.sortable,\n          onSortColumn: handleSortColumn,\n          sortType: sortType,\n          sortColumn: sortColumn,\n          flexGrow: resizable ? undefined : flexGrow\n        };\n        if (resizable) {\n          merge(headerCellProps, {\n            onResize: onResize,\n            onColumnResizeEnd: handleColumnResizeEnd,\n            onColumnResizeStart: handleColumnResizeStart,\n            onColumnResizeMove: handleColumnResizeMove\n          });\n        }\n        headerCells.push( /*#__PURE__*/React.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));\n      }\n      bodyCells.push( /*#__PURE__*/React.cloneElement(cell, cellProps));\n      left += cellWidth;\n    }\n  });\n  var cacheCell = {\n    columns: columns,\n    headerCells: headerCells,\n    bodyCells: bodyCells,\n    allColumnsWidth: left,\n    hasCustomTreeCol: hasCustomTreeCol\n  };\n  setCacheData(cacheCell);\n  return cacheCell;\n};\nexport default useCellDescriptor;","map":null,"metadata":{},"sourceType":"module"}