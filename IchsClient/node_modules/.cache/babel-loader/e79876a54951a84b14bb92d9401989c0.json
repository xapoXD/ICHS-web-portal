{"ast":null,"code":"'use client';\n\nimport { useEffect } from 'react';\nimport isFunction from 'lodash/isFunction';\nimport { useControlled, useEventCallback } from \"../../internals/hooks/index.js\";\nimport { createConcatChildrenFunction } from \"../../internals/Picker/index.js\";\nimport { getExpandItemValues, flattenTree } from \"../utils/index.js\";\nexport function getDefaultExpandItemValues(data, options) {\n  var valueKey = options.valueKey,\n    defaultExpandAll = options.defaultExpandAll,\n    childrenKey = options.childrenKey,\n    _options$defaultExpan = options.defaultExpandItemValues,\n    defaultExpandItemValues = _options$defaultExpan === void 0 ? [] : _options$defaultExpan;\n  if (defaultExpandAll) {\n    return flattenTree(data, function (item) {\n      return item[childrenKey] || [];\n    }).filter(function (item) {\n      return Array.isArray(item[childrenKey]) && item[childrenKey].length > 0;\n    }).map(function (item) {\n      return item[valueKey];\n    });\n  }\n  return defaultExpandItemValues;\n}\n/**\n * Custom hook for managing tree expansion state.\n */\nfunction useExpandTree(data, props) {\n  var defaultExpandAll = props.defaultExpandAll,\n    valueKey = props.valueKey,\n    childrenKey = props.childrenKey,\n    defaultExpandItemValues = props.defaultExpandItemValues,\n    controlledExpandItemValues = props.controlledExpandItemValues,\n    onExpand = props.onExpand,\n    getChildren = props.getChildren,\n    appendChild = props.appendChild;\n  var _useControlled = useControlled(controlledExpandItemValues, getDefaultExpandItemValues(data, {\n      defaultExpandAll: defaultExpandAll,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      defaultExpandItemValues: defaultExpandItemValues\n    })),\n    expandItemValues = _useControlled[0],\n    setExpandItemValues = _useControlled[1];\n  useEffect(function () {\n    if (Array.isArray(controlledExpandItemValues)) {\n      setExpandItemValues(controlledExpandItemValues);\n    }\n  }, [controlledExpandItemValues, setExpandItemValues]);\n  var handleExpandTreeNode = useEventCallback(function (node, expanded) {\n    var nextExpandItemValues = getExpandItemValues({\n      node: node,\n      isExpand: !expanded,\n      expandItemValues: expandItemValues,\n      valueKey: valueKey\n    });\n    setExpandItemValues(nextExpandItemValues);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nextExpandItemValues, node, createConcatChildrenFunction(node, node[valueKey], {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    }));\n    if (isFunction(getChildren) && !node.expand && Array.isArray(node[childrenKey]) && node[childrenKey].length === 0) {\n      appendChild(node, getChildren);\n    }\n  });\n  return {\n    expandItemValues: expandItemValues,\n    handleExpandTreeNode: handleExpandTreeNode\n  };\n}\nexport default useExpandTree;","map":null,"metadata":{},"sourceType":"module"}