{"ast":null,"code":"'use client';\n\nimport React, { useState, useEffect, useRef, useMemo, useCallback, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getContainer from 'dom-lib/getContainer';\nimport ownerDocument from 'dom-lib/ownerDocument';\nimport removeClass from 'dom-lib/removeClass';\nimport on from 'dom-lib/on';\nimport addClass from 'dom-lib/addClass';\nimport addStyle from 'dom-lib/addStyle';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport isElement from \"../../DOMHelper/isElement.js\";\nimport positionUtils from \"./positionUtils.js\";\nimport { getDOMNode } from \"../utils/index.js\";\nimport { useUpdateEffect } from \"../hooks/index.js\";\nvar usePosition = function usePosition(props, ref) {\n  var _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'right' : _props$placement,\n    _props$preventOverflo = props.preventOverflow,\n    preventOverflow = _props$preventOverflo === void 0 ? false : _props$preventOverflo,\n    _props$containerPaddi = props.containerPadding,\n    containerPadding = _props$containerPaddi === void 0 ? 0 : _props$containerPaddi,\n    container = props.container,\n    triggerTarget = props.triggerTarget,\n    followCursor = props.followCursor,\n    cursorPosition = props.cursorPosition;\n  var containerRef = useRef(null);\n  var lastTargetRef = useRef(null);\n  var overlayResizeObserver = useRef();\n  var defaultPosition = {\n    positionLeft: 0,\n    positionTop: 0,\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined\n  };\n  var _useState = useState(defaultPosition),\n    position = _useState[0],\n    setPosition = _useState[1];\n  var utils = useMemo(function () {\n    return positionUtils({\n      placement: placement,\n      preventOverflow: preventOverflow,\n      padding: containerPadding\n    });\n  }, [placement, preventOverflow, containerPadding]);\n  var updatePosition = useCallback(\n  /**\n   * @param placementChanged  Whether the placement has changed\n   * @param forceUpdateDOM Whether to update the DOM directly\n   * @returns void\n   */\n  function (placementChanged, forceUpdateDOM) {\n    if (placementChanged === void 0) {\n      placementChanged = true;\n    }\n    if (!(triggerTarget !== null && triggerTarget !== void 0 && triggerTarget.current)) {\n      return;\n    }\n    var targetElement = getDOMNode(triggerTarget);\n    if (!isElement(targetElement)) {\n      throw new Error('`target` should return an HTMLElement');\n    }\n\n    //  If the target and placement do not change, the position is not updated.\n    if (targetElement === lastTargetRef.current && !placementChanged) {\n      return;\n    }\n    var overlay = getDOMNode(ref.current);\n    var containerElement = getContainer(typeof container === 'function' ? container() : container !== null && container !== void 0 ? container : null, ownerDocument(ref.current).body);\n    var posi = utils.calcOverlayPosition(overlay, targetElement, containerElement, followCursor ? cursorPosition : undefined);\n    if (forceUpdateDOM && overlay) {\n      var _overlay$className, _overlay$className$ma;\n      var preClassName = overlay === null || overlay === void 0 ? void 0 : (_overlay$className = overlay.className) === null || _overlay$className === void 0 ? void 0 : (_overlay$className$ma = _overlay$className.match(/(placement-\\S+)/)) === null || _overlay$className$ma === void 0 ? void 0 : _overlay$className$ma[0];\n      removeClass(overlay, preClassName);\n      if (posi.positionClassName) {\n        addClass(overlay, posi.positionClassName);\n      }\n      addStyle(overlay, {\n        left: posi.positionLeft + \"px\",\n        top: posi.positionTop + \"px\"\n      });\n    } else {\n      setPosition(posi);\n    }\n    containerRef.current = containerElement;\n    lastTargetRef.current = targetElement;\n  }, [container, ref, triggerTarget, utils, followCursor, cursorPosition]);\n  useEffect(function () {\n    updatePosition(false);\n    var overlay = getDOMNode(ref.current);\n    var containerScrollListener;\n    if (containerRef.current && preventOverflow) {\n      var _containerRef$current;\n      // Update the overlay position when the container scroll bar is scrolling\n      containerScrollListener = on(((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.tagName) === 'BODY' ? window : containerRef.current, 'scroll', function () {\n        return updatePosition(true, true);\n      });\n    }\n\n    // Update the position when the window size changes\n    var resizeListener = on(window, 'resize', function () {\n      return updatePosition(true, true);\n    });\n    if (overlay) {\n      // Update the position when the size of the overlay changes\n      overlayResizeObserver.current = new ResizeObserver(function () {\n        return updatePosition(true, true);\n      });\n      overlayResizeObserver.current.observe(overlay);\n    }\n    return function () {\n      var _containerScrollListe, _overlayResizeObserve;\n      lastTargetRef.current = null;\n      (_containerScrollListe = containerScrollListener) === null || _containerScrollListe === void 0 ? void 0 : _containerScrollListe.off();\n      resizeListener === null || resizeListener === void 0 ? void 0 : resizeListener.off();\n      (_overlayResizeObserve = overlayResizeObserver.current) === null || _overlayResizeObserve === void 0 ? void 0 : _overlayResizeObserve.disconnect();\n    };\n  }, [preventOverflow, ref, updatePosition]);\n  useUpdateEffect(function () {\n    return updatePosition();\n  }, [updatePosition, placement]);\n  return [position, updatePosition];\n};\n/**\n * The `Position` component calculates the position of the child element.\n * @private\n */\nvar Position = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n    className = props.className,\n    followCursor = props.followCursor,\n    cursorPosition = props.cursorPosition;\n  var childRef = React.useRef(null);\n  var _usePosition = usePosition(props, childRef),\n    position = _usePosition[0],\n    updatePosition = _usePosition[1];\n  var positionClassName = position.positionClassName,\n    arrowOffsetLeft = position.arrowOffsetLeft,\n    arrowOffsetTop = position.arrowOffsetTop,\n    positionLeft = position.positionLeft,\n    positionTop = position.positionTop;\n  useImperativeHandle(ref, function () {\n    return {\n      get child() {\n        return childRef.current;\n      },\n      updatePosition: updatePosition\n    };\n  });\n  useEffect(function () {\n    if (!followCursor || !cursorPosition) return;\n    updatePosition();\n  }, [followCursor, cursorPosition, updatePosition]);\n  if (typeof children === 'function') {\n    var childProps = {\n      className: classNames(className, positionClassName),\n      arrowOffsetLeft: arrowOffsetLeft,\n      arrowOffsetTop: arrowOffsetTop,\n      left: positionLeft,\n      top: positionTop\n    };\n    return children(childProps, childRef);\n  }\n  return children;\n});\nPosition.displayName = 'Position';\nPosition.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.any]),\n  containerPadding: PropTypes.number,\n  placement: PropTypes.any,\n  preventOverflow: PropTypes.bool,\n  triggerTarget: PropTypes.any\n};\nexport default Position;","map":null,"metadata":{},"sourceType":"module"}