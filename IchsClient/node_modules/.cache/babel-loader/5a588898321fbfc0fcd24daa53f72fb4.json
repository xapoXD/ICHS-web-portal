{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"cascade\", \"data\", \"disabledItemValues\", \"expandItemValues\", \"height\", \"locale\", \"listProps\", \"listRef\", \"style\", \"searchKeyword\", \"showIndentLine\", \"searchable\", \"searchInputRef\", \"uncheckableItemValues\", \"loadingNodeValues\", \"flattenedNodes\", \"searchBy\", \"onChange\", \"onSearch\", \"onSelect\", \"onSelectItem\", \"onScroll\", \"onExpand\", \"onFocusItem\"];\nimport React, { useEffect, useMemo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { List, AutoSizer, defaultItemSize } from \"../internals/Windowing/index.js\";\nimport CheckTreeNode from \"./CheckTreeNode.js\";\nimport IndentLine from \"../Tree/IndentLine.js\";\nimport { useCustom, useClassNames, useEventCallback } from \"../internals/hooks/index.js\";\nimport { getPathTowardsItem, getKeyParentMap } from \"../internals/Tree/utils/index.js\";\nimport { onMenuKeyDown } from \"../internals/Picker/index.js\";\nimport { TreeView } from \"../internals/Tree/index.js\";\nimport SearchBox from \"../internals/SearchBox/index.js\";\nimport { hasGrandchild, isEveryFirstLevelNodeUncheckable, getFormattedTree, isNodeUncheckable } from \"./utils.js\";\nimport { hasVisibleChildren, getActiveItem, isExpand } from \"../Tree/utils/index.js\";\nimport useTreeSearch from \"../Tree/hooks/useTreeSearch.js\";\nimport useFocusTree from \"../Tree/hooks/useFocusTree.js\";\nimport useVirtualizedTreeData from \"../Tree/hooks/useVirtualizedTreeData.js\";\nimport useTreeCheckState from \"./hooks/useTreeCheckState.js\";\nimport useTreeNodeProps from \"./hooks/useTreeNodeProps.js\";\nimport { useTreeContextProps } from \"../internals/Tree/TreeProvider.js\";\n\n/**\n * Props for the CheckTreeView component.\n */\n\nvar CheckTreeView = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _merge2;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'check-tree' : _props$classPrefix,\n    _props$cascade = props.cascade,\n    cascade = _props$cascade === void 0 ? true : _props$cascade,\n    _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    _props$expandItemValu = props.expandItemValues,\n    expandItemValues = _props$expandItemValu === void 0 ? [] : _props$expandItemValu,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 360 : _props$height,\n    overrideLocale = props.locale,\n    listProps = props.listProps,\n    listRef = props.listRef,\n    style = props.style,\n    searchKeyword = props.searchKeyword,\n    showIndentLine = props.showIndentLine,\n    searchable = props.searchable,\n    searchInputRef = props.searchInputRef,\n    _props$uncheckableIte = props.uncheckableItemValues,\n    uncheckableItemValues = _props$uncheckableIte === void 0 ? [] : _props$uncheckableIte,\n    _props$loadingNodeVal = props.loadingNodeValues,\n    loadingNodeValues = _props$loadingNodeVal === void 0 ? [] : _props$loadingNodeVal,\n    _props$flattenedNodes = props.flattenedNodes,\n    flattenedNodes = _props$flattenedNodes === void 0 ? {} : _props$flattenedNodes,\n    searchBy = props.searchBy,\n    onChange = props.onChange,\n    onSearch = props.onSearch,\n    onSelect = props.onSelect,\n    onSelectItem = props.onSelectItem,\n    onScroll = props.onScroll,\n    onExpand = props.onExpand,\n    onFocusItem = props.onFocusItem,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale;\n  var _useTreeContextProps = useTreeContextProps(),\n    childrenKey = _useTreeContextProps.childrenKey,\n    valueKey = _useTreeContextProps.valueKey,\n    virtualized = _useTreeContextProps.virtualized,\n    scrollShadow = _useTreeContextProps.scrollShadow;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _useTreeCheckState = useTreeCheckState({\n      cascade: cascade,\n      flattenedNodes: flattenedNodes,\n      uncheckableItemValues: uncheckableItemValues\n    }),\n    getCheckedValues = _useTreeCheckState.getCheckedValues;\n  var handleSearchCallback = function handleSearchCallback(value, _data, event) {\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n  };\n  var _useTreeSearch = useTreeSearch({\n      callback: handleSearchCallback,\n      data: data,\n      searchKeyword: searchKeyword,\n      searchBy: searchBy\n    }),\n    filteredData = _useTreeSearch.filteredData,\n    keyword = _useTreeSearch.keyword,\n    setFilteredData = _useTreeSearch.setFilteredData,\n    handleSearch = _useTreeSearch.handleSearch;\n  var _useFocusTree = useFocusTree({\n      filteredData: filteredData,\n      disabledItemValues: disabledItemValues,\n      expandItemValues: expandItemValues,\n      searchKeyword: keyword,\n      flattenedNodes: flattenedNodes,\n      onFocused: onFocusItem,\n      onExpand: onExpand\n    }),\n    focusItemValue = _useFocusTree.focusItemValue,\n    setFocusItemValue = _useFocusTree.setFocusItemValue,\n    onTreeKeydown = _useFocusTree.onTreeKeydown,\n    saveTreeNodeRef = _useFocusTree.saveTreeNodeRef;\n  var transformation = useVirtualizedTreeData(flattenedNodes, filteredData, {\n    cascade: cascade,\n    expandItemValues: expandItemValues,\n    searchKeyword: keyword\n  });\n\n  /**\n   * Get formatted nodes for render tree\n   * @params render - renderNode function. only used when virtualized setting false\n   */\n  var getFormattedNodes = function getFormattedNodes(render) {\n    if (virtualized) {\n      return transformation().filter(function (item) {\n        return item.visible;\n      });\n    }\n    return getFormattedTree(flattenedNodes, filteredData, {\n      childrenKey: childrenKey,\n      cascade: cascade\n    }).map(function (node) {\n      return render === null || render === void 0 ? void 0 : render(node, 1);\n    }).filter(function (item) {\n      return item;\n    });\n  };\n  var getTreeNodeProps = useTreeNodeProps({\n    uncheckableItemValues: uncheckableItemValues,\n    disabledItemValues: disabledItemValues,\n    loadingNodeValues: loadingNodeValues,\n    focusItemValue: focusItemValue,\n    flattenedNodes: flattenedNodes,\n    keyword: keyword\n  });\n  useEffect(function () {\n    setFilteredData(data, keyword);\n  }, [data, keyword, setFilteredData]);\n\n  // TODO-Doma\n  // Replace `getKeyParentMap` with `getParentMap`\n  var itemParentMap = useMemo(function () {\n    return getKeyParentMap(data, function (node) {\n      return node[valueKey];\n    }, function (node) {\n      return node[childrenKey];\n    });\n  }, [childrenKey, data, valueKey]);\n  var handleSelect = useEventCallback(function (node, event) {\n    var currentNode = node.refKey ? flattenedNodes[node.refKey] : null;\n    if (!node || !currentNode) {\n      return;\n    }\n    var checkedValues = getCheckedValues(node, !currentNode.check);\n    var path = getPathTowardsItem(node, function (item) {\n      return itemParentMap.get(item[valueKey]);\n    });\n    setFocusItemValue(node[valueKey]);\n    onChange === null || onChange === void 0 ? void 0 : onChange(checkedValues, event);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(node, checkedValues, event);\n    onSelectItem === null || onSelectItem === void 0 ? void 0 : onSelectItem(node, path);\n  });\n  var selectActiveItem = function selectActiveItem(event) {\n    if (isNil(focusItemValue)) return;\n    var activeItem = getActiveItem(focusItemValue, flattenedNodes, valueKey);\n    if (!isNodeUncheckable(activeItem, {\n      uncheckableItemValues: uncheckableItemValues,\n      valueKey: valueKey\n    }) && activeItem !== null) {\n      handleSelect(activeItem, event);\n    }\n  };\n  var handleTreeKeyDown = useEventCallback(function (event) {\n    onTreeKeydown(event);\n    onMenuKeyDown(event, {\n      enter: selectActiveItem\n    });\n  });\n  var renderNode = function renderNode(node, layer) {\n    var visible = node.visible,\n      refKey = node.refKey,\n      parent = node.parent;\n\n    // when searching, all nodes should be expand\n    var expanded = isExpand(keyword, expandItemValues.includes(node[valueKey]));\n    if (!visible) {\n      return null;\n    }\n    var children = node[childrenKey];\n    var hasChildren = keyword ? hasVisibleChildren(node, childrenKey) : Boolean(children);\n    var treeNodeProps = _extends({}, getTreeNodeProps(_extends({}, node, {\n      parent: parent\n    })), {\n      layer: layer,\n      expanded: expanded,\n      hasChildren: hasChildren,\n      onSelect: handleSelect,\n      onExpand: onExpand\n    });\n    if (hasChildren) {\n      var _merge;\n      layer += 1;\n      var childClassName = merge(prefix('node-children'), (_merge = {}, _merge[prefix('node-expanded')] = expanded, _merge));\n      var nodes = children || [];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: childClassName,\n        key: node[valueKey]\n      }, /*#__PURE__*/React.createElement(CheckTreeNode, _extends({}, treeNodeProps, {\n        treeItemRef: function treeItemRef(ref) {\n          return saveTreeNodeRef(ref, refKey);\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('group'),\n        role: \"group\"\n      }, nodes.map(function (child) {\n        return renderNode(child, layer);\n      }), showIndentLine && /*#__PURE__*/React.createElement(IndentLine, null)));\n    }\n    return /*#__PURE__*/React.createElement(CheckTreeNode, _extends({\n      key: node[valueKey],\n      treeItemRef: function treeItemRef(ref) {\n        return saveTreeNodeRef(ref, refKey);\n      }\n    }, treeNodeProps));\n  };\n  var renderVirtualListNode = function renderVirtualListNode(_ref) {\n    var index = _ref.index,\n      style = _ref.style,\n      data = _ref.data;\n    var node = data[index];\n    var layer = node.layer,\n      refKey = node.refKey,\n      visible = node.visible,\n      hasChildren = node.hasChildren,\n      parent = node.parent;\n    var expanded = isExpand(keyword, expandItemValues.includes(node[valueKey]));\n    var treeNodeProps = _extends({}, getTreeNodeProps(_extends({}, node, {\n      parent: parent\n    })), {\n      onSelect: handleSelect,\n      onExpand: onExpand,\n      expanded: expanded,\n      layer: layer,\n      hasChildren: hasChildren\n    });\n    return visible && /*#__PURE__*/React.createElement(CheckTreeNode, _extends({\n      style: style,\n      ref: function ref(_ref2) {\n        return saveTreeNodeRef(_ref2, refKey);\n      }\n    }, treeNodeProps));\n  };\n  var classes = merge(className, withClassPrefix({\n    'without-children': !hasGrandchild(data, childrenKey),\n    virtualized: virtualized\n  }));\n  var formattedNodes = getFormattedNodes(renderNode);\n  var treeNodesClass = merge(prefix('root'), (_merge2 = {}, _merge2[prefix('all-uncheckable')] = isEveryFirstLevelNodeUncheckable(flattenedNodes, uncheckableItemValues, valueKey), _merge2));\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: ref,\n    className: classes,\n    style: style\n  }, searchable ? /*#__PURE__*/React.createElement(SearchBox, {\n    placeholder: locale.searchPlaceholder,\n    onChange: handleSearch,\n    value: keyword,\n    inputRef: searchInputRef\n  }) : null, keyword && formattedNodes.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('empty')\n  }, locale.noResultsText) : null, /*#__PURE__*/React.createElement(TreeView, _extends({}, rest, {\n    multiselectable: true,\n    treeRootClassName: treeNodesClass,\n    className: prefix('view'),\n    onScroll: onScroll,\n    onKeyDown: handleTreeKeyDown,\n    height: height\n  }), virtualized ? /*#__PURE__*/React.createElement(AutoSizer, {\n    defaultHeight: height,\n    style: {\n      width: 'auto',\n      height: 'auto'\n    },\n    className: prefix('virt-auto-sizer')\n  }, function (_ref3) {\n    var height = _ref3.height;\n    return /*#__PURE__*/React.createElement(List, _extends({\n      ref: listRef,\n      height: height,\n      itemSize: defaultItemSize,\n      itemCount: formattedNodes.length,\n      itemData: formattedNodes,\n      className: prefix('virt-list'),\n      scrollShadow: scrollShadow\n    }, listProps), renderVirtualListNode);\n  }) : formattedNodes));\n});\nCheckTreeView.displayName = 'CheckTreeView';\nexport default CheckTreeView;","map":null,"metadata":{},"sourceType":"module"}