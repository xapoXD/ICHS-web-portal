{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"active\", \"children\", \"disabled\", \"divider\", \"panel\", \"className\", \"style\", \"classPrefix\", \"icon\", \"eventKey\", \"onClick\", \"onSelect\"];\nimport React, { useCallback, useContext } from 'react';\nimport isNil from 'lodash/isNil';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { createChainedFunction, shallowEqual } from \"../internals/utils/index.js\";\nimport { SidenavContext } from \"./Sidenav.js\";\nimport PropTypes from 'prop-types';\nimport Ripple from \"../internals/Ripple/index.js\";\nimport SafeAnchor from \"../SafeAnchor/index.js\";\nimport NavContext from \"../Nav/NavContext.js\";\nimport { useRenderDropdownItem } from \"../Dropdown/useRenderDropdownItem.js\";\nimport classNames from 'classnames';\n/**\n * Tree View Node\n * @see https://www.w3.org/TR/wai-aria-practices-1.2/#TreeView\n */\nvar ExpandedSidenavDropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var sidenav = useContext(SidenavContext);\n  var nav = useContext(NavContext);\n  if (!sidenav || !nav) {\n    throw new Error('<SidenavDropdownItem> component is not supposed to be used standalone. Use <Nav.Item> within <Sidenav> instead.');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'li' : _props$as,\n    activeProp = props.active,\n    children = props.children,\n    disabled = props.disabled,\n    divider = props.divider,\n    panel = props.panel,\n    className = props.className,\n    style = props.style,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown-item' : _props$classPrefix,\n    icon = props.icon,\n    eventKey = props.eventKey,\n    onClick = props.onClick,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var selected = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && (shallowEqual(eventKey, sidenav.activeKey) || shallowEqual(nav.activeKey, eventKey));\n  var classes = merge(className, withClassPrefix({\n    'with-icon': icon,\n    active: selected,\n    disabled: disabled\n  }));\n  var handleClick = useCallback(function (event) {\n    var _nav$onSelect, _sidenav$onSelect;\n    if (disabled) return;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    (_nav$onSelect = nav.onSelect) === null || _nav$onSelect === void 0 ? void 0 : _nav$onSelect.call(nav, eventKey, event);\n    (_sidenav$onSelect = sidenav.onSelect) === null || _sidenav$onSelect === void 0 ? void 0 : _sidenav$onSelect.call(sidenav, eventKey, event);\n  }, [disabled, onSelect, sidenav, eventKey, nav]);\n  var menuitemEventHandlers = {\n    onClick: createChainedFunction(handleClick, onClick)\n  };\n  var renderDropdownItem = useRenderDropdownItem(Component);\n  if (divider) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      role: 'separator',\n      style: style,\n      className: merge(prefix('divider'), className)\n    }, rest));\n  }\n  if (panel) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      role: 'none presentation',\n      style: style,\n      className: merge(prefix('panel'), className)\n    }, rest, {\n      children: children\n    }));\n  }\n  return renderDropdownItem(_extends({\n    ref: ref\n  }, rest, {\n    style: style,\n    className: classes,\n    'aria-current': selected || undefined\n  }, menuitemEventHandlers, {\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, icon && /*#__PURE__*/React.cloneElement(icon, {\n      className: classNames(prefix('menu-icon'), icon.props.className)\n    }), children, /*#__PURE__*/React.createElement(Ripple, null))\n  }), SafeAnchor);\n});\nExpandedSidenavDropdownItem.displayName = 'Sidenav.Dropdown.Item';\nExpandedSidenavDropdownItem.propTypes = {\n  as: PropTypes.elementType,\n  expanded: PropTypes.bool,\n  active: PropTypes.bool,\n  divider: PropTypes.bool,\n  panel: PropTypes.bool,\n  disabled: PropTypes.bool,\n  submenu: PropTypes.element,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number,\n  title: PropTypes.node,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func\n};\nexport default ExpandedSidenavDropdownItem;","map":null,"metadata":{},"sourceType":"module"}