{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"weekendDate\", \"rowIndex\"];\nimport React, { useCallback } from 'react';\nimport { isSameDay, addDays, isBefore, isAfter, format } from \"../internals/utils/date/index.js\";\nimport { DATERANGE_DISABLED_TARGET } from \"../internals/constants/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\nimport TableCell from \"./TableCell.js\";\nvar TableRow = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-table' : _props$classPrefix,\n    _props$weekendDate = props.weekendDate,\n    weekendDate = _props$weekendDate === void 0 ? new Date() : _props$weekendDate,\n    rowIndex = props.rowIndex,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    _useCalendarContext$d = _useCalendarContext.date,\n    selected = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,\n    dateRange = _useCalendarContext.dateRange,\n    hoverRangeValue = _useCalendarContext.hoverRangeValue,\n    isoWeek = _useCalendarContext.isoWeek,\n    weekStart = _useCalendarContext.weekStart,\n    showWeekNumbers = _useCalendarContext.showWeekNumbers,\n    locale = _useCalendarContext.locale,\n    inSameMonth = _useCalendarContext.inSameMonth,\n    disabledDate = _useCalendarContext.disabledDate,\n    onSelect = _useCalendarContext.onSelect;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var handleSelect = useCallback(function (date, disabled, event) {\n    if (disabled) {\n      return;\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, event);\n  }, [onSelect]);\n  var renderDays = function renderDays() {\n    var days = [];\n    var _ref = dateRange || [],\n      selectedStartDate = _ref[0],\n      selectedEndDate = _ref[1];\n    var _ref2 = hoverRangeValue !== null && hoverRangeValue !== void 0 ? hoverRangeValue : [],\n      hoverStartDate = _ref2[0],\n      hoverEndDate = _ref2[1];\n    var isRangeSelectionMode = typeof dateRange !== 'undefined';\n    for (var i = 0; i < 7; i += 1) {\n      var thisDate = addDays(weekendDate, i);\n      var disabled = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(thisDate, dateRange, DATERANGE_DISABLED_TARGET.CALENDAR);\n      var unSameMonth = !(inSameMonth !== null && inSameMonth !== void 0 && inSameMonth(thisDate));\n      var rangeStart = !unSameMonth && selectedStartDate && isSameDay(thisDate, selectedStartDate);\n      var rangeEnd = !unSameMonth && selectedEndDate && isSameDay(thisDate, selectedEndDate);\n      var isSelected = isRangeSelectionMode ? rangeStart || rangeEnd : isSameDay(thisDate, selected);\n\n      // TODO-Doma Move those logic that's for DatePicker/DateRangePicker to a separate component\n      //           Calendar is not supposed to be reused this way\n      var inRange = false;\n      // for Selected\n      if (selectedStartDate && selectedEndDate) {\n        if (isBefore(thisDate, selectedEndDate) && isAfter(thisDate, selectedStartDate)) {\n          inRange = true;\n        }\n        if (isBefore(thisDate, selectedStartDate) && isAfter(thisDate, selectedEndDate)) {\n          inRange = true;\n        }\n      }\n\n      // for Hovering\n      if (!isSelected && hoverStartDate && hoverEndDate) {\n        if (!isAfter(thisDate, hoverEndDate) && !isBefore(thisDate, hoverStartDate)) {\n          inRange = true;\n        }\n        if (!isAfter(thisDate, hoverStartDate) && !isBefore(thisDate, hoverEndDate)) {\n          inRange = true;\n        }\n      }\n      days.push( /*#__PURE__*/React.createElement(TableCell, {\n        key: format(thisDate, 'yyyy-MM-dd'),\n        date: thisDate,\n        disabled: disabled,\n        selected: isSelected,\n        onSelect: handleSelect,\n        unSameMonth: unSameMonth,\n        rangeStart: rangeStart,\n        rangeEnd: rangeEnd,\n        inRange: inRange\n      }));\n    }\n    return days;\n  };\n  var classes = merge(className, prefix('row'));\n  var week = format(weekendDate, isoWeek ? 'I' : 'w', {\n    locale: locale === null || locale === void 0 ? void 0 : locale.dateLocale,\n    firstWeekContainsDate: 4,\n    weekStartsOn: weekStart\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"row\",\n    \"aria-rowindex\": rowIndex,\n    className: classes\n  }), showWeekNumbers && /*#__PURE__*/React.createElement(\"div\", {\n    role: \"rowheader\",\n    \"aria-label\": \"Week \" + week,\n    className: prefix('cell-week-number')\n  }, week), renderDays());\n});\nTableRow.displayName = 'CalendarTableRow';\nexport default TableRow;","map":null,"metadata":{},"sourceType":"module"}