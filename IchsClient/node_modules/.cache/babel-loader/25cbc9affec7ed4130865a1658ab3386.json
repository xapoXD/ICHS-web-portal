{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useCallback, useContext, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport MenuContext, { MenuActionTypes, MoveFocusTo } from \"./MenuContext.js\";\nimport { useCustom, useUniqueId, useFocus, useClickOutside } from \"../hooks/index.js\";\nimport { KEY_VALUES } from \"../constants/index.js\";\nimport useMenu from \"./useMenu.js\";\nimport { isFocusLeaving, isFocusableElement } from \"../utils/index.js\";\nvar defaultOpenMenuOn = ['click'];\nfunction getMenuItemTarget(event) {\n  var _event$currentTarget;\n  var target = event.target;\n  if (target.getAttribute('role') === 'menuitem') {\n    return target;\n  }\n  return Array.from((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.querySelectorAll('[role=\"menuitem\"]')).find(function (item) {\n    return item.contains(target);\n  });\n}\n\n/**\n * Headless ARIA `menu`\n * @private\n */\nfunction Menu(_ref) {\n  var _items$activeItemInde;\n  var disabled = _ref.disabled,\n    children = _ref.children,\n    _ref$openMenuOn = _ref.openMenuOn,\n    openMenuOn = _ref$openMenuOn === void 0 ? defaultOpenMenuOn : _ref$openMenuOn,\n    _ref$defaultOpen = _ref.defaultOpen,\n    defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen,\n    openProp = _ref.open,\n    menuButtonText = _ref.menuButtonText,\n    renderMenuButton = _ref.renderMenuButton,\n    renderMenuPopup = _ref.renderMenuPopup,\n    onToggleMenu = _ref.onToggleMenu;\n  var buttonElementRef = useRef(null);\n  var menuElementRef = useRef(null);\n  var parentMenu = useContext(MenuContext);\n  var isSubmenu = !!parentMenu;\n  var menu = useMenu({\n    open: defaultOpen\n  });\n  var _menu$ = menu[0],\n    openState = _menu$.open,\n    items = _menu$.items,\n    activeItemIndex = _menu$.activeItemIndex,\n    dispatch = menu[1];\n  var openControlled = typeof openProp !== 'undefined';\n  var open = openControlled ? openProp : openState;\n  var _useCustom = useCustom('Menu'),\n    rtl = _useCustom.rtl;\n  var activeItem = isNil(activeItemIndex) ? null : (_items$activeItemInde = items[activeItemIndex]) === null || _items$activeItemInde === void 0 ? void 0 : _items$activeItemInde.element;\n  var _useFocus = useFocus(menuElementRef),\n    grabFocus = _useFocus.grab;\n  var openMenu = useCallback(function (event) {\n    dispatch({\n      type: MenuActionTypes.OpenMenu\n    });\n    if (!event.isTrusted) {\n      dispatch({\n        type: MenuActionTypes.MoveFocus,\n        to: MoveFocusTo.First\n      });\n    }\n    onToggleMenu === null || onToggleMenu === void 0 ? void 0 : onToggleMenu(true, event);\n    grabFocus();\n  }, [dispatch, onToggleMenu, grabFocus]);\n  var closeMenu = useCallback(function (event, returnFocusToButton) {\n    if (returnFocusToButton === void 0) {\n      returnFocusToButton = true;\n    }\n    dispatch({\n      type: MenuActionTypes.CloseMenu\n    });\n    dispatch({\n      type: MenuActionTypes.MoveFocus,\n      to: MoveFocusTo.None\n    });\n    onToggleMenu === null || onToggleMenu === void 0 ? void 0 : onToggleMenu(false, event);\n    if (returnFocusToButton) {\n      var _buttonElementRef$cur;\n      (_buttonElementRef$cur = buttonElementRef.current) === null || _buttonElementRef$cur === void 0 ? void 0 : _buttonElementRef$cur.focus({\n        preventScroll: true\n      });\n    }\n  }, [dispatch, onToggleMenu, buttonElementRef]);\n  var toggleMenu = useCallback(function (event) {\n    if (!open) {\n      openMenu(event);\n    } else {\n      closeMenu(event);\n    }\n  }, [open, openMenu, closeMenu]);\n  useClickOutside({\n    enabled: open,\n    isOutside: function isOutside(event) {\n      var _buttonElementRef$cur2, _menuElementRef$curre;\n      return !((_buttonElementRef$cur2 = buttonElementRef.current) !== null && _buttonElementRef$cur2 !== void 0 && _buttonElementRef$cur2.contains(event.target)) && !((_menuElementRef$curre = menuElementRef.current) !== null && _menuElementRef$curre !== void 0 && _menuElementRef$curre.contains(event.target));\n    },\n    // fixme if clicking on a focusable element, don't move focus to menu button\n    handle: function handle(event) {\n      return closeMenu(event, !isFocusableElement(event.target));\n    }\n  });\n\n  /**\n   * Keyboard interaction on menu button\n   * @see https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n   */\n  var handleButtonKeydown = useCallback(function (e) {\n    switch (e.key) {\n      // Open the menu\n      case KEY_VALUES.ENTER:\n      case KEY_VALUES.SPACE:\n        e.preventDefault();\n        e.stopPropagation();\n        if (!open) {\n          openMenu(e);\n          dispatch({\n            type: MenuActionTypes.MoveFocus,\n            to: MoveFocusTo.First\n          });\n        } else {\n          closeMenu(e);\n        }\n        break;\n      // Open the menu (if closed) and move focus to first item\n      // This is mostly useful after opening the menu with click\n      case KEY_VALUES.DOWN:\n        e.preventDefault();\n        e.stopPropagation();\n        if (!open) {\n          openMenu(e);\n        }\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.First\n        });\n        break;\n    }\n  }, [open, openMenu, closeMenu, dispatch]);\n  var handleButtonClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    toggleMenu(event);\n  }, [disabled, toggleMenu]);\n  var handleButtonContextMenu = useCallback(function (event) {\n    // prevents default contextmenu\n    event.preventDefault();\n\n    // Only opens menu on right click. Left click can close the menu opened by a right click\n    if (open) return;\n    if (disabled) return;\n    openMenu(event);\n  }, [open, disabled, openMenu]);\n  var buttonEventHandlers = useMemo(function () {\n    var buttonEventHandlers = {\n      onKeyDown: handleButtonKeydown\n    };\n\n    /**\n     * Bind event of trigger,\n     * not used in  in the expanded state of '<Sidenav>'\n     */\n    if (openMenuOn !== null && openMenuOn !== void 0 && openMenuOn.includes('click')) {\n      buttonEventHandlers.onClick = handleButtonClick;\n    }\n    if (openMenuOn !== null && openMenuOn !== void 0 && openMenuOn.includes('contextmenu')) {\n      buttonEventHandlers.onContextMenu = handleButtonContextMenu;\n    }\n    return buttonEventHandlers;\n  }, [openMenuOn, handleButtonKeydown, handleButtonClick, handleButtonContextMenu]);\n  var buttonId = useUniqueId('menubutton-');\n  var menuId = useUniqueId('menu-');\n  var buttonAriaAttributes = useMemo(function () {\n    // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#wai-aria-roles-states-and-properties-14\n    return {\n      role: 'button',\n      'aria-haspopup': 'menu',\n      'aria-expanded': open || undefined,\n      // it's recommend to remove aria-expanded when menu is hidden\n      'aria-controls': menuId\n    };\n  }, [open, menuId]);\n  var buttonProps = useMemo(function () {\n    return _extends({\n      id: buttonId\n    }, buttonAriaAttributes, buttonEventHandlers, {\n      // render props\n      open: open\n    });\n  }, [buttonId, buttonAriaAttributes, buttonEventHandlers, open]);\n  var customMenuButton = useMemo(function () {\n    return renderMenuButton === null || renderMenuButton === void 0 ? void 0 : renderMenuButton(buttonProps, buttonElementRef);\n  }, [renderMenuButton, buttonProps, buttonElementRef]);\n  var buttonElement = customMenuButton !== null && customMenuButton !== void 0 ? customMenuButton : /*#__PURE__*/React.createElement(\"button\", _extends({\n    ref: buttonElementRef\n  }, buttonProps), menuButtonText);\n\n  /**\n   * Keyboard interaction on menu\n   * @see https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n   */\n  var handleMenuKeydown = useCallback(function (e) {\n    switch (e.key) {\n      // Move focus to previous item\n      case KEY_VALUES.UP:\n        e.preventDefault();\n        e.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Prev\n        });\n        break;\n      // Move focus to next item\n      case KEY_VALUES.DOWN:\n        e.preventDefault();\n        e.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Next\n        });\n        break;\n      // When focus is in a menu and on a menuitem that has a submenu, opens the submenu and places focus on its first item.\n      case KEY_VALUES.RIGHT:\n        e.preventDefault();\n        e.stopPropagation();\n        if (!rtl) {\n          if ((activeItem === null || activeItem === void 0 ? void 0 : activeItem.getAttribute('aria-haspopup')) === 'menu') {\n            activeItem.click();\n          }\n        } else if (isSubmenu) {\n          dispatch({\n            type: MenuActionTypes.CloseMenu\n          });\n        }\n        break;\n      // When focus is in a submenu of an item in a menu, closes the submenu and returns focus to the parent menuitem.\n      case KEY_VALUES.LEFT:\n        e.preventDefault();\n        e.stopPropagation();\n        if (!rtl) {\n          if (isSubmenu) {\n            closeMenu(e);\n          }\n        } else if ((activeItem === null || activeItem === void 0 ? void 0 : activeItem.getAttribute('aria-haspopup')) === 'menu') {\n          activeItem.click();\n        }\n        break;\n      // Move focus to the first item\n      case KEY_VALUES.HOME:\n        e.preventDefault();\n        e.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.First\n        });\n        break;\n      // Move focus to the last item\n      case KEY_VALUES.END:\n        e.preventDefault();\n        e.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Last\n        });\n        break;\n      // - When focus is on a menuitem that has a submenu, opens the submenu and places focus on its first item.\n      // - Otherwise, activates the item and closes the menu.\n      case KEY_VALUES.ENTER:\n      case KEY_VALUES.SPACE:\n        if (activeItem) {\n          e.preventDefault();\n          e.stopPropagation();\n          activeItem.click();\n          if (!activeItem.getAttribute('aria-haspopup')) {\n            closeMenu(e);\n          }\n        }\n        break;\n      //  Close the menu that contains focus and return focus to the element or context,\n      //  e.g., menu button or parent menuitem, from which the menu was opened.\n      case KEY_VALUES.ESC:\n        closeMenu(e);\n        break;\n    }\n  }, [dispatch, activeItem, isSubmenu, rtl, closeMenu]);\n\n  // Only used for clicks bubbling from child `menuitem`s.\n  var handleMenuClick = useCallback(function (event) {\n    var target = getMenuItemTarget(event);\n    if (!target) return;\n\n    // Only handle clicks on `menuitem`s\n    if (target.getAttribute('role') !== 'menuitem') return;\n\n    // Ignore clicks on `menuitem`s that controls a submenu\n    if (target.getAttribute('aria-haspopup') === 'menu') return;\n\n    // Ignore disabled `menuitem`s\n    if (target.getAttribute('aria-disabled') === 'true') return;\n    closeMenu(event, !isSubmenu);\n  }, [closeMenu, isSubmenu]);\n\n  // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#wai-aria-roles-states-and-properties-13\n  var menuAriaAttributes = {\n    role: 'menu',\n    'aria-labelledby': buttonId,\n    'aria-activedescendant': activeItem === null || activeItem === void 0 ? void 0 : activeItem.id\n  };\n  var menuEventHandlers = {\n    onClick: handleMenuClick,\n    onKeyDown: handleMenuKeydown\n  };\n  var menuProps = _extends({\n    id: menuId\n  }, menuAriaAttributes, menuEventHandlers, {\n    tabIndex: 0\n  });\n  var customMenuPopup = renderMenuPopup === null || renderMenuPopup === void 0 ? void 0 : renderMenuPopup(_extends({}, menuProps, {\n    open: open\n  }), menuElementRef);\n\n  // fixme Wrong children here\n  var menuElement = customMenuPopup !== null && customMenuPopup !== void 0 ? customMenuPopup : /*#__PURE__*/React.createElement(\"ul\", _extends({\n    ref: menuElementRef\n  }, menuProps, {\n    hidden: !open\n  }), children);\n  var handleMouseEnter = useCallback(function (e) {\n    if (!disabled) {\n      openMenu(e);\n    }\n  }, [disabled, openMenu]);\n  var handleMouseLeave = useCallback(function (e) {\n    if (!disabled) {\n      closeMenu(e);\n    }\n  }, [disabled, closeMenu]);\n  var rootElementRef = useRef(null);\n  var handleContainerBlur = useCallback(function (event) {\n    /* istanbul ignore else */\n    if (isFocusLeaving(event)) {\n      closeMenu(event, false);\n    }\n  }, [closeMenu]);\n  var rootEventHandlers = {\n    onBlur: handleContainerBlur\n  };\n  if (openMenuOn !== null && openMenuOn !== void 0 && openMenuOn.includes('mouseover')) {\n    rootEventHandlers.onMouseEnter = handleMouseEnter;\n    rootEventHandlers.onMouseLeave = handleMouseLeave;\n  }\n  var rootProps = _extends({}, rootEventHandlers, {\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, buttonElement, /*#__PURE__*/React.createElement(MenuContext.Provider, {\n      value: menu\n    }, menuElement)),\n    // render props\n    open: open\n  });\n  if (isSubmenu) {\n    rootProps.role = 'none presentation';\n  }\n  return children(rootProps, rootElementRef);\n}\nMenu.displayName = 'Menu';\nMenu.propTypes = {\n  children: PropTypes.func.isRequired\n};\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}