{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useEventCallback } from \"../../internals/hooks/index.js\";\nimport { getSafeRegExpString } from \"../../internals/utils/index.js\";\nfunction useSearch(props) {\n  var _useState = useState(''),\n    searchKeyword = _useState[0],\n    setSearchKeyword = _useState[1];\n  var labelKey = props.labelKey,\n    childrenKey = props.childrenKey,\n    parentMap = props.parentMap,\n    flattenedData = props.flattenedData,\n    parentSelectable = props.parentSelectable,\n    onSearch = props.onSearch;\n  var someKeyword = function someKeyword(item, keyword) {\n    if (item[labelKey].match(new RegExp(getSafeRegExpString(keyword || searchKeyword), 'i'))) {\n      return true;\n    }\n    var parent = parentMap.get(item);\n    if (parent && someKeyword(parent)) {\n      return true;\n    }\n    return false;\n  };\n  var getSearchResult = function getSearchResult(keyword) {\n    var items = [];\n    var result = flattenedData.filter(function (item) {\n      if (!parentSelectable && item[childrenKey]) {\n        return false;\n      }\n      return someKeyword(item, keyword);\n    });\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]);\n\n      // A maximum of 100 search results are returned.\n      if (i === 99) {\n        return items;\n      }\n    }\n    return items;\n  };\n  var handleSearch = useEventCallback(function (value, event) {\n    var items = getSearchResult(value);\n    setSearchKeyword(value);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, items, event);\n  });\n  return {\n    searchKeyword: searchKeyword,\n    setSearchKeyword: setSearchKeyword,\n    items: getSearchResult(),\n    handleSearch: handleSearch\n  };\n}\nexport default useSearch;","map":null,"metadata":{},"sourceType":"module"}