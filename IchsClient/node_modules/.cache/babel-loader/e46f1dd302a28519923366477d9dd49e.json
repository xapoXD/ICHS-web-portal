{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"data\", \"style\", \"showIndentLine\", \"value\", \"locale\", \"height\", \"className\", \"searchable\", \"classPrefix\", \"searchKeyword\", \"searchBy\", \"draggable\", \"disabledItemValues\", \"loadingNodeValues\", \"flattenedNodes\", \"listProps\", \"listRef\", \"searchInputRef\", \"expandItemValues\", \"onSearch\", \"onSelect\", \"onSelectItem\", \"onChange\", \"onDragEnd\", \"onDragStart\", \"onDragEnter\", \"onDragLeave\", \"onDragOver\", \"onDrop\", \"onExpand\", \"onFocusItem\", \"onScroll\"];\nimport React, { useEffect, useMemo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { List, AutoSizer, defaultItemSize } from \"../internals/Windowing/index.js\";\nimport TreeViewNode from \"./TreeNode.js\";\nimport IndentLine from \"./IndentLine.js\";\nimport { getPathTowardsItem, getKeyParentMap } from \"../internals/Tree/utils/index.js\";\nimport { useClassNames, useCustom, useEventCallback } from \"../internals/hooks/index.js\";\nimport { isExpand, hasVisibleChildren, getActiveItem } from \"./utils/index.js\";\nimport { onMenuKeyDown } from \"../internals/Picker/index.js\";\nimport { TreeView as BaseTreeView } from \"../internals/Tree/index.js\";\nimport useTreeSearch from \"./hooks/useTreeSearch.js\";\nimport useTreeDrag from \"./hooks/useTreeDrag.js\";\nimport useFocusTree from \"./hooks/useFocusTree.js\";\nimport useVirtualizedTreeData from \"./hooks/useVirtualizedTreeData.js\";\nimport useTreeNodeProps from \"./hooks/useTreeNodeProps.js\";\nimport SearchBox from \"../internals/SearchBox/index.js\";\nimport { useTreeContextProps } from \"../internals/Tree/TreeProvider.js\";\n\n/**\n * Props for the TreeViewInner component.\n */\n/**\n * Represents the props for the TreeView component.\n */\n\nvar TreeView = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    style = props.style,\n    showIndentLine = props.showIndentLine,\n    valueProp = props.value,\n    overrideLocale = props.locale,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 360 : _props$height,\n    className = props.className,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? false : _props$searchable,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'tree' : _props$classPrefix,\n    searchKeyword = props.searchKeyword,\n    searchBy = props.searchBy,\n    draggable = props.draggable,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    _props$loadingNodeVal = props.loadingNodeValues,\n    loadingNodeValues = _props$loadingNodeVal === void 0 ? [] : _props$loadingNodeVal,\n    _props$flattenedNodes = props.flattenedNodes,\n    flattenedNodes = _props$flattenedNodes === void 0 ? {} : _props$flattenedNodes,\n    listProps = props.listProps,\n    listRef = props.listRef,\n    searchInputRef = props.searchInputRef,\n    _props$expandItemValu = props.expandItemValues,\n    expandItemValues = _props$expandItemValu === void 0 ? [] : _props$expandItemValu,\n    onSearch = props.onSearch,\n    onSelect = props.onSelect,\n    onSelectItem = props.onSelectItem,\n    onChange = props.onChange,\n    onDragEnd = props.onDragEnd,\n    onDragStart = props.onDragStart,\n    onDragEnter = props.onDragEnter,\n    onDragLeave = props.onDragLeave,\n    onDragOver = props.onDragOver,\n    onDrop = props.onDrop,\n    onExpand = props.onExpand,\n    onFocusItem = props.onFocusItem,\n    onScroll = props.onScroll,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale;\n  var _useTreeContextProps = useTreeContextProps(),\n    valueKey = _useTreeContextProps.valueKey,\n    childrenKey = _useTreeContextProps.childrenKey,\n    scrollShadow = _useTreeContextProps.scrollShadow,\n    virtualized = _useTreeContextProps.virtualized;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var handleSearchCallback = useEventCallback(function (value, _data, event) {\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n  });\n  var _useTreeSearch = useTreeSearch({\n      callback: handleSearchCallback,\n      searchKeyword: searchKeyword,\n      data: data,\n      searchBy: searchBy\n    }),\n    filteredData = _useTreeSearch.filteredData,\n    keyword = _useTreeSearch.keyword,\n    setFilteredData = _useTreeSearch.setFilteredData,\n    handleSearch = _useTreeSearch.handleSearch;\n  var transformation = useVirtualizedTreeData(flattenedNodes, filteredData, {\n    expandItemValues: expandItemValues,\n    searchKeyword: keyword\n  });\n  var getFormattedNodes = function getFormattedNodes(render) {\n    if (virtualized) {\n      return transformation().filter(function (n) {\n        return n.visible;\n      });\n    }\n    return filteredData.map(function (dataItem, index) {\n      return render === null || render === void 0 ? void 0 : render(dataItem, index, 1);\n    }).filter(function (n) {\n      return n;\n    });\n  };\n  useEffect(function () {\n    setFilteredData(data, keyword);\n  }, [data, keyword, setFilteredData]);\n\n  // TODO-Doma\n  // Replace `getKeyParentMap` with `getParentMap`\n  var itemParentMap = useMemo(function () {\n    return getKeyParentMap(data, function (node) {\n      return node[valueKey];\n    }, function (node) {\n      return node[childrenKey];\n    });\n  }, [childrenKey, data, valueKey]);\n  var _useFocusTree = useFocusTree({\n      filteredData: filteredData,\n      disabledItemValues: disabledItemValues,\n      expandItemValues: expandItemValues,\n      searchKeyword: keyword,\n      flattenedNodes: flattenedNodes,\n      onFocused: onFocusItem,\n      onExpand: onExpand\n    }),\n    focusItemValue = _useFocusTree.focusItemValue,\n    setFocusItemValue = _useFocusTree.setFocusItemValue,\n    onTreeKeydown = _useFocusTree.onTreeKeydown,\n    treeNodesRefs = _useFocusTree.treeNodesRefs,\n    saveTreeNodeRef = _useFocusTree.saveTreeNodeRef,\n    treeViewRef = _useFocusTree.treeViewRef;\n  var _useTreeDrag = useTreeDrag({\n      flattenedNodes: flattenedNodes,\n      treeNodesRefs: treeNodesRefs,\n      draggable: draggable,\n      onDragStart: onDragStart,\n      onDragEnter: onDragEnter,\n      onDragOver: onDragOver,\n      onDragLeave: onDragLeave,\n      onDragEnd: onDragEnd,\n      onDrop: onDrop,\n      prefix: prefix\n    }),\n    dragNode = _useTreeDrag.dragNode,\n    dragOverNodeKey = _useTreeDrag.dragOverNodeKey,\n    dropNodePosition = _useTreeDrag.dropNodePosition,\n    dragEvents = _useTreeDrag.dragEvents;\n  var getTreeNodeProps = useTreeNodeProps({\n    value: valueProp,\n    disabledItemValues: disabledItemValues,\n    loadingNodeValues: loadingNodeValues,\n    focusItemValue: focusItemValue,\n    keyword: keyword,\n    dragNode: dragNode,\n    dragOverNodeKey: dragOverNodeKey,\n    dropNodePosition: dropNodePosition\n  });\n  var handleSelect = useEventCallback(function (nodeData, event) {\n    if (!nodeData) {\n      return;\n    }\n    var nextValue = nodeData[valueKey];\n    var path = getPathTowardsItem(nodeData, function (item) {\n      return itemParentMap.get(item[valueKey]);\n    });\n    setFocusItemValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nodeData, nextValue, event);\n    onSelectItem === null || onSelectItem === void 0 ? void 0 : onSelectItem(nodeData, path);\n  });\n  var selectActiveItem = useEventCallback(function (event) {\n    if (isNil(focusItemValue)) return;\n    var activeItem = getActiveItem(focusItemValue, flattenedNodes, valueKey);\n    handleSelect(activeItem, event);\n  });\n  var handleTreeKeyDown = useEventCallback(function (event) {\n    onTreeKeydown(event);\n    onMenuKeyDown(event, {\n      enter: selectActiveItem\n    });\n  });\n  var renderNode = function renderNode(node, index, layer) {\n    var visible = node.visible;\n    if (!visible) {\n      return null;\n    }\n    var children = node[childrenKey];\n    var expanded = isExpand(keyword, expandItemValues.includes(node[valueKey]));\n    var hasChildren = keyword ? hasVisibleChildren(node, childrenKey) : Boolean(children);\n    var nodeProps = _extends({}, getTreeNodeProps(node, layer, index), dragEvents, {\n      expanded: expanded,\n      draggable: draggable,\n      onExpand: onExpand,\n      onSelect: handleSelect,\n      hasChildren: hasChildren\n    });\n    if (hasChildren) {\n      var _merge;\n      layer += 1;\n      var childClassName = merge(prefix('node-children'), (_merge = {}, _merge[prefix('node-expanded')] = expanded, _merge));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: childClassName,\n        key: node[valueKey]\n      }, /*#__PURE__*/React.createElement(TreeViewNode, _extends({}, nodeProps, {\n        ref: function ref(_ref) {\n          return saveTreeNodeRef(_ref, node.refKey);\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('group'),\n        role: \"group\"\n      }, children === null || children === void 0 ? void 0 : children.map(function (child, i) {\n        return renderNode(child, i, layer);\n      }), showIndentLine && /*#__PURE__*/React.createElement(IndentLine, null)));\n    }\n    return /*#__PURE__*/React.createElement(TreeViewNode, _extends({\n      ref: function ref(_ref2) {\n        return saveTreeNodeRef(_ref2, node.refKey);\n      },\n      key: node[valueKey]\n    }, nodeProps));\n  };\n  var renderVirtualListNode = function renderVirtualListNode(_ref3) {\n    var index = _ref3.index,\n      style = _ref3.style,\n      data = _ref3.data;\n    var node = data[index];\n    var layer = node.layer,\n      visible = node.visible,\n      hasChildren = node.hasChildren;\n    var expanded = isExpand(keyword, expandItemValues.includes(node[valueKey]));\n    if (!visible) {\n      return null;\n    }\n    var treeNodeProps = _extends({}, getTreeNodeProps(node, layer), dragEvents, {\n      expanded: expanded,\n      style: style,\n      onExpand: onExpand,\n      onSelect: handleSelect,\n      hasChildren: hasChildren\n    });\n    return visible && /*#__PURE__*/React.createElement(TreeViewNode, _extends({\n      ref: function ref(_ref4) {\n        return saveTreeNodeRef(_ref4, node.refKey);\n      }\n    }, treeNodeProps));\n  };\n  var classes = merge(withClassPrefix({\n    virtualized: virtualized\n  }), className);\n  var formattedNodes = getFormattedNodes(renderNode);\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: ref,\n    className: classes,\n    style: style\n  }, searchable ? /*#__PURE__*/React.createElement(SearchBox, {\n    placeholder: locale.searchPlaceholder,\n    onChange: handleSearch,\n    value: keyword,\n    inputRef: searchInputRef\n  }) : null, keyword && formattedNodes.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('empty')\n  }, locale.noResultsText) : null, /*#__PURE__*/React.createElement(BaseTreeView, _extends({}, rest, {\n    ref: treeViewRef,\n    treeRootClassName: prefix('root'),\n    onScroll: onScroll,\n    onKeyDown: handleTreeKeyDown,\n    className: prefix('view'),\n    height: height\n  }), virtualized ? /*#__PURE__*/React.createElement(AutoSizer, {\n    defaultHeight: height,\n    style: {\n      width: 'auto',\n      height: 'auto'\n    },\n    className: prefix('virt-auto-sizer')\n  }, function (_ref5) {\n    var height = _ref5.height;\n    return /*#__PURE__*/React.createElement(List, _extends({\n      ref: listRef,\n      height: height,\n      itemSize: defaultItemSize,\n      itemCount: formattedNodes.length,\n      itemData: formattedNodes,\n      className: prefix('virt-list'),\n      scrollShadow: scrollShadow\n    }, listProps), renderVirtualListNode);\n  }) : formattedNodes));\n});\nTreeView.displayName = 'TreeView';\nexport default TreeView;","map":null,"metadata":{},"sourceType":"module"}