{"ast":null,"code":"'use client';\n\nimport { useCallback, useRef } from 'react';\nimport { DisclosureActionTypes } from \"./DisclosureContext.js\";\nimport { KEY_VALUES } from \"../constants/index.js\";\nimport useDisclosureContext from \"./useDisclosureContext.js\";\nfunction DisclosureButton(props) {\n  var children = props.children;\n  var buttonRef = useRef(null);\n  var _useDisclosureContext = useDisclosureContext(DisclosureButton.displayName),\n    open = _useDisclosureContext[0].open,\n    dispatch = _useDisclosureContext[1],\n    onToggle = _useDisclosureContext[2].onToggle;\n  var toggle = useCallback(function (event) {\n    if (!open) {\n      dispatch({\n        type: DisclosureActionTypes.Show\n      });\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);\n    } else {\n      dispatch({\n        type: DisclosureActionTypes.Hide\n      });\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);\n    }\n  }, [open, dispatch, onToggle]);\n  var onClick = useCallback(function (event) {\n    toggle(event);\n  }, [toggle]);\n  var onKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      case KEY_VALUES.ENTER:\n      case KEY_VALUES.SPACE:\n        event.preventDefault();\n        event.stopPropagation();\n        toggle(event);\n        break;\n    }\n  }, [toggle]);\n  return children({\n    role: 'button',\n    'aria-expanded': open,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    open: open\n  }, buttonRef);\n}\nDisclosureButton.displayName = 'Disclosure.Button';\nexport default DisclosureButton;","map":null,"metadata":{},"sourceType":"module"}