{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject;\nvar _excluded = [\"as\", \"classPrefix\", \"appearance\", \"className\", \"children\", \"activeKey\", \"defaultActiveKey\", \"id\", \"reversed\", \"vertical\", \"onSelect\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useControlled, useEventCallback, useUniqueId, useCustom } from \"../internals/hooks/index.js\";\nimport { ReactChildren } from \"../internals/utils/index.js\";\nimport Nav from \"../Nav/index.js\";\nimport Tab from \"./Tab.js\";\nimport TabPanel from \"./TabPanel.js\";\nfunction getFocusableTabs(tablist) {\n  var tabs = tablist === null || tablist === void 0 ? void 0 : tablist.querySelectorAll('[role=tab]');\n  return Array.from(tabs).filter(function (tab) {\n    return !(tab.getAttribute('aria-disabled') === 'true');\n  });\n}\nfunction getFocusedTab(tablist) {\n  var tabs = getFocusableTabs(tablist);\n  return tabs.find(function (tab) {\n    return tab.getAttribute('aria-selected');\n  });\n}\nfunction nextItem(tablist) {\n  if (!tablist) {\n    return null;\n  }\n  var item = getFocusedTab(tablist);\n  var items = getFocusableTabs(tablist);\n  if (!item) {\n    return items[0];\n  }\n  var nextItem = items[items.indexOf(item) + 1];\n  if (!nextItem || nextItem.getAttribute('role') !== 'tab') {\n    return items[0];\n  }\n  return nextItem;\n}\nfunction previousItem(tablist) {\n  if (!tablist) {\n    return null;\n  }\n  var item = getFocusedTab(tablist);\n  var items = getFocusableTabs(tablist);\n  if (!item) {\n    return items[items.length - 1];\n  }\n  var previousItem = items[items.indexOf(item) - 1];\n  if (!previousItem || previousItem.getAttribute('role') !== 'tab') {\n    return items[items.length - 1];\n  }\n  return previousItem;\n}\nvar renderPanels = function renderPanels(children, tabProps) {\n  var id = tabProps.id,\n    activeKey = tabProps.activeKey;\n  return ReactChildren.map(children, function (child) {\n    var _child$props = child.props,\n      eventKey = _child$props.eventKey,\n      children = _child$props.children;\n    var selected = eventKey === activeKey;\n    return /*#__PURE__*/React.createElement(TabPanel, {\n      \"aria-labelledby\": id + \"-\" + eventKey,\n      \"aria-hidden\": !selected,\n      id: id + \"-panel-\" + eventKey,\n      active: selected\n    }, children);\n  });\n};\nvar renderTabs = function renderTabs(children, tabPanelProps) {\n  var id = tabPanelProps.id,\n    activeKey = tabPanelProps.activeKey;\n  return ReactChildren.map(children, function (child) {\n    var _child$props2 = child.props,\n      eventKey = _child$props2.eventKey,\n      title = _child$props2.title,\n      disabled = _child$props2.disabled,\n      icon = _child$props2.icon;\n    var selected = eventKey === activeKey;\n    return /*#__PURE__*/React.createElement(Nav.Item, {\n      role: \"tab\",\n      as: \"button\",\n      type: \"button\",\n      \"aria-selected\": selected,\n      \"aria-controls\": id + \"-panel-\" + eventKey,\n      \"aria-disabled\": disabled,\n      \"data-event-key\": eventKey,\n      disabled: disabled,\n      icon: icon,\n      id: id + \"-\" + eventKey,\n      tabIndex: selected ? undefined : -1,\n      eventKey: eventKey\n    }, title);\n  });\n};\n\n/**\n * Tabs are a set of layered sections of content, known as tab panels, that display one panel of content at a time.\n *\n * @version 5.53.0\n * @see https://rsuitejs.com/components/tabs\n */\nvar Tabs = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'tabs' : _props$classPrefix,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'tabs' : _props$appearance,\n    className = props.className,\n    children = props.children,\n    activeKeyProp = props.activeKey,\n    defaultActiveKey = props.defaultActiveKey,\n    idProp = props.id,\n    reversed = props.reversed,\n    vertical = props.vertical,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var id = useUniqueId('tab-', idProp);\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useControlled = useControlled(activeKeyProp, defaultActiveKey),\n    activeKey = _useControlled[0],\n    setActiveKey = _useControlled[1];\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var tablistRef = React.useRef(null);\n  var handleSelect = useEventCallback(function (eventKey, event) {\n    setActiveKey(eventKey);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n  });\n  var handleKeyDown = useEventCallback(function (event) {\n    var _getFocusableTabs;\n    var target = event.target;\n    if (target.getAttribute('role') !== 'tab') {\n      return;\n    }\n    var previousItemKey = vertical ? 'ArrowUp' : 'ArrowLeft';\n    var nextItemKey = vertical ? 'ArrowDown' : 'ArrowRight';\n    if (!vertical && rtl) {\n      previousItemKey = 'ArrowRight';\n      nextItemKey = 'ArrowLeft';\n    }\n    var item = null;\n    switch (event.key) {\n      case previousItemKey:\n        item = previousItem(tablistRef.current);\n        event.preventDefault();\n        break;\n      case nextItemKey:\n        item = nextItem(tablistRef.current);\n        event.preventDefault();\n        break;\n      case 'Home':\n        item = (_getFocusableTabs = getFocusableTabs(tablistRef.current)) === null || _getFocusableTabs === void 0 ? void 0 : _getFocusableTabs[0];\n        event.preventDefault();\n        break;\n      case 'End':\n        var tabs = getFocusableTabs(tablistRef.current);\n        item = tabs[tabs.length - 1];\n        event.preventDefault();\n        break;\n    }\n    if (item) {\n      var _item;\n      var _item$dataset = (_item = item) === null || _item === void 0 ? void 0 : _item.dataset,\n        eventKey = _item$dataset.eventKey;\n      handleSelect(eventKey, event);\n      item.focus();\n    }\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: merge(className, withClassPrefix({\n      reversed: reversed,\n      vertical: vertical\n    }))\n  }, rest, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Nav, {\n    role: \"tablist\",\n    \"aria-orientation\": vertical ? 'vertical' : 'horizontal',\n    reversed: reversed,\n    vertical: vertical,\n    appearance: appearance,\n    activeKey: activeKey,\n    onSelect: handleSelect,\n    onKeyDown: handleKeyDown,\n    ref: tablistRef\n  }, renderTabs(children, {\n    id: id,\n    activeKey: activeKey\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"content\"])))\n  }, renderPanels(children, {\n    id: id,\n    activeKey: activeKey\n  })));\n});\nTabs.Tab = Tab;\nTabs.displayName = 'Tabs';\nTabs.propTypes = {\n  appearance: PropTypes.oneOf(['tabs', 'subtle']),\n  activeKey: PropTypes.any,\n  defaultActiveKey: PropTypes.any,\n  reversed: PropTypes.bool,\n  vertical: PropTypes.bool,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  onSelect: PropTypes.func\n};\nexport default Tabs;","map":null,"metadata":{},"sourceType":"module"}