{"ast":null,"code":"'use client';\n\nexport function useKeyboardInputEvent(_ref) {\n  var onSegmentChange = _ref.onSegmentChange,\n    onSegmentValueChange = _ref.onSegmentValueChange,\n    onSegmentValueChangeWithNumericKeys = _ref.onSegmentValueChangeWithNumericKeys,\n    onSegmentValueRemove = _ref.onSegmentValueRemove,\n    onKeyDown = _ref.onKeyDown;\n  return function (event) {\n    var _key$match, _key$match2;\n    var key = event.key;\n    switch (key) {\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        onSegmentChange === null || onSegmentChange === void 0 ? void 0 : onSegmentChange(event);\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        onSegmentValueChange === null || onSegmentValueChange === void 0 ? void 0 : onSegmentValueChange(event);\n        event.preventDefault();\n        break;\n      case 'Backspace':\n        onSegmentValueRemove === null || onSegmentValueRemove === void 0 ? void 0 : onSegmentValueRemove(event);\n        event.preventDefault();\n        break;\n      case (_key$match = key.match(/\\d/)) === null || _key$match === void 0 ? void 0 : _key$match.input:\n        // Allow numeric keys to be entered\n        onSegmentValueChangeWithNumericKeys === null || onSegmentValueChangeWithNumericKeys === void 0 ? void 0 : onSegmentValueChangeWithNumericKeys(event);\n        event.preventDefault();\n      case (_key$match2 = key.match(/[a-z]/)) === null || _key$match2 === void 0 ? void 0 : _key$match2[0]:\n        // Prevent letters from being entered\n        event.preventDefault();\n        break;\n    }\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n}\nexport default useKeyboardInputEvent;","map":null,"metadata":{},"sourceType":"module"}