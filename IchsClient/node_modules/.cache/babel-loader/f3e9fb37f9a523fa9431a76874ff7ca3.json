{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"active\", \"disabled\", \"month\", \"year\"];\nimport React, { useCallback, useMemo } from 'react';\nimport { setMonth, setYear } from \"../internals/utils/date/index.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport { composeFunctions } from \"../internals/utils/index.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\nimport { getAriaLabel } from \"./utils.js\";\nvar MonthDropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-month-dropdown-cell' : _props$classPrefix,\n    active = props.active,\n    disabled = props.disabled,\n    _props$month = props.month,\n    month = _props$month === void 0 ? 0 : _props$month,\n    year = props.year,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    date = _useCalendarContext.date,\n    onSelect = _useCalendarContext.onChangeMonth;\n  var _useCustom = useCustom('Calendar'),\n    locale = _useCustom.locale,\n    formatDate = _useCustom.formatDate;\n  var formatStr = locale.formattedMonthPattern;\n  var currentMonth = useMemo(function () {\n    if (year && month) {\n      return composeFunctions(function (d) {\n        return setYear(d, year);\n      }, function (d) {\n        return setMonth(d, month - 1);\n      })(date);\n    }\n    return date;\n  }, [date, month, year]);\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(currentMonth, event);\n  }, [currentMonth, disabled, onSelect]);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix({\n    active: active\n  }), {\n    disabled: disabled\n  });\n  var ariaLabel = currentMonth ? getAriaLabel(currentMonth, formatStr, formatDate) : '';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    key: month,\n    role: \"gridcell\",\n    \"aria-selected\": active,\n    \"aria-disabled\": disabled,\n    \"aria-label\": ariaLabel,\n    tabIndex: active ? 0 : -1,\n    ref: ref,\n    className: classes,\n    onClick: handleClick\n  }, rest), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('content')\n  }, month));\n});\nMonthDropdownItem.displayName = 'MonthDropdownItem';\nexport default MonthDropdownItem;","map":null,"metadata":{},"sourceType":"module"}