{"ast":null,"code":"'use client';\n\nimport { useCallback, useRef } from 'react';\nexport function useFocus(elementRef) {\n  // When grabbing focus, keep track of previous activeElement\n  // so that we can return focus later\n  var previousActiveElementRef = useRef(null);\n\n  // Focus the element itself\n  var grab = useCallback(function () {\n    requestAnimationFrame(function () {\n      if (document.activeElement !== elementRef.current) {\n        var _elementRef$current;\n        previousActiveElementRef.current = document.activeElement;\n        (_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.focus();\n      }\n    });\n  }, [elementRef]);\n\n  // Return focus to previous active element\n  var release = useCallback(function (options) {\n    requestAnimationFrame(function () {\n      var _previousActiveElemen;\n      (_previousActiveElemen = previousActiveElementRef.current) === null || _previousActiveElemen === void 0 ? void 0 : _previousActiveElemen.focus(options);\n    });\n  }, []);\n  return {\n    grab: grab,\n    release: release\n  };\n}\nexport default useFocus;","map":null,"metadata":{},"sourceType":"module"}