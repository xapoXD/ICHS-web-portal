{"ast":null,"code":"'use client';\n\nimport { useState, useEffect } from 'react';\n/**\n * useIntersectionObserver Hook\n *\n * @param ref - Ref object of the element to be observed\n */\n\nvar useIntersectionObserver = function useIntersectionObserver(ref) {\n  var _useState = useState(false),\n    isVisible = _useState[0],\n    setIsVisible = _useState[1];\n  useEffect(function () {\n    // Check if the browser supports IntersectionObserver\n    if (!('IntersectionObserver' in window)) {\n      // If not supported, optionally set to visible or handle fallback logic\n      setIsVisible(true); // Fallback: Set to visible\n\n      return;\n    } // Create an IntersectionObserver instance\n\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        setIsVisible(entry.isIntersecting);\n      });\n    });\n    var element = ref === null || ref === void 0 ? void 0 : ref.current; // Start observing the target element\n\n    if (element) {\n      observer.observe(element);\n    } // Cleanup function to unobserve the element when the component unmounts or dependencies change\n\n    return function () {\n      if (element) {\n        observer.unobserve(element);\n      }\n    };\n  }, [ref]);\n  return isVisible;\n};\nexport default useIntersectionObserver;","map":null,"metadata":{},"sourceType":"module"}