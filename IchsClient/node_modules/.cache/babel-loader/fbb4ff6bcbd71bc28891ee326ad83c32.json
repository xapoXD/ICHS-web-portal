{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"strokeWidth\", \"trailWidth\", \"percent\", \"strokeLinecap\", \"className\", \"showInfo\", \"status\", \"classPrefix\", \"style\", \"gapDegree\", \"gapPosition\", \"trailColor\", \"strokeColor\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { PROGRESS_STATUS_ICON } from \"../internals/constants/statusIcons.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\n/**\n * The `Progress.Circle` component is used to display the progress of current operation.\n * @see https://rsuitejs.com/components/progress/#circle\n */\nvar ProgressCircle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _withClassPrefix;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$strokeWidth = props.strokeWidth,\n    strokeWidth = _props$strokeWidth === void 0 ? 6 : _props$strokeWidth,\n    _props$trailWidth = props.trailWidth,\n    trailWidth = _props$trailWidth === void 0 ? 6 : _props$trailWidth,\n    _props$percent = props.percent,\n    percent = _props$percent === void 0 ? 0 : _props$percent,\n    _props$strokeLinecap = props.strokeLinecap,\n    strokeLinecap = _props$strokeLinecap === void 0 ? 'round' : _props$strokeLinecap,\n    className = props.className,\n    _props$showInfo = props.showInfo,\n    showInfo = _props$showInfo === void 0 ? true : _props$showInfo,\n    status = props.status,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'progress' : _props$classPrefix,\n    style = props.style,\n    _props$gapDegree = props.gapDegree,\n    gapDegree = _props$gapDegree === void 0 ? 0 : _props$gapDegree,\n    _props$gapPosition = props.gapPosition,\n    gapPosition = _props$gapPosition === void 0 ? 'top' : _props$gapPosition,\n    trailColor = props.trailColor,\n    strokeColor = props.strokeColor,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var getPathStyles = useCallback(function () {\n    var radius = 50 - strokeWidth / 2;\n    var x1 = 0;\n    var y1 = -radius;\n    var x2 = 0;\n    var y2 = -2 * radius;\n    switch (gapPosition) {\n      case 'left':\n        x1 = -radius;\n        y1 = 0;\n        x2 = 2 * radius;\n        y2 = 0;\n        break;\n      case 'right':\n        x1 = radius;\n        y1 = 0;\n        x2 = -2 * radius;\n        y2 = 0;\n        break;\n      case 'bottom':\n        y1 = radius;\n        y2 = 2 * radius;\n        break;\n      default:\n    }\n    var pathString = \"M 50,50 m \" + x1 + \",\" + y1 + \" a \" + radius + \",\" + radius + \" 0 1 1 \" + x2 + \",\" + -y2 + \" a \" + radius + \",\" + radius + \" 0 1 1 \" + -x2 + \",\" + y2;\n    var len = Math.PI * 2 * radius;\n    var trailPathStyle = {\n      stroke: trailColor,\n      strokeDasharray: len - gapDegree + \"px \" + len + \"px\",\n      strokeDashoffset: \"-\" + gapDegree / 2 + \"px\"\n    };\n    var strokePathStyle = {\n      stroke: strokeColor,\n      strokeDasharray: percent / 100 * (len - gapDegree) + \"px \" + len + \"px\",\n      strokeDashoffset: \"-\" + gapDegree / 2 + \"px\"\n    };\n    return {\n      pathString: pathString,\n      trailPathStyle: trailPathStyle,\n      strokePathStyle: strokePathStyle\n    };\n  }, [gapDegree, gapPosition, percent, strokeColor, strokeWidth, trailColor]);\n  var _getPathStyles = getPathStyles(),\n    pathString = _getPathStyles.pathString,\n    trailPathStyle = _getPathStyles.trailPathStyle,\n    strokePathStyle = _getPathStyles.strokePathStyle;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix('circle', (_withClassPrefix = {}, _withClassPrefix[\"circle-\" + (status || '')] = !!status, _withClassPrefix)));\n  var showIcon = status && status !== 'active';\n  var info = showIcon ? /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(\"icon-\" + (status || ''))\n  }, PROGRESS_STATUS_ICON[status]) : /*#__PURE__*/React.createElement(\"span\", {\n    key: 1\n  }, percent, \"%\");\n  return /*#__PURE__*/React.createElement(Component, {\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percent,\n    ref: ref,\n    className: classes,\n    style: style\n  }, showInfo ? /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('circle-info')\n  }, info) : null, /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: prefix('svg'),\n    viewBox: \"0 0 100 100\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    className: prefix('trail'),\n    d: pathString,\n    strokeWidth: trailWidth || strokeWidth,\n    fillOpacity: \"0\",\n    style: trailPathStyle\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: pathString,\n    strokeLinecap: strokeLinecap,\n    className: prefix('stroke'),\n    strokeWidth: percent === 0 ? 0 : strokeWidth,\n    fillOpacity: \"0\",\n    style: strokePathStyle\n  })));\n});\nProgressCircle.displayName = 'ProgressCircle';\nProgressCircle.propTypes = {\n  className: PropTypes.string,\n  strokeColor: PropTypes.string,\n  strokeLinecap: oneOf(['butt', 'round', 'square']),\n  trailColor: PropTypes.string,\n  percent: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  trailWidth: PropTypes.number,\n  gapDegree: PropTypes.number,\n  gapPosition: oneOf(['top', 'bottom', 'left', 'right']),\n  showInfo: PropTypes.bool,\n  status: oneOf(['success', 'fail', 'active']),\n  classPrefix: PropTypes.string\n};\nexport default ProgressCircle;","map":null,"metadata":{},"sourceType":"module"}