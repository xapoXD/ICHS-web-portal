{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nvar _excluded = [\"as\", \"checked\", \"className\", \"children\", \"classPrefix\", \"checkable\", \"color\", \"defaultChecked\", \"title\", \"inputRef\", \"inputProps\", \"indeterminate\", \"labelClickable\", \"tabIndex\", \"disabled\", \"readOnly\", \"plaintext\", \"inline\", \"name\", \"value\", \"onClick\", \"onCheckboxClick\", \"onChange\"];\nimport React, { useContext, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useControlled, useClassNames, useEventCallback, useUniqueId } from \"../internals/hooks/index.js\";\nimport { partitionHTMLProps, mergeRefs } from \"../internals/utils/index.js\";\nimport { CheckboxGroupContext } from \"../CheckboxGroup/index.js\";\nimport { refType } from \"../internals/propTypes/index.js\";\n/**\n * The Checkbox component is used for selecting multiple options from a set.\n * @see https://rsuitejs.com/components/checkbox\n */\nvar Checkbox = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var checkboxGroupContext = useContext(CheckboxGroupContext);\n  var _ref = checkboxGroupContext !== null && checkboxGroupContext !== void 0 ? checkboxGroupContext : {},\n    inlineContext = _ref.inline,\n    nameContext = _ref.name,\n    disabledContext = _ref.disabled,\n    readOnlyContext = _ref.readOnly,\n    plaintextContext = _ref.plaintext,\n    onGroupChange = _ref.onChange;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    controlledChecked = props.checked,\n    className = props.className,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'checkbox' : _props$classPrefix,\n    _props$checkable = props.checkable,\n    checkable = _props$checkable === void 0 ? true : _props$checkable,\n    color = props.color,\n    _props$defaultChecked = props.defaultChecked,\n    defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,\n    title = props.title,\n    inputRef = props.inputRef,\n    inputProps = props.inputProps,\n    indeterminate = props.indeterminate,\n    _props$labelClickable = props.labelClickable,\n    labelClickable = _props$labelClickable === void 0 ? true : _props$labelClickable,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? readOnlyContext : _props$readOnly,\n    _props$plaintext = props.plaintext,\n    plaintext = _props$plaintext === void 0 ? plaintextContext : _props$plaintext,\n    _props$inline = props.inline,\n    inline = _props$inline === void 0 ? inlineContext : _props$inline,\n    _props$name = props.name,\n    name = _props$name === void 0 ? nameContext : _props$name,\n    value = props.value,\n    onClick = props.onClick,\n    onCheckboxClick = props.onCheckboxClick,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useControlled = useControlled(controlledChecked, defaultChecked),\n    selfChecked = _useControlled[0],\n    setSelfChecked = _useControlled[1],\n    selfControlled = _useControlled[2];\n\n  // Either <Checkbox> is checked itself or by parent <CheckboxGroup>\n  var checked = useMemo(function () {\n    var _checkboxGroupContext, _checkboxGroupContext2;\n    if (!checkboxGroupContext) {\n      return selfChecked;\n    }\n\n    // fixme value from group should not be nullable\n    return (_checkboxGroupContext = (_checkboxGroupContext2 = checkboxGroupContext.value) === null || _checkboxGroupContext2 === void 0 ? void 0 : _checkboxGroupContext2.some(function (checkedValue) {\n      return checkedValue === value;\n    })) !== null && _checkboxGroupContext !== void 0 ? _checkboxGroupContext : false;\n  }, [checkboxGroupContext, selfChecked, value]);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix(color, {\n    inline: inline,\n    indeterminate: indeterminate,\n    disabled: disabled,\n    checked: checked\n  }));\n  var _partitionHTMLProps = partitionHTMLProps(rest),\n    htmlInputProps = _partitionHTMLProps[0],\n    restProps = _partitionHTMLProps[1];\n\n  // If <Checkbox> is within a <CheckboxGroup>, it's bound to be controlled\n  // because its checked state is inferred from group's value, not retrieved from the DOM\n  var controlled = checkboxGroupContext ? true : selfControlled;\n  if (typeof controlled !== 'undefined') {\n    // In uncontrolled situations, use defaultChecked instead of checked\n    htmlInputProps[controlled ? 'checked' : 'defaultChecked'] = checked;\n  }\n  var checkboxRef = useRef(null);\n  var handleChange = useEventCallback(function (event) {\n    var nextChecked = event.target.checked;\n    if (disabled || readOnly) {\n      return;\n    }\n    setSelfChecked(nextChecked);\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, nextChecked, event);\n    onGroupChange === null || onGroupChange === void 0 ? void 0 : onGroupChange(value, nextChecked, event);\n  });\n  var handleLabelClick = useEventCallback(function (event) {\n    // Prevent check when label is not clickable\n    if (!labelClickable && event.target !== checkboxRef.current) {\n      event.preventDefault();\n    }\n  });\n  var labelId = useUniqueId('label-');\n  if (plaintext) {\n    return checked ? /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n      ref: ref,\n      className: classes\n    }), children) : null;\n  }\n  var control = /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"control\"])))\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, inputProps, {\n    \"aria-disabled\": disabled,\n    \"aria-checked\": indeterminate ? 'mixed' : checked,\n    \"aria-labelledby\": labelId,\n    name: name,\n    value: value,\n    type: \"checkbox\",\n    ref: mergeRefs(checkboxRef, inputRef),\n    tabIndex: tabIndex,\n    readOnly: readOnly,\n    disabled: disabled,\n    onClick: onCheckboxClick,\n    onChange: handleChange\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"inner\"]))),\n    \"aria-hidden\": true,\n    \"data-testid\": \"checkbox-control-inner\"\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {\n    ref: ref,\n    onClick: onClick,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"checker\"])))\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    title: title,\n    onClick: handleLabelClick\n  }, checkable ? control : null, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"label\"]))),\n    id: labelId\n  }, children))));\n});\nCheckbox.displayName = 'Checkbox';\nCheckbox.propTypes = {\n  as: PropTypes.elementType,\n  checked: PropTypes.bool,\n  checkable: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  inline: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n  inputProps: PropTypes.any,\n  inputRef: refType,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onCheckboxClick: PropTypes.func\n};\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}