{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"data\", \"classPrefix\", \"childrenKey\", \"valueKey\", \"labelKey\", \"defaultValue\", \"placeholder\", \"disabled\", \"disabledItemValues\", \"appearance\", \"cleanable\", \"locale\", \"toggleAs\", \"style\", \"value\", \"popupClassName\", \"popupStyle\", \"columnHeight\", \"columnWidth\", \"searchable\", \"parentSelectable\", \"placement\", \"id\", \"renderColumn\", \"renderTreeNode\", \"renderSearchItem\", \"renderValue\", \"renderExtraFooter\", \"onEntered\", \"onExited\", \"onClean\", \"onChange\", \"onSelect\", \"onSearch\", \"getChildren\", \"menuClassName\", \"menuStyle\", \"menuWidth\", \"menuHeight\", \"renderMenuItem\", \"renderMenu\"];\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport isNil from 'lodash/isNil';\nimport isFunction from 'lodash/isFunction';\nimport TreeView from \"../CascadeTree/TreeView.js\";\nimport SearchView from \"../CascadeTree/SearchView.js\";\nimport { usePaths, useSelect, useSearch } from \"../CascadeTree/hooks/index.js\";\nimport { flattenTree } from \"../Tree/utils/index.js\";\nimport { findNodeOfTree, getParentMap } from \"../internals/Tree/utils/index.js\";\nimport { deprecatePropTypeNew } from \"../internals/propTypes/index.js\";\nimport { useControlled, useCustom, useClassNames, useEventCallback, useMap } from \"../internals/hooks/index.js\";\nimport { createChainedFunction, mergeRefs, shallowEqual } from \"../internals/utils/index.js\";\nimport { PickerToggle, PickerPopup, PickerToggleTrigger, usePickerClassName, usePickerRef, useToggleKeyDownEvent, useFocusItemValue, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from \"../internals/Picker/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport useActive from \"./useActive.js\";\nvar emptyArray = [];\n\n/**\n * The `Cascader` component displays a hierarchical list of options.\n * @see https://rsuitejs.com/components/cascader\n */\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$data = props.data,\n    data = _props$data === void 0 ? emptyArray : _props$data,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    defaultValue = props.defaultValue,\n    placeholder = props.placeholder,\n    disabled = props.disabled,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    overrideLocale = props.locale,\n    toggleAs = props.toggleAs,\n    style = props.style,\n    valueProp = props.value,\n    popupClassName = props.popupClassName,\n    popupStyle = props.popupStyle,\n    columnHeight = props.columnHeight,\n    columnWidth = props.columnWidth,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? true : _props$searchable,\n    parentSelectable = props.parentSelectable,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    id = props.id,\n    renderColumn = props.renderColumn,\n    renderTreeNode = props.renderTreeNode,\n    renderSearchItem = props.renderSearchItem,\n    renderValue = props.renderValue,\n    renderExtraFooter = props.renderExtraFooter,\n    onEntered = props.onEntered,\n    onExited = props.onExited,\n    onClean = props.onClean,\n    onChange = props.onChange,\n    onSelect = props.onSelect,\n    onSearch = props.onSearch,\n    getChildren = props.getChildren,\n    DEPRECATED_menuClassName = props.menuClassName,\n    DEPRECATED_menuStyle = props.menuStyle,\n    DEPRECATED_menuWidth = props.menuWidth,\n    DEPRECATED_menuHeight = props.menuHeight,\n    DEPRECATED_renderMenuItem = props.renderMenuItem,\n    DEPRECATED_renderMenu = props.renderMenu,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _usePickerRef = usePickerRef(ref),\n    trigger = _usePickerRef.trigger,\n    root = _usePickerRef.root,\n    target = _usePickerRef.target,\n    overlay = _usePickerRef.overlay,\n    searchInput = _usePickerRef.searchInput;\n  var _ref = useControlled(valueProp, defaultValue),\n    value = _ref[0],\n    setValue = _ref[1];\n\n  // Store the children of each node\n  var childrenMap = useMap();\n\n  // Store the parent of each node\n  var parentMap = useMemo(function () {\n    return getParentMap(data, function (item) {\n      var _childrenMap$get;\n      return (_childrenMap$get = childrenMap.get(item)) !== null && _childrenMap$get !== void 0 ? _childrenMap$get : item[childrenKey];\n    });\n  }, [childrenMap, childrenKey, data]);\n\n  // Flatten the tree data\n  var flattenedData = useMemo(function () {\n    return flattenTree(data, function (item) {\n      var _childrenMap$get2;\n      return (_childrenMap$get2 = childrenMap.get(item)) !== null && _childrenMap$get2 !== void 0 ? _childrenMap$get2 : item[childrenKey];\n    });\n  }, [childrenMap, childrenKey, data]);\n\n  // The selected item\n  var selectedItem = flattenedData.find(function (item) {\n    return item[valueKey] === value;\n  });\n\n  // Callback function after selecting the node\n  var onSelectCallback = function onSelectCallback(node, event) {\n    var _trigger$current;\n    var isLeafNode = node.isLeafNode,\n      cascadePaths = node.cascadePaths,\n      itemData = node.itemData;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(itemData, cascadePaths, event);\n    var nextValue = itemData[valueKey];\n    if (isLeafNode) {\n      // Determines whether the option is a leaf node, and if so, closes the picker.\n      handleClose();\n      setValue(nextValue);\n      return;\n    }\n\n    //  When the parent is optional, the value and the displayed path are updated.\n    if (parentSelectable && !shallowEqual(value, nextValue)) {\n      setValue(nextValue);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    }\n\n    // Update menu position\n    (_trigger$current = trigger.current) === null || _trigger$current === void 0 ? void 0 : _trigger$current.updatePosition();\n  };\n  var _useSelect = useSelect({\n      value: value,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      childrenMap: childrenMap,\n      selectedItem: selectedItem,\n      getChildren: getChildren,\n      onChange: onChange,\n      onSelect: onSelectCallback\n    }),\n    activeItem = _useSelect.activeItem,\n    setActiveItem = _useSelect.setActiveItem,\n    loadingItemsSet = _useSelect.loadingItemsSet,\n    handleSelect = _useSelect.handleSelect;\n  var _usePaths = usePaths({\n      data: data,\n      activeItem: activeItem,\n      selectedItem: selectedItem,\n      getParent: function getParent(item) {\n        return parentMap.get(item);\n      },\n      getChildren: function getChildren(item) {\n        var _childrenMap$get3;\n        return (_childrenMap$get3 = childrenMap.get(item)) !== null && _childrenMap$get3 !== void 0 ? _childrenMap$get3 : item[childrenKey];\n      }\n    }),\n    columns = _usePaths.columns,\n    pathTowardsActiveItem = _usePaths.pathTowardsActiveItem,\n    pathTowardsSelectedItem = _usePaths.pathTowardsSelectedItem;\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale,\n    rtl = _useCustom.rtl;\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n  var hasValue = pathTowardsSelectedItem.length > 0 || !isNil(value) && isFunction(renderValue);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var onFocusItemCallback = useCallback(function (value) {\n    setActiveItem(flattenedData.find(function (item) {\n      return item[valueKey] === value;\n    }));\n  }, [flattenedData, setActiveItem, valueKey]);\n\n  // Used to hover the focuse item  when trigger `onKeydown`\n  var _useFocusItemValue = useFocusItemValue(value, {\n      rtl: rtl,\n      data: flattenedData,\n      valueKey: valueKey,\n      defaultLayer: pathTowardsSelectedItem !== null && pathTowardsSelectedItem !== void 0 && pathTowardsSelectedItem.length ? pathTowardsSelectedItem.length - 1 : 0,\n      target: function target() {\n        return overlay.current;\n      },\n      getParent: function getParent(item) {\n        return parentMap.get(item);\n      },\n      callback: onFocusItemCallback\n    }),\n    focusItemValue = _useFocusItemValue.focusItemValue,\n    setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n    setLayer = _useFocusItemValue.setLayer,\n    setKeys = _useFocusItemValue.setKeys,\n    onFocusItem = _useFocusItemValue.onKeyDown;\n  var onSearchCallback = function onSearchCallback(value, items, event) {\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n    if (!value || items.length === 0) {\n      setFocusItemValue(undefined);\n      return;\n    }\n    if (items.length > 0) {\n      setFocusItemValue(items[0][valueKey]);\n      setLayer(0);\n      setKeys([]);\n    }\n  };\n  var _useSearch = useSearch({\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      parentMap: parentMap,\n      flattenedData: flattenedData,\n      parentSelectable: parentSelectable,\n      onSearch: onSearchCallback\n    }),\n    items = _useSearch.items,\n    searchKeyword = _useSearch.searchKeyword,\n    setSearchKeyword = _useSearch.setSearchKeyword,\n    handleSearch = _useSearch.handleSearch;\n  var _useActive = useActive({\n      onEntered: onEntered,\n      onExited: onExited,\n      target: target,\n      setSearchKeyword: setSearchKeyword\n    }),\n    active = _useActive.active,\n    handleEntered = _useActive.handleEntered,\n    handleExited = _useActive.handleExited;\n  var handleClose = useEventCallback(function () {\n    var _trigger$current2, _target$current, _target$current$focus;\n    (_trigger$current2 = trigger.current) === null || _trigger$current2 === void 0 ? void 0 : _trigger$current2.close();\n\n    // The focus is on the trigger button after closing\n    (_target$current = target.current) === null || _target$current === void 0 ? void 0 : (_target$current$focus = _target$current.focus) === null || _target$current$focus === void 0 ? void 0 : _target$current$focus.call(_target$current);\n  });\n  var handleClean = useEventCallback(function (event) {\n    if (disabled || !target.current) {\n      return;\n    }\n    setValue(null);\n    onChange === null || onChange === void 0 ? void 0 : onChange(null, event);\n  });\n  var handleMenuPressEnter = useEventCallback(function (event) {\n    var focusItem = findNodeOfTree(data, function (item) {\n      return item[valueKey] === focusItemValue;\n    });\n    var isLeafNode = focusItem && !focusItem[childrenKey];\n    if (isLeafNode) {\n      setValue(focusItemValue);\n      if (pathTowardsActiveItem.length) {\n        setLayer(pathTowardsActiveItem.length - 1);\n      }\n      if (!shallowEqual(value, focusItemValue)) {\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect(focusItem, pathTowardsActiveItem, event);\n        onChange === null || onChange === void 0 ? void 0 : onChange(focusItemValue !== null && focusItemValue !== void 0 ? focusItemValue : null, event);\n      }\n      handleClose();\n    }\n  });\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    toggle: !focusItemValue || !active,\n    trigger: trigger,\n    target: target,\n    overlay: overlay,\n    searchInput: searchInput,\n    active: active,\n    onExit: handleClean,\n    onMenuKeyDown: onFocusItem,\n    onMenuPressEnter: handleMenuPressEnter\n  }, rest));\n\n  /**\n   * The search structure option is processed after being selected.\n   */\n  var handleSearchRowSelect = useEventCallback(function (itemData, nodes, event) {\n    var nextValue = itemData[valueKey];\n    handleClose();\n    setSearchKeyword('');\n    setValue(nextValue);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(itemData, nodes, event);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n  });\n  var renderCascadeColumn = function renderCascadeColumn(childNodes, column) {\n    var items = column.items,\n      parentItem = column.parentItem,\n      layer = column.layer;\n    if (typeof renderColumn === 'function') {\n      return renderColumn(childNodes, column);\n    } else if (typeof DEPRECATED_renderMenu === 'function') {\n      return DEPRECATED_renderMenu(items, childNodes, parentItem, layer);\n    }\n    return childNodes;\n  };\n  var renderCascadeTreeNode = function renderCascadeTreeNode(node, itemData) {\n    var render = typeof renderTreeNode === 'function' ? renderTreeNode : DEPRECATED_renderMenuItem;\n    if (typeof render === 'function') {\n      return render(node, itemData);\n    }\n    return node;\n  };\n  var renderTreeView = function renderTreeView(positionProps, speakerRef) {\n    var _ref2 = positionProps || {},\n      left = _ref2.left,\n      top = _ref2.top,\n      className = _ref2.className;\n    var styles = _extends({}, DEPRECATED_menuStyle, popupStyle, {\n      left: left,\n      top: top\n    });\n    var classes = merge(className, DEPRECATED_menuClassName, popupClassName, prefix('popup-cascader'));\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      className: classes,\n      style: styles,\n      target: trigger,\n      onKeyDown: onPickerKeyDown\n    }, searchable && /*#__PURE__*/React.createElement(SearchView, {\n      data: items,\n      searchKeyword: searchKeyword,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      parentMap: parentMap,\n      disabledItemValues: disabledItemValues,\n      focusItemValue: focusItemValue,\n      inputRef: searchInput,\n      renderSearchItem: renderSearchItem,\n      onSelect: handleSearchRowSelect,\n      onSearch: handleSearch\n    }), searchKeyword === '' && /*#__PURE__*/React.createElement(TreeView, {\n      columnWidth: columnWidth !== null && columnWidth !== void 0 ? columnWidth : DEPRECATED_menuWidth,\n      columnHeight: columnHeight !== null && columnHeight !== void 0 ? columnHeight : DEPRECATED_menuHeight,\n      disabledItemValues: disabledItemValues,\n      loadingItemsSet: loadingItemsSet,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      classPrefix: 'cascade-tree',\n      data: columns,\n      cascadePaths: pathTowardsActiveItem,\n      activeItemValue: value,\n      onSelect: handleSelect,\n      renderColumn: renderCascadeColumn,\n      renderTreeNode: renderCascadeTreeNode\n    }), renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n  var selectedElement = placeholder;\n  if (pathTowardsSelectedItem.length > 0) {\n    selectedElement = [];\n    pathTowardsSelectedItem.forEach(function (item, index) {\n      var key = item[valueKey] || item[labelKey];\n      selectedElement.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: key\n      }, item[labelKey]));\n      if (index < pathTowardsSelectedItem.length - 1) {\n        selectedElement.push( /*#__PURE__*/React.createElement(\"span\", {\n          className: \"separator\",\n          key: key + \"-separator\"\n        }, ' / '));\n      }\n    });\n  }\n  if (!isNil(value) && isFunction(renderValue)) {\n    selectedElement = renderValue(value, pathTowardsSelectedItem, selectedElement);\n    // If renderValue returns null or undefined, hasValue is false.\n    if (isNil(selectedElement)) {\n      hasValue = false;\n    }\n  }\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n      classPrefix: classPrefix,\n      hasValue: hasValue,\n      name: 'cascader',\n      appearance: appearance,\n      cleanable: cleanable\n    })),\n    classes = _usePickerClassName[0],\n    usedClassNamePropKeys = _usePickerClassName[1];\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    id: id,\n    popupType: \"tree\",\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: trigger,\n    placement: placement,\n    onEntered: handleEntered,\n    onExited: handleExited,\n    speaker: renderTreeView\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    ref: root\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    ref: target,\n    as: toggleAs,\n    appearance: appearance,\n    disabled: disabled,\n    onClean: createChainedFunction(handleClean, onClean),\n    onKeyDown: onPickerKeyDown,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: active,\n    placement: placement,\n    inputValue: value !== null && value !== void 0 ? value : '',\n    focusItemValue: focusItemValue\n  }), selectedElement || (locale === null || locale === void 0 ? void 0 : locale.placeholder))));\n});\nCascader.displayName = 'Cascader';\nCascader.propTypes = _extends({}, listPickerPropTypes, {\n  disabledItemValues: PropTypes.array,\n  locale: PropTypes.any,\n  appearance: oneOf(['default', 'subtle']),\n  onSelect: PropTypes.func,\n  onSearch: PropTypes.func,\n  cleanable: PropTypes.bool,\n  renderColumn: PropTypes.func,\n  renderTreeNode: PropTypes.func,\n  renderSearchItem: PropTypes.func,\n  columnWidth: PropTypes.number,\n  columnHeight: PropTypes.number,\n  searchable: PropTypes.bool,\n  parentSelectable: PropTypes.bool,\n  inline: deprecatePropTypeNew(PropTypes.bool, 'Use `<CascadeTree>` instead.'),\n  renderMenu: deprecatePropTypeNew(PropTypes.func, 'Use \"renderColumn\" property instead.'),\n  renderMenuItem: deprecatePropTypeNew(PropTypes.func, 'Use \"renderTreeNode\" property instead.'),\n  menuWidth: deprecatePropTypeNew(PropTypes.number, 'Use \"columnWidth\" property instead.'),\n  menuHeight: deprecatePropTypeNew(PropTypes.number, 'Use \"columnHeight\" property instead.')\n});\nexport default Cascader;","map":null,"metadata":{},"sourceType":"module"}