{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"children\", \"container\", \"top\", \"onChange\", \"onOffsetChange\"];\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport getOffset from 'dom-lib/getOffset';\nimport { useClassNames, useElementResize, useEventListener, useMount } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\n/**\n * Get the layout size and offset of the mount element\n */\nfunction useOffset(mountRef, onOffsetChange) {\n  var _useState = useState(null),\n    offset = _useState[0],\n    setOffset = _useState[1];\n  var updateOffset = useCallback(function () {\n    if (!mountRef.current) {\n      return;\n    }\n    var newOffset = getOffset(mountRef.current);\n    if ((newOffset === null || newOffset === void 0 ? void 0 : newOffset.height) !== (offset === null || offset === void 0 ? void 0 : offset.height) || (newOffset === null || newOffset === void 0 ? void 0 : newOffset.width) !== (offset === null || offset === void 0 ? void 0 : offset.width) || (newOffset === null || newOffset === void 0 ? void 0 : newOffset.top) !== (offset === null || offset === void 0 ? void 0 : offset.top) || (newOffset === null || newOffset === void 0 ? void 0 : newOffset.left) !== (offset === null || offset === void 0 ? void 0 : offset.left)) {\n      setOffset(newOffset);\n      if (offset !== null && newOffset !== null) {\n        onOffsetChange === null || onOffsetChange === void 0 ? void 0 : onOffsetChange(newOffset);\n      }\n    }\n  }, [mountRef, offset, onOffsetChange]);\n\n  // Update after the element size changes\n  useElementResize(function () {\n    return mountRef.current;\n  }, updateOffset);\n\n  // Initialize after the first render\n  useMount(updateOffset);\n\n  // Update after window size changes\n  useEventListener(window, 'resize', updateOffset, false);\n\n  // Update after window scroll\n  useEventListener(window, 'scroll', debounce(updateOffset, 100), false);\n  return offset;\n}\n\n/**\n * Get the layout size and offset of the container element\n * @param container\n */\nfunction useContainerOffset(container) {\n  var _useState2 = useState(null),\n    offset = _useState2[0],\n    setOffset = _useState2[1];\n  useEffect(function () {\n    var node = typeof container === 'function' ? container() : container;\n    setOffset(node ? getOffset(node) : null);\n  }, [container]);\n  return offset;\n}\n\n/**\n * Check whether the current element should be in a fixed state.\n * @param offset\n * @param containerOffset\n * @param props\n */\nfunction useFixed(offset, containerOffset, props) {\n  var top = props.top,\n    onChange = props.onChange;\n  var _useState3 = useState(false),\n    fixed = _useState3[0],\n    setFixed = _useState3[1];\n  var handleScroll = useCallback(function () {\n    if (!offset) {\n      return;\n    }\n    var scrollY = window.scrollY || window.pageYOffset;\n\n    // When the scroll distance exceeds the element's top value, it is fixed.\n    var nextFixed = scrollY - (Number(offset === null || offset === void 0 ? void 0 : offset.top) - Number(top)) >= 0;\n\n    // If the current element is specified in the container,\n    // add to determine whether the current container is in the window range.\n    if (containerOffset) {\n      nextFixed = nextFixed && scrollY < Number(containerOffset.top) + Number(containerOffset.height);\n    }\n    if (nextFixed !== fixed) {\n      setFixed(nextFixed);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextFixed);\n    }\n  }, [offset, top, containerOffset, fixed, onChange]);\n\n  // Add scroll event to window\n  useEventListener(window, 'scroll', handleScroll, false);\n  return fixed;\n}\n\n/**\n * Components such as navigation, buttons, etc. can be fixed in the visible range.\n * Commonly used for pages with long content, fixed the specified elements in the visible range of the page to assist in quick operation.\n *\n * @see https://rsuitejs.com/components/affix/\n */\nvar Affix = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _merge;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'affix' : _props$classPrefix,\n    className = props.className,\n    children = props.children,\n    container = props.container,\n    _props$top = props.top,\n    top = _props$top === void 0 ? 0 : _props$top,\n    onChange = props.onChange,\n    onOffsetChange = props.onOffsetChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var mountRef = useRef(null);\n  var offset = useOffset(mountRef, onOffsetChange);\n  var containerOffset = useContainerOffset(container);\n  var fixed = useFixed(offset, containerOffset, {\n    top: top,\n    onChange: onChange\n  });\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, (_merge = {}, _merge[withClassPrefix()] = fixed, _merge));\n  var _ref = offset || {},\n    width = _ref.width,\n    height = _ref.height;\n  var placeholderStyles = fixed ? {\n    width: width,\n    height: height\n  } : undefined;\n  var fixedStyles = {\n    position: 'fixed',\n    top: top,\n    width: width,\n    zIndex: 10\n  };\n  var affixStyles = fixed ? fixedStyles : undefined;\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: mergeRefs(mountRef, ref)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    style: affixStyles\n  }, children), fixed && /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": true,\n    style: placeholderStyles\n  }));\n});\nAffix.displayName = 'Affix';\nAffix.propTypes = {\n  top: PropTypes.number,\n  onChange: PropTypes.func,\n  container: PropTypes.oneOfType([PropTypes.any, PropTypes.func])\n};\nexport default Affix;","map":null,"metadata":{},"sourceType":"module"}