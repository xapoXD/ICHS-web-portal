{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"columnLeft\", \"classPrefix\", \"height\", \"className\", \"style\", \"columnFixed\", \"defaultColumnWidth\", \"minWidth\", \"onColumnResizeStart\", \"onColumnResizeMove\", \"onColumnResizeEnd\"];\nimport React, { useCallback, useContext, useEffect, useRef } from 'react';\nimport clamp from 'lodash/clamp';\nimport DOMMouseMoveTracker from 'dom-lib/DOMMouseMoveTracker';\nimport { useClassNames } from './utils';\nimport TableContext from './TableContext';\nimport { RESIZE_MIN_WIDTH } from './constants';\nvar ColumnResizeHandler = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _extends2;\n  var _props$columnLeft = props.columnLeft,\n    columnLeft = _props$columnLeft === void 0 ? 0 : _props$columnLeft,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'column-resize-spanner' : _props$classPrefix,\n    height = props.height,\n    className = props.className,\n    style = props.style,\n    columnFixed = props.columnFixed,\n    defaultColumnWidth = props.defaultColumnWidth,\n    minWidth = props.minWidth,\n    onColumnResizeStart = props.onColumnResizeStart,\n    onColumnResizeMove = props.onColumnResizeMove,\n    onColumnResizeEnd = props.onColumnResizeEnd,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useContext = useContext(TableContext),\n    rtl = _useContext.rtl;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  var columnWidth = useRef(defaultColumnWidth || 0);\n  var mouseMoveTracker = useRef();\n  var isKeyDown = useRef();\n  var cursorDelta = useRef(0);\n  var handleMove = useCallback(function (deltaX) {\n    if (!isKeyDown.current) {\n      return;\n    }\n    cursorDelta.current += deltaX;\n    columnWidth.current = clamp((defaultColumnWidth || 0) + (rtl ? -cursorDelta.current : cursorDelta.current), minWidth ? Math.max(minWidth, RESIZE_MIN_WIDTH) : RESIZE_MIN_WIDTH, 20000);\n    onColumnResizeMove === null || onColumnResizeMove === void 0 ? void 0 : onColumnResizeMove(columnWidth.current, columnLeft, columnFixed);\n  }, [columnFixed, columnLeft, defaultColumnWidth, minWidth, onColumnResizeMove, rtl]);\n  var handleColumnResizeEnd = useCallback(function () {\n    var _mouseMoveTracker$cur, _mouseMoveTracker$cur2;\n    isKeyDown.current = false;\n    onColumnResizeEnd === null || onColumnResizeEnd === void 0 ? void 0 : onColumnResizeEnd(columnWidth.current, cursorDelta.current);\n    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : (_mouseMoveTracker$cur2 = _mouseMoveTracker$cur.releaseMouseMoves) === null || _mouseMoveTracker$cur2 === void 0 ? void 0 : _mouseMoveTracker$cur2.call(_mouseMoveTracker$cur);\n    mouseMoveTracker.current = null;\n  }, [onColumnResizeEnd]);\n  var getMouseMoveTracker = useCallback(function () {\n    return mouseMoveTracker.current || new DOMMouseMoveTracker(handleMove, handleColumnResizeEnd, document.body);\n  }, [handleColumnResizeEnd, handleMove]);\n  var handleColumnResizeMouseDown = useCallback(function (event) {\n    mouseMoveTracker.current = getMouseMoveTracker();\n    mouseMoveTracker.current.captureMouseMoves(event);\n    isKeyDown.current = true;\n    cursorDelta.current = 0;\n    var client = {\n      clientX: event.clientX,\n      clientY: event.clientY,\n      preventDefault: Function()\n    };\n    onColumnResizeStart === null || onColumnResizeStart === void 0 ? void 0 : onColumnResizeStart(client);\n  }, [getMouseMoveTracker, onColumnResizeStart]);\n  useEffect(function () {\n    return function () {\n      var _mouseMoveTracker$cur3;\n      (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.releaseMouseMoves();\n      mouseMoveTracker.current = null;\n    };\n  }, []);\n  if (columnFixed === 'right') {\n    return null;\n  }\n  var styles = _extends((_extends2 = {}, _extends2[rtl ? 'right' : 'left'] = columnWidth.current + columnLeft - 2, _extends2.height = height, _extends2), style);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    tabIndex: -1,\n    role: \"button\",\n    ref: ref\n  }, rest, {\n    className: classes,\n    style: styles,\n    onMouseDown: handleColumnResizeMouseDown\n  }));\n});\nColumnResizeHandler.displayName = 'Table.ColumnResizeHandler';\nexport default ColumnResizeHandler;","map":null,"metadata":{},"sourceType":"module"}