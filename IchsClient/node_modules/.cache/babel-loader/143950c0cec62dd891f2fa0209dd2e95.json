{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2, _templateObject3;\nvar _excluded = [\"animation\", \"animationProps\", \"animationTimeout\", \"aria-labelledby\", \"aria-describedby\", \"backdropClassName\", \"backdrop\", \"className\", \"children\", \"classPrefix\", \"dialogClassName\", \"dialogStyle\", \"dialogAs\", \"enforceFocus\", \"full\", \"overflow\", \"open\", \"onClose\", \"onEntered\", \"onEntering\", \"onExited\", \"role\", \"size\", \"id\"],\n  _excluded2 = [\"className\"];\nimport React, { useRef, useMemo, useState, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport on from 'dom-lib/on';\nimport getAnimationEnd from 'dom-lib/getAnimationEnd';\nimport BaseModal, { modalPropTypes } from \"../internals/Overlay/Modal.js\";\nimport Bounce from \"../Animation/Bounce.js\";\nimport { useClassNames, useWillUnmount, useUniqueId } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport ModalDialog, { modalDialogPropTypes } from \"./ModalDialog.js\";\nimport { ModalContext } from \"./ModalContext.js\";\nimport ModalBody from \"./ModalBody.js\";\nimport ModalHeader from \"./ModalHeader.js\";\nimport ModalTitle from \"./ModalTitle.js\";\nimport ModalFooter from \"./ModalFooter.js\";\nimport { useBodyStyles } from \"./utils.js\";\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\nimport DrawerContext from \"../Drawer/DrawerContext.js\";\nvar modalSizes = ['xs', 'sm', 'md', 'lg', 'full'];\n/**\n * The `Modal` component is used to show content in a layer above the app.\n * @see https://rsuitejs.com/components/modal\n */\nvar Modal = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _prefix, _merge;\n  var _props$animation = props.animation,\n    animation = _props$animation === void 0 ? Bounce : _props$animation,\n    animationProps = props.animationProps,\n    _props$animationTimeo = props.animationTimeout,\n    animationTimeout = _props$animationTimeo === void 0 ? 300 : _props$animationTimeo,\n    ariaLabelledby = props['aria-labelledby'],\n    ariaDescribedby = props['aria-describedby'],\n    backdropClassName = props.backdropClassName,\n    _props$backdrop = props.backdrop,\n    backdrop = _props$backdrop === void 0 ? true : _props$backdrop,\n    className = props.className,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'modal' : _props$classPrefix,\n    dialogClassName = props.dialogClassName,\n    dialogStyle = props.dialogStyle,\n    _props$dialogAs = props.dialogAs,\n    Dialog = _props$dialogAs === void 0 ? ModalDialog : _props$dialogAs,\n    enforceFocusProp = props.enforceFocus,\n    full = props.full,\n    _props$overflow = props.overflow,\n    overflow = _props$overflow === void 0 ? true : _props$overflow,\n    open = props.open,\n    onClose = props.onClose,\n    onEntered = props.onEntered,\n    onEntering = props.onEntering,\n    onExited = props.onExited,\n    _props$role = props.role,\n    role = _props$role === void 0 ? 'dialog' : _props$role,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'sm' : _props$size,\n    idProp = props.id,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var inClass = {\n    in: open && !animation\n  };\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var _useState = useState(false),\n    shake = _useState[0],\n    setShake = _useState[1];\n  var classes = merge(className, prefix((_prefix = {\n    full: full\n  }, _prefix[size] = modalSizes.includes(size), _prefix)));\n  var dialogRef = useRef(null);\n  var transitionEndListener = useRef();\n\n  // Render Modal as Drawer\n  var _ref = useContext(DrawerContext) || {},\n    _ref$isDrawer = _ref.isDrawer,\n    isDrawer = _ref$isDrawer === void 0 ? false : _ref$isDrawer;\n\n  // The style of the Modal body will be updated with the size of the window or container.\n  var _useBodyStyles = useBodyStyles(dialogRef, {\n      overflow: overflow,\n      prefix: prefix,\n      size: size\n    }),\n    bodyStyles = _useBodyStyles[0],\n    onChangeBodyStyles = _useBodyStyles[1],\n    onDestroyEvents = _useBodyStyles[2];\n  var dialogId = useUniqueId('dialog-', idProp);\n  var modalContextValue = useMemo(function () {\n    return {\n      dialogId: dialogId,\n      onModalClose: onClose,\n      getBodyStyles: function getBodyStyles() {\n        return bodyStyles;\n      }\n    };\n  }, [dialogId, onClose, bodyStyles]);\n  var handleExited = useCallback(function (node) {\n    var _transitionEndListene;\n    onExited === null || onExited === void 0 ? void 0 : onExited(node);\n    onDestroyEvents();\n    (_transitionEndListene = transitionEndListener.current) === null || _transitionEndListene === void 0 ? void 0 : _transitionEndListene.off();\n    transitionEndListener.current = null;\n  }, [onDestroyEvents, onExited]);\n  var handleEntered = useCallback(function (node) {\n    onEntered === null || onEntered === void 0 ? void 0 : onEntered(node);\n    onChangeBodyStyles();\n  }, [onChangeBodyStyles, onEntered]);\n  var handleEntering = useCallback(function (node) {\n    onEntering === null || onEntering === void 0 ? void 0 : onEntering(node);\n    onChangeBodyStyles(true);\n  }, [onChangeBodyStyles, onEntering]);\n  var backdropClick = React.useRef();\n  var handleMouseDown = useCallback(function (event) {\n    backdropClick.current = event.target === event.currentTarget;\n  }, []);\n  var handleBackdropClick = useCallback(function (event) {\n    // Ignore click events from non-backdrop.\n    // fix: https://github.com/rsuite/rsuite/issues/3394\n    if (!backdropClick.current) {\n      return;\n    }\n\n    // Ignore click events from dialog.\n    if (event.target === dialogRef.current) {\n      return;\n    }\n\n    // Ignore click events from dialog children.\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    // When the value of `backdrop` is `static`, a jitter animation will be added to the dialog when clicked.\n    if (backdrop === 'static') {\n      setShake(true);\n      if (!transitionEndListener.current && dialogRef.current) {\n        //fix: https://github.com/rsuite/rsuite/blob/a93d13c14fb20cc58204babe3331d3c3da3fe1fd/src/Modal/styles/index.less#L59\n        transitionEndListener.current = on(dialogRef.current, getAnimationEnd(), function () {\n          setShake(false);\n        });\n      }\n      return;\n    }\n    onClose === null || onClose === void 0 ? void 0 : onClose(event);\n  }, [backdrop, onClose]);\n  useWillUnmount(function () {\n    var _transitionEndListene2;\n    (_transitionEndListene2 = transitionEndListener.current) === null || _transitionEndListene2 === void 0 ? void 0 : _transitionEndListene2.off();\n  });\n  var sizeKey = 'width';\n  if (isDrawer) {\n    var _ref2 = animationProps || {},\n      placement = _ref2.placement;\n    // The width or height of the drawer depends on the placement.\n    sizeKey = placement === 'top' || placement === 'bottom' ? 'height' : 'width';\n  }\n  var enforceFocus = useMemo(function () {\n    if (typeof enforceFocusProp === 'boolean') {\n      return enforceFocusProp;\n    }\n\n    // When the Drawer is displayed and the backdrop is not displayed, the focus is not restricted.\n    if (isDrawer && backdrop === false) {\n      return false;\n    }\n  }, [backdrop, enforceFocusProp, isDrawer]);\n  var wrapperClassName = merge(prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"wrapper\"]))), (_merge = {}, _merge[prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"no-backdrop\"])))] = backdrop === false, _merge));\n  return /*#__PURE__*/React.createElement(ModalContext.Provider, {\n    value: modalContextValue\n  }, /*#__PURE__*/React.createElement(BaseModal, _extends({\n    \"data-testid\": isDrawer ? 'drawer-wrapper' : 'modal-wrapper'\n  }, rest, {\n    ref: ref,\n    backdrop: backdrop,\n    enforceFocus: enforceFocus,\n    open: open,\n    onClose: onClose,\n    className: wrapperClassName,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExited: handleExited,\n    backdropClassName: merge(prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"backdrop\"]))), backdropClassName, inClass),\n    containerClassName: prefix({\n      open: open,\n      'has-backdrop': backdrop\n    }),\n    transition: animation ? animation : undefined,\n    animationProps: animationProps,\n    dialogTransitionTimeout: animationTimeout,\n    backdropTransitionTimeout: 150,\n    onClick: backdrop ? handleBackdropClick : undefined,\n    onMouseDown: handleMouseDown\n  }), function (transitionProps, transitionRef) {\n    var _ref3;\n    var transitionClassName = transitionProps.className,\n      transitionRest = _objectWithoutPropertiesLoose(transitionProps, _excluded2);\n    return /*#__PURE__*/React.createElement(Dialog, _extends({\n      role: role,\n      id: dialogId,\n      \"aria-labelledby\": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : dialogId + \"-title\",\n      \"aria-describedby\": ariaDescribedby,\n      style: (_ref3 = {}, _ref3[sizeKey] = modalSizes.includes(size) ? undefined : size, _ref3)\n    }, transitionRest, pick(rest, Object.keys(modalDialogPropTypes)), {\n      ref: mergeRefs(dialogRef, transitionRef),\n      classPrefix: classPrefix,\n      className: merge(classes, transitionClassName, prefix({\n        shake: shake\n      })),\n      dialogClassName: dialogClassName,\n      dialogStyle: dialogStyle\n    }), children);\n  }));\n});\nModal.Body = ModalBody;\nModal.Header = ModalHeader;\nModal.Title = ModalTitle;\nModal.Footer = ModalFooter;\nModal.Dialog = ModalDialog;\nModal.displayName = 'Modal';\nModal.propTypes = _extends({}, modalPropTypes, {\n  animation: PropTypes.any,\n  animationTimeout: PropTypes.number,\n  classPrefix: PropTypes.string,\n  dialogClassName: PropTypes.string,\n  size: PropTypes.oneOfType([oneOf(modalSizes), PropTypes.number, PropTypes.string]),\n  dialogStyle: PropTypes.object,\n  dialogAs: PropTypes.elementType,\n  full: deprecatePropType(PropTypes.bool, 'Use size=\"full\" instead.'),\n  overflow: PropTypes.bool\n});\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}