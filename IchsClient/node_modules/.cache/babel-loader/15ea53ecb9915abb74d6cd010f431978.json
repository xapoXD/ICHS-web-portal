{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"data\", \"loading\", \"expanded\", \"hasChildren\"];\nimport React from 'react';\nimport ArrowDownIcon from '@rsuite/icons/ArrowDown';\nimport ArrowRightIcon from '@rsuite/icons/ArrowRight';\nimport ArrowLeftIcon from '@rsuite/icons/ArrowLeft';\nimport Spinner from '@rsuite/icons/legacy/Spinner';\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport { useTreeCustomRenderer } from \"../internals/Tree/TreeProvider.js\";\nfunction TreeNodeToggle(props) {\n  var data = props.data,\n    loading = props.loading,\n    expanded = props.expanded,\n    hasChildren = props.hasChildren,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useTreeCustomRendere = useTreeCustomRenderer(),\n    renderTreeIcon = _useTreeCustomRendere.renderTreeIcon;\n  var _useClassNames = useClassNames('tree-node'),\n    prefix = _useClassNames.prefix;\n  var IconElementType = expanded ? ArrowDownIcon : rtl ? ArrowLeftIcon : ArrowRightIcon;\n  var icon = /*#__PURE__*/React.createElement(IconElementType, {\n    className: prefix('toggle-icon')\n  });\n  if (loading) {\n    icon = /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('loading-icon')\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      spin: true\n    }));\n  }\n  if (data !== undefined && typeof renderTreeIcon === 'function') {\n    var customIcon = renderTreeIcon(data, expanded);\n    icon = customIcon !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('custom-icon')\n    }, customIcon) : icon;\n  }\n  return hasChildren ? /*#__PURE__*/React.createElement(\"div\", _extends({\n    tabIndex: -1,\n    role: \"button\",\n    \"aria-busy\": loading ? true : undefined,\n    \"data-ref\": data.refKey,\n    className: prefix('toggle')\n  }, rest), icon) : /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('toggle-placeholder')\n  });\n}\nexport default TreeNodeToggle;","map":null,"metadata":{},"sourceType":"module"}