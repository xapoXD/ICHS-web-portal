{"ast":null,"code":"'use client';\n\nfunction getResponse(xhr) {\n  var text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\nexport default function ajaxUpload(options) {\n  var name = options.name,\n    timeout = options.timeout,\n    _options$headers = options.headers,\n    headers = _options$headers === void 0 ? {} : _options$headers,\n    _options$data = options.data,\n    data = _options$data === void 0 ? {} : _options$data,\n    _options$method = options.method,\n    method = _options$method === void 0 ? 'POST' : _options$method,\n    onError = options.onError,\n    onSuccess = options.onSuccess,\n    onProgress = options.onProgress,\n    file = options.file,\n    url = options.url,\n    withCredentials = options.withCredentials,\n    disableMultipart = options.disableMultipart;\n  var xhr = new XMLHttpRequest();\n  var sendableData;\n  xhr.open(method, url, true);\n  if (!disableMultipart) {\n    sendableData = new FormData();\n    sendableData.append(name, file, file.name);\n    for (var key in data) {\n      sendableData.append(key, data[key]);\n    }\n  } else {\n    sendableData = file;\n  }\n  Object.keys(headers).forEach(function (key) {\n    if (headers[key] !== null) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n  });\n  if (headers['X-Requested-With'] !== null) {\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  }\n  if (timeout) {\n    xhr.timeout = timeout;\n    xhr.ontimeout = function (event) {\n      onError === null || onError === void 0 ? void 0 : onError({\n        type: 'timeout'\n      }, event, xhr);\n    };\n  }\n  if (withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n  xhr.onload = function (event) {\n    var resp = getResponse(xhr);\n    if (xhr.status < 200 || xhr.status >= 300) {\n      onError === null || onError === void 0 ? void 0 : onError({\n        type: 'server_error',\n        response: resp\n      }, event, xhr);\n      return;\n    }\n    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(resp, event, xhr);\n  };\n  if (xhr.upload) {\n    xhr.upload.onprogress = function (event) {\n      var percent = 0;\n      if (event.lengthComputable) {\n        percent = event.loaded / event.total * 100;\n      }\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(percent, event, xhr);\n    };\n  }\n  xhr.onerror = function (event) {\n    onError === null || onError === void 0 ? void 0 : onError({\n      type: 'xhr_error'\n    }, event, xhr);\n  };\n  xhr.send(sendableData);\n  return {\n    xhr: xhr,\n    data: sendableData\n  };\n}","map":null,"metadata":{},"sourceType":"module"}