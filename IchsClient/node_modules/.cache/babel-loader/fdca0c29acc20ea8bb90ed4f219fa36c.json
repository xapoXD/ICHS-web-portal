{"ast":null,"code":"'use client';\n\nimport { useMemo } from 'react';\nimport toaster from \"../toaster/index.js\";\nimport { useCustom } from \"../internals/hooks/index.js\";\n/**\n * Toaster display brief, temporary notifications of actions, errors, or other events in an application.\n * It is often used with the Message and Notification components.\n * @returns toaster { push, remove, clear }\n *\n * @see https://rsuitejs.com/components/use-toaster/\n */\nvar useToaster = function useToaster() {\n  var _useCustom = useCustom(),\n    toasters = _useCustom.toasters;\n  return useMemo(function () {\n    return {\n      /**\n       * Push a toast message.\n       * @param message The message to be displayed.\n       *                eg: `<Message type=\"success\" description=\"Success\" />` or `<Notification type=\"success\" closable>Success</Notification>`\n       * @param options The options of the toast message. (optional)\n       *                eg: `{ placement: 'topCenter', duration: 5000 }`\n       * @returns The key of the toast message.\n       */\n      push: function push(message, options) {\n        var _toasters$current;\n        var customToaster = toasters === null || toasters === void 0 ? void 0 : (_toasters$current = toasters.current) === null || _toasters$current === void 0 ? void 0 : _toasters$current.get((options === null || options === void 0 ? void 0 : options.placement) || 'topCenter');\n        return customToaster ? customToaster.push(message, options) : toaster.push(message, options);\n      },\n      /**\n       * Remove a toast message.\n       * @param key  The key of the toast message.\n       */\n      remove: function remove(key) {\n        toasters ? Array.from(toasters.current).forEach(function (_ref) {\n          var c = _ref[1];\n          return c === null || c === void 0 ? void 0 : c.remove(key);\n        }) : toaster.remove(key);\n      },\n      /**\n       * Clear all toast messages.\n       */\n      clear: function clear() {\n        toasters ? Array.from(toasters.current).forEach(function (_ref2) {\n          var c = _ref2[1];\n          return c === null || c === void 0 ? void 0 : c.clear();\n        }) : toaster.clear();\n      }\n    };\n  }, [toasters]);\n};\nexport default useToaster;","map":null,"metadata":{},"sourceType":"module"}