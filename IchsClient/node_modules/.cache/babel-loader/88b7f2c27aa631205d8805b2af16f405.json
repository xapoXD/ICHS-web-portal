{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { useReducer } from 'react';\nimport isValid from 'date-fns/isValid';\nimport { modifyDate } from \"./utils.js\";\nexport var patternMap = {\n  y: 'year',\n  M: 'month',\n  d: 'day',\n  H: 'hour',\n  h: 'hour',\n  m: 'minute',\n  s: 'second',\n  a: 'meridian'\n};\nexport var DateField = /*#__PURE__*/function (_Object) {\n  function DateField(format, value) {\n    var _this;\n    _this = _Object.call(this) || this;\n    _this.format = void 0;\n    _this.patternArray = [];\n    _this.year = null;\n    _this.month = null;\n    _this.day = null;\n    _this.hour = null;\n    _this.minute = null;\n    _this.second = null;\n    _this.format = format;\n    var formatArray = format.match(new RegExp('([y|d|M|H|h|m|s|a])+', 'ig')) || [];\n    _this.patternArray = formatArray.map(function (pattern) {\n      return {\n        pattern: pattern,\n        key: patternMap[pattern[0]]\n      };\n    });\n    if (value && isValid(value)) {\n      _this.year = value.getFullYear();\n      _this.month = value.getMonth() + 1;\n      _this.day = value.getDate();\n      _this.hour = value.getHours();\n      _this.minute = value.getMinutes();\n      _this.second = value.getSeconds();\n    }\n    return _this;\n  }\n  _inheritsLoose(DateField, _Object);\n  return DateField;\n}( /*#__PURE__*/_wrapNativeSuper(Object));\n\n/**\n * Pad a number with zeros to the left.\n */\nfunction padNumber(number, length) {\n  var numberString = String(number);\n  if (numberString.length >= length) {\n    return numberString;\n  }\n  var paddingCount = length - numberString.length;\n  for (var i = 0; i < paddingCount; i++) {\n    numberString = '0' + numberString;\n  }\n  return numberString;\n}\nexport var useDateField = function useDateField(format, localize, date) {\n  var _useReducer = useReducer(function (state, action) {\n      switch (action.type) {\n        case 'setYear':\n          return _extends({}, state, {\n            year: action.value\n          });\n        case 'setMonth':\n          return _extends({}, state, {\n            month: action.value\n          });\n        case 'setDay':\n          return _extends({}, state, {\n            day: action.value\n          });\n        case 'setHour':\n          return _extends({}, state, {\n            hour: action.value\n          });\n        case 'setMinute':\n          return _extends({}, state, {\n            minute: action.value\n          });\n        case 'setSecond':\n          return _extends({}, state, {\n            second: action.value\n          });\n        case 'setNewDate':\n          return new DateField(format, action.value);\n        default:\n          return state;\n      }\n    }, new DateField(format, date)),\n    dateField = _useReducer[0],\n    dispatch = _useReducer[1];\n  var toDateString = function toDateString() {\n    var str = format;\n    dateField.patternArray.forEach(function (item) {\n      var key = item.key,\n        pattern = item.pattern;\n      var hour = dateField.hour;\n      var value = dateField[key];\n      if (value !== null) {\n        if (pattern === 'MMM' && typeof value === 'number') {\n          value = localize === null || localize === void 0 ? void 0 : localize.month(value - 1, {\n            width: 'abbreviated'\n          });\n        } else if (pattern === 'MMMM' && typeof value === 'number') {\n          value = localize === null || localize === void 0 ? void 0 : localize.month(value - 1, {\n            width: 'wide'\n          });\n        } else if (pattern === 'aa') {\n          if (typeof hour === 'number') {\n            value = hour > 12 ? 'PM' : 'AM';\n          } else {\n            value = 'aa';\n          }\n        } else if (pattern === 'hh' && typeof value === 'number') {\n          value = value === 0 ? 12 : value > 12 ? value - 12 : value;\n        }\n        if (typeof value === 'number') {\n          value = padNumber(value, pattern.length);\n        }\n        if (typeof value !== 'undefined') {\n          str = str.replace(pattern, value);\n        }\n      }\n    });\n    return str;\n  };\n\n  // Check if the field value is valid.\n  var validFieldValue = function validFieldValue(type, value) {\n    var _format$match;\n    var isValid = true;\n    (_format$match = format.match(new RegExp('([y|d|M|H|h|m|s])+', 'ig'))) === null || _format$match === void 0 ? void 0 : _format$match.forEach(function (pattern) {\n      var key = patternMap[pattern[0]];\n      var fieldValue = type === key ? value : dateField[key];\n      if (fieldValue === null) {\n        isValid = false;\n        return;\n      }\n    });\n    return isValid;\n  };\n  var isEmptyValue = function isEmptyValue(type, value) {\n    var _format$match2;\n    var checkValueArray = (_format$match2 = format.match(new RegExp('([y|d|M|H|h|m|s])+', 'ig'))) === null || _format$match2 === void 0 ? void 0 : _format$match2.map(function (pattern) {\n      var key = patternMap[pattern[0]];\n      var fieldValue = type === key ? value : dateField[key];\n      return fieldValue !== null;\n    });\n    return checkValueArray === null || checkValueArray === void 0 ? void 0 : checkValueArray.every(function (item) {\n      return item === false;\n    });\n  };\n  var toDate = function toDate(type, value) {\n    var year = dateField.year,\n      month = dateField.month,\n      day = dateField.day,\n      hour = dateField.hour,\n      minute = dateField.minute,\n      second = dateField.second;\n    var date = new Date(year || 0, typeof month === 'number' ? Math.max(month - 1, 0) : 0,\n    // The default day is 1 when the value is null, otherwise it becomes the last day of the month.\n    day || 1, hour || 0, minute || 0, second || 0);\n    if (typeof type === 'undefined' || typeof value === 'undefined') {\n      return date;\n    }\n    if (value === null || !validFieldValue(type, value)) {\n      if (isEmptyValue(type, value)) {\n        return null;\n      }\n\n      // Invalid Date\n      return new Date('');\n    } else if ((type === 'day' || type === 'month') && value === 0) {\n      // Invalid Date. If the type is day and the value is 0, it is considered an invalid date.\n      return new Date('');\n    }\n    if (type === 'meridian' && typeof hour === 'number') {\n      var newHour = hour > 12 ? hour - 12 : hour + 12;\n      type = 'hour';\n      value = newHour;\n    }\n    return modifyDate(date, type, value);\n  };\n  return {\n    dateField: dateField,\n    dispatch: dispatch,\n    toDate: toDate,\n    toDateString: toDateString,\n    isEmptyValue: isEmptyValue\n  };\n};","map":null,"metadata":{},"sourceType":"module"}