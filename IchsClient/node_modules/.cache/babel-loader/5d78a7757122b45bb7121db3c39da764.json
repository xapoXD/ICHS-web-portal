{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject;\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"children\", \"maxItems\", \"separator\", \"locale\", \"onExpand\"];\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport BreadcrumbItem from \"./BreadcrumbItem.js\";\n/**\n * The Breadcrumb component is used to indicate the current page location and navigate.\n * @see https://rsuitejs.com/components/breadcrumb\n */\nvar Breadcrumb = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'nav' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'breadcrumb' : _props$classPrefix,\n    children = props.children,\n    _props$maxItems = props.maxItems,\n    maxItems = _props$maxItems === void 0 ? 5 : _props$maxItems,\n    _props$separator = props.separator,\n    separator = _props$separator === void 0 ? '/' : _props$separator,\n    overrideLocale = props.locale,\n    onExpand = props.onExpand,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _useState = useState(true),\n    ellipsis = _useState[0],\n    setEllipsis = _useState[1];\n  var _useCustom = useCustom('Breadcrumb', overrideLocale),\n    locale = _useCustom.locale;\n  var renderSeparator = function renderSeparator(key) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: \"breadcrumb-separator-\" + key,\n      \"aria-hidden\": true,\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"separator\"])))\n    }, separator);\n  };\n  var handleClickEllipsis = useCallback(function (event) {\n    setEllipsis(false);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(event);\n  }, [onExpand]);\n  var items = [];\n  var count = React.Children.count(children);\n  if (count) {\n    React.Children.forEach(children, function (item, index) {\n      items.push(item);\n      if (index < count - 1) {\n        items.push(renderSeparator(index));\n      }\n    });\n  }\n  var renderCollapseItems = function renderCollapseItems() {\n    if (count > maxItems && count > 2 && ellipsis) {\n      return [].concat(items.slice(0, 2), [[/*#__PURE__*/React.createElement(BreadcrumbItem, {\n        role: \"button\",\n        key: \"ellipsis\",\n        title: locale.expandText,\n        \"aria-label\": locale.expandText,\n        onClick: handleClickEllipsis\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"...\"))]], items.slice(items.length - 2, items.length));\n    }\n    return items;\n  };\n  var classes = merge(className, withClassPrefix());\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), renderCollapseItems());\n});\nBreadcrumb.Item = BreadcrumbItem;\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.propTypes = {\n  separator: PropTypes.node,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  maxItems: PropTypes.number,\n  onExpand: PropTypes.func\n};\nexport default Breadcrumb;","map":null,"metadata":{},"sourceType":"module"}