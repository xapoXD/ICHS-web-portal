{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"children\", \"classPrefix\", \"className\", \"placement\", \"shape\", \"autoplay\", \"autoplayInterval\", \"activeIndex\", \"defaultActiveIndex\", \"onSelect\", \"onSlideStart\", \"onSlideEnd\"];\nimport React, { useState, useMemo, useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { useClassNames, useCustom, useControlled, useUpdateEffect, useTimeout } from \"../internals/hooks/index.js\";\nimport { guid, ReactChildren, mergeRefs } from \"../internals/utils/index.js\";\n/**\n * The Carousel component is used to display a series of content.\n * @see https://rsuitejs.com/components/carousel\n */\nvar Carousel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _sliderStyles, _ref;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'carousel' : _props$classPrefix,\n    className = props.className,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottom' : _props$placement,\n    _props$shape = props.shape,\n    shape = _props$shape === void 0 ? 'dot' : _props$shape,\n    autoplay = props.autoplay,\n    _props$autoplayInterv = props.autoplayInterval,\n    autoplayInterval = _props$autoplayInterv === void 0 ? 4000 : _props$autoplayInterv,\n    activeIndexProp = props.activeIndex,\n    _props$defaultActiveI = props.defaultActiveIndex,\n    defaultActiveIndex = _props$defaultActiveI === void 0 ? 0 : _props$defaultActiveI,\n    onSelect = props.onSelect,\n    onSlideStart = props.onSlideStart,\n    onSlideEnd = props.onSlideEnd,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('Carousel'),\n    rtl = _useCustom.rtl;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var count = ReactChildren.count(children);\n  var labels = [];\n  var vertical = placement === 'left' || placement === 'right';\n  var lengthKey = vertical ? 'height' : 'width';\n  var _useControlled = useControlled(activeIndexProp, defaultActiveIndex),\n    activeIndex = _useControlled[0],\n    setActiveIndex = _useControlled[1],\n    isControlled = _useControlled[2];\n  var _useState = useState(0),\n    lastIndex = _useState[0],\n    setLastIndex = _useState[1];\n  var rootRef = useRef(null);\n  useUpdateEffect(function () {\n    // When the index is controlled, the index is not updated when the number of children changes.\n    if (isControlled) {\n      return;\n    }\n    // Reset the index when the number of children changes.\n    setActiveIndex(0);\n  }, [children, isControlled]);\n\n  // Set a timer for automatic playback.\n  // `autoplay` needs to be cast to boolean type to avoid undefined parameters.\n  var _useTimeout = useTimeout(function () {\n      return handleSlide();\n    }, autoplayInterval, !!autoplay && count > 1),\n    clear = _useTimeout.clear,\n    reset = _useTimeout.reset;\n  var handleSlide = useCallback(function (nextActiveIndex, event) {\n    if (!rootRef.current) {\n      return;\n    }\n    clear();\n    var index = nextActiveIndex !== null && nextActiveIndex !== void 0 ? nextActiveIndex : activeIndex + 1;\n\n    // When index is greater than count, start from 1 again.\n    var nextIndex = index % count;\n    setActiveIndex(nextIndex);\n    onSlideStart === null || onSlideStart === void 0 ? void 0 : onSlideStart(nextIndex, event);\n    setLastIndex(nextActiveIndex == null ? activeIndex : nextIndex);\n    reset();\n  }, [activeIndex, count, setActiveIndex, clear, onSlideStart, reset]);\n  var handleChange = function handleChange(event) {\n    var activeIndex = +event.target.value;\n    handleSlide(activeIndex, event);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(activeIndex, event);\n  };\n  var handleTransitionEnd = useCallback(function (event) {\n    onSlideEnd === null || onSlideEnd === void 0 ? void 0 : onSlideEnd(activeIndex, event);\n  }, [activeIndex, onSlideEnd]);\n  var uniqueId = useMemo(function () {\n    return guid();\n  }, []);\n  var items = ReactChildren.map(children, function (child, index) {\n    var _extends2;\n    if (!child) {\n      return;\n    }\n    var inputKey = \"indicator_\" + uniqueId + \"_\" + index;\n    labels.push( /*#__PURE__*/React.createElement(\"li\", {\n      key: \"label\" + index,\n      className: prefix('label-wrapper')\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: inputKey,\n      id: inputKey,\n      type: \"radio\",\n      onChange: handleChange,\n      value: index,\n      checked: activeIndex === index\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: inputKey,\n      className: prefix('label')\n    })));\n    return /*#__PURE__*/React.cloneElement(child, {\n      key: \"slider-item\" + index,\n      'aria-hidden': activeIndex !== index,\n      style: _extends({}, child.props.style, (_extends2 = {}, _extends2[lengthKey] = 100 / count + \"%\", _extends2)),\n      className: classNames(prefix('slider-item'), child.props.className)\n    });\n  });\n  var classes = merge(className, withClassPrefix(\"placement-\" + placement, \"shape-\" + shape));\n  var positiveOrder = vertical || !rtl;\n  var sign = positiveOrder ? '-' : '';\n  var activeRatio = \"\" + sign + 100 / count * activeIndex + \"%\";\n  var sliderStyles = (_sliderStyles = {}, _sliderStyles[lengthKey] = count * 100 + \"%\", _sliderStyles.transform = vertical ? \"translate3d(0, \" + activeRatio + \" ,0)\" : \"translate3d(\" + activeRatio + \", 0 ,0)\", _sliderStyles);\n  var showMask = count > 1 && activeIndex === 0 && activeIndex !== lastIndex;\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: mergeRefs(ref, rootRef),\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content')\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('slider'),\n    style: sliderStyles,\n    onTransitionEnd: handleTransitionEnd\n  }, items), showMask && /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('slider-after', {\n      'slider-after-vertical': vertical\n    }),\n    style: (_ref = {}, _ref[lengthKey] = '200%', _ref)\n  }, [items[items.length - 1], items[0]].map(function (node) {\n    var _extends3;\n    return /*#__PURE__*/React.cloneElement(node, {\n      key: node.key,\n      style: _extends({}, node.props.style, (_extends3 = {}, _extends3[lengthKey] = '50%', _extends3))\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('toolbar')\n  }, /*#__PURE__*/React.createElement(\"ul\", null, labels)));\n});\nCarousel.displayName = 'Carousel';\nCarousel.propTypes = {\n  as: PropTypes.elementType,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  activeIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  autoplay: PropTypes.bool,\n  autoplayInterval: PropTypes.number,\n  placement: oneOf(['top', 'bottom', 'left', 'right']),\n  shape: oneOf(['dot', 'bar']),\n  onSelect: PropTypes.func,\n  onSlideStart: PropTypes.func,\n  onSlideEnd: PropTypes.func\n};\nexport default Carousel;","map":null,"metadata":{},"sourceType":"module"}