{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"classPrefix\", \"width\", \"left\", \"headerHeight\", \"depth\", \"height\", \"style\", \"className\", \"fullText\", \"firstColumn\", \"lastColumn\", \"isHeaderCell\", \"align\", \"children\", \"rowData\", \"dataKey\", \"rowIndex\", \"removed\", \"rowKey\", \"rowSpan\", \"wordWrap\", \"verticalAlign\", \"expanded\", \"treeCol\", \"hasChildren\", \"predefinedStyle\", \"renderCell\", \"renderTreeToggle\", \"onClick\", \"onTreeToggle\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { LAYER_WIDTH, ROW_HEADER_HEIGHT, ROW_HEIGHT } from './constants';\nimport { useClassNames, convertToFlex } from './utils';\nimport TableContext from './TableContext';\nimport ArrowRight from '@rsuite/icons/ArrowRight';\nimport ArrowDown from '@rsuite/icons/ArrowDown';\nimport { columnHandledProps } from './Column';\nvar groupKeys = ['groupCount', 'groupHeader', 'groupHeaderHeight', 'groupAlign', 'groupVerticalAlign', 'renderSortIcon'];\nvar Cell = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _extends2, _extends3;\n  var _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'cell' : _props$classPrefix,\n    _props$width = props.width,\n    width = _props$width === void 0 ? 0 : _props$width,\n    _props$left = props.left,\n    left = _props$left === void 0 ? 0 : _props$left,\n    _props$headerHeight = props.headerHeight,\n    headerHeight = _props$headerHeight === void 0 ? ROW_HEADER_HEIGHT : _props$headerHeight,\n    _props$depth = props.depth,\n    depth = _props$depth === void 0 ? 0 : _props$depth,\n    _props$height = props.height,\n    height = _props$height === void 0 ? ROW_HEIGHT : _props$height,\n    style = props.style,\n    className = props.className,\n    fullText = props.fullText,\n    firstColumn = props.firstColumn,\n    lastColumn = props.lastColumn,\n    isHeaderCell = props.isHeaderCell,\n    align = props.align,\n    children = props.children,\n    rowData = props.rowData,\n    dataKey = props.dataKey,\n    rowIndex = props.rowIndex,\n    removed = props.removed,\n    rowKey = props.rowKey,\n    rowSpan = props.rowSpan,\n    wordWrap = props.wordWrap,\n    verticalAlign = props.verticalAlign,\n    expanded = props.expanded,\n    treeCol = props.treeCol,\n    hasChildren = props.hasChildren,\n    predefinedStyle = props.predefinedStyle,\n    renderCell = props.renderCell,\n    renderTreeToggle = props.renderTreeToggle,\n    onClick = props.onClick,\n    onTreeToggle = props.onTreeToggle,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _React$useContext = React.useContext(TableContext),\n    rtl = _React$useContext.rtl,\n    hasCustomTreeCol = _React$useContext.hasCustomTreeCol,\n    isTree = _React$useContext.isTree;\n  var isTreeCol = treeCol || !hasCustomTreeCol && firstColumn && isTree;\n  var cellHeight = typeof height === 'function' ? rowData ? height(rowData) : ROW_HEIGHT : height;\n  if (isTreeCol && !isHeaderCell && !rowData) {\n    throw new Error('[Table.Cell]: `rowData` is required for tree column');\n  }\n  var handleTreeToggle = useCallback(function (event) {\n    onTreeToggle === null || onTreeToggle === void 0 ? void 0 : onTreeToggle(rowKey, rowIndex, rowData, event);\n  }, [onTreeToggle, rowData, rowIndex, rowKey]);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix({\n    expanded: expanded && isTreeCol,\n    first: firstColumn,\n    last: lastColumn,\n    rowspan: rowSpan && !isHeaderCell,\n    'full-text': fullText\n  }));\n  var nextHeight = isHeaderCell ? headerHeight : cellHeight;\n  var styles = _extends({}, predefinedStyle, (_extends2 = {}, _extends2[fullText ? 'minWidth' : 'width'] = width, _extends2.height = nextHeight, _extends2.zIndex = depth, _extends2[rtl ? 'right' : 'left'] = left, _extends2));\n  var paddingKey = rtl ? 'paddingRight' : 'paddingLeft';\n  var contentStyles = _extends({}, convertToFlex({\n    align: align,\n    verticalAlign: verticalAlign\n  }), style, (_extends3 = {\n    width: fullText ? width - 1 : width,\n    height: nextHeight\n  }, _extends3[paddingKey] = isTreeCol ? depth * LAYER_WIDTH + 10 : (style === null || style === void 0 ? void 0 : style[paddingKey]) || (style === null || style === void 0 ? void 0 : style.padding), _extends3));\n  if (wordWrap) {\n    contentStyles.wordBreak = typeof wordWrap === 'boolean' ? 'break-all' : wordWrap;\n    contentStyles.overflowWrap = wordWrap === 'break-word' ? wordWrap : undefined;\n  }\n  var cellContent = null;\n  if (typeof children === 'function') {\n    if (!rowData) {\n      cellContent = null;\n    } else {\n      cellContent = children(rowData, rowIndex);\n    }\n  } else if (isNil(children)) {\n    if (rowData && dataKey) {\n      cellContent = get(rowData, dataKey);\n    }\n  } else {\n    cellContent = children;\n  }\n  var renderTreeNodeExpandIcon = function renderTreeNodeExpandIcon() {\n    var ExpandIconComponent = expanded ? ArrowDown : ArrowRight;\n    var expandButton = /*#__PURE__*/React.createElement(ExpandIconComponent, {\n      className: prefix('expand-icon')\n    });\n    if (isTreeCol && hasChildren) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"button\",\n        tabIndex: -1,\n        className: prefix('expand-wrapper'),\n        onClick: handleTreeToggle\n      }, renderTreeToggle ? renderTreeToggle(expandButton, rowData, expanded) : expandButton);\n    }\n    return null;\n  };\n  var content = wordWrap ? /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('wrap')\n  }, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent) : /*#__PURE__*/React.createElement(React.Fragment, null, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent);\n  if (removed) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    role: isHeaderCell ? 'columnheader' : 'gridcell'\n  }, omit(rest, [].concat(groupKeys, columnHandledProps)), {\n    onClick: onClick,\n    className: classes,\n    style: styles\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content'),\n    style: contentStyles\n  }, content));\n});\nCell.displayName = 'Table.Cell';\nCell.propTypes = {\n  align: PropTypes.string,\n  verticalAlign: PropTypes.string,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  dataKey: PropTypes.string,\n  isHeaderCell: PropTypes.bool,\n  width: PropTypes.number,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  left: PropTypes.number,\n  headerHeight: PropTypes.number,\n  style: PropTypes.object,\n  firstColumn: PropTypes.bool,\n  lastColumn: PropTypes.bool,\n  hasChildren: PropTypes.bool,\n  children: PropTypes.any,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  rowIndex: PropTypes.number,\n  rowData: PropTypes.object,\n  depth: PropTypes.number,\n  onTreeToggle: PropTypes.func,\n  renderTreeToggle: PropTypes.func,\n  renderCell: PropTypes.func,\n  wordWrap: PropTypes.any,\n  removed: PropTypes.bool,\n  treeCol: PropTypes.bool,\n  expanded: PropTypes.bool,\n  fullText: PropTypes.bool\n};\nexport default Cell;","map":null,"metadata":{},"sourceType":"module"}