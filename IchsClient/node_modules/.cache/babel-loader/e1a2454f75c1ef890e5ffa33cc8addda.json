{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject;\nvar _excluded = [\"active\", \"as\", \"classPrefix\", \"children\", \"caret\", \"className\", \"disabled\", \"readOnly\", \"plaintext\", \"hasValue\", \"loading\", \"cleanable\", \"tabIndex\", \"inputValue\", \"focusItemValue\", \"onClean\", \"placement\", \"caretComponent\", \"caretAs\", \"label\", \"name\"];\nimport React, { useRef, useMemo } from 'react';\nimport ToggleButton from \"./ToggleButton.js\";\nimport { useClassNames, useEventCallback, useToggleCaret } from \"../hooks/index.js\";\nimport { mergeRefs } from \"../utils/index.js\";\nimport Plaintext from \"../Plaintext/index.js\";\nimport Stack from \"../../Stack/index.js\";\nimport PickerIndicator from \"./PickerIndicator.js\";\nimport PickerLabel from \"./PickerLabel.js\";\nimport useCombobox from \"./hooks/useCombobox.js\";\nvar PickerToggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var active = props.active,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? ToggleButton : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker-toggle' : _props$classPrefix,\n    children = props.children,\n    _props$caret = props.caret,\n    caret = _props$caret === void 0 ? true : _props$caret,\n    className = props.className,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    hasValue = props.hasValue,\n    _props$loading = props.loading,\n    loading = _props$loading === void 0 ? false : _props$loading,\n    cleanable = props.cleanable,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n    inputValueProp = props.inputValue,\n    focusItemValue = props.focusItemValue,\n    onClean = props.onClean,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    caretComponent = props.caretComponent,\n    _props$caretAs = props.caretAs,\n    caretAs = _props$caretAs === void 0 ? caretComponent : _props$caretAs,\n    label = props.label,\n    name = props.name,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var combobox = useRef(null);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var _useCombobox = useCombobox(),\n    id = _useCombobox.id,\n    labelId = _useCombobox.labelId,\n    popupType = _useCombobox.popupType;\n  var inputValue = useMemo(function () {\n    if (typeof inputValueProp === 'number' || typeof inputValueProp === 'string') {\n      return inputValueProp;\n    } else if (Array.isArray(inputValueProp)) {\n      return inputValueProp.join(',');\n    }\n    return '';\n  }, [inputValueProp]);\n  var classes = merge(className, withClassPrefix({\n    active: active\n  }));\n  var handleClean = useEventCallback(function (event) {\n    var _combobox$current;\n    event.stopPropagation();\n    onClean === null || onClean === void 0 ? void 0 : onClean(event);\n    (_combobox$current = combobox.current) === null || _combobox$current === void 0 ? void 0 : _combobox$current.focus();\n  });\n  var ToggleCaret = useToggleCaret(placement);\n  var Caret = caretAs !== null && caretAs !== void 0 ? caretAs : ToggleCaret;\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"notSelected\"\n    }, hasValue ? children : null);\n  }\n  var showCleanButton = cleanable && hasValue && !readOnly;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"combobox\",\n    id: id,\n    \"aria-haspopup\": popupType,\n    \"aria-expanded\": active,\n    \"aria-disabled\": disabled,\n    \"aria-controls\": id + \"-\" + popupType,\n    \"aria-labelledby\": labelId,\n    \"aria-describedby\": id + \"-describe\",\n    \"aria-activedescendant\": active && focusItemValue ? id + \"-opt-\" + focusItemValue : undefined\n  }, rest, {\n    ref: mergeRefs(combobox, ref),\n    disabled: disabled,\n    tabIndex: disabled ? undefined : tabIndex,\n    className: classes\n  }), /*#__PURE__*/React.createElement(Stack, null, label && /*#__PURE__*/React.createElement(Stack.Item, null, /*#__PURE__*/React.createElement(PickerLabel, {\n    as: \"span\",\n    className: prefix('label'),\n    id: labelId\n  }, label)), /*#__PURE__*/React.createElement(Stack.Item, {\n    grow: 1,\n    style: {\n      overflow: 'hidden'\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    readOnly: true,\n    \"aria-hidden\": true,\n    tabIndex: -1,\n    \"data-testid\": \"picker-toggle-input\",\n    name: name,\n    value: inputValue,\n    className: prefix('textbox', 'read-only'),\n    style: {\n      pointerEvents: 'none'\n    }\n  }), children ? /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(hasValue ? 'value' : 'placeholder'),\n    id: id + \"-describe\",\n    \"data-testid\": \"picker-describe\"\n  }, children) : null), /*#__PURE__*/React.createElement(Stack.Item, {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"indicator\"])))\n  }, /*#__PURE__*/React.createElement(PickerIndicator, {\n    as: React.Fragment,\n    loading: loading,\n    caretAs: caret ? Caret : null,\n    onClose: handleClean,\n    showCleanButton: showCleanButton\n  }))));\n});\nPickerToggle.displayName = 'PickerToggle';\nexport default PickerToggle;","map":null,"metadata":{},"sourceType":"module"}