{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"value\", \"data\", \"defaultValue\", \"defaultExpandAll\", \"defaultExpandItemValues\", \"uncheckableItemValues\", \"expandItemValues\", \"childrenKey\", \"labelKey\", \"valueKey\", \"virtualized\", \"cascade\", \"scrollShadow\", \"renderTreeIcon\", \"renderTreeNode\", \"getChildren\", \"onExpand\", \"onChange\"];\nimport React, { useMemo } from 'react';\nimport { useEventCallback } from \"../internals/hooks/index.js\";\nimport useTreeValue from \"./hooks/useTreeValue.js\";\nimport CheckTreeView from \"./CheckTreeView.js\";\nimport useFlattenTree from \"../Tree/hooks/useFlattenTree.js\";\nimport useTreeWithChildren from \"../Tree/hooks/useTreeWithChildren.js\";\nimport useExpandTree from \"../Tree/hooks/useExpandTree.js\";\nimport { TreeProvider } from \"../internals/Tree/TreeProvider.js\";\n/**\n * The `CheckTree` component is used for selecting multiple options which are organized in a tree structure.\n * @see https://rsuitejs.com/components/check-tree\n */\nvar CheckTree = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var controlledValue = props.value,\n    data = props.data,\n    defaultValue = props.defaultValue,\n    _props$defaultExpandA = props.defaultExpandAll,\n    defaultExpandAll = _props$defaultExpandA === void 0 ? false : _props$defaultExpandA,\n    _props$defaultExpandI = props.defaultExpandItemValues,\n    defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI,\n    uncheckableItemValues = props.uncheckableItemValues,\n    controlledExpandItemValues = props.expandItemValues,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    virtualized = props.virtualized,\n    _props$cascade = props.cascade,\n    cascade = _props$cascade === void 0 ? true : _props$cascade,\n    scrollShadow = props.scrollShadow,\n    renderTreeIcon = props.renderTreeIcon,\n    renderTreeNode = props.renderTreeNode,\n    getChildren = props.getChildren,\n    onExpand = props.onExpand,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useTreeValue = useTreeValue(controlledValue, {\n      defaultValue: defaultValue,\n      uncheckableItemValues: uncheckableItemValues\n    }),\n    value = _useTreeValue[0],\n    setValue = _useTreeValue[1];\n  var itemDataKeys = {\n    childrenKey: childrenKey,\n    labelKey: labelKey,\n    valueKey: valueKey\n  };\n  var _useTreeWithChildren = useTreeWithChildren(data, itemDataKeys),\n    treeData = _useTreeWithChildren.treeData,\n    loadingNodeValues = _useTreeWithChildren.loadingNodeValues,\n    appendChild = _useTreeWithChildren.appendChild;\n  var _useExpandTree = useExpandTree(data, _extends({}, itemDataKeys, {\n      defaultExpandAll: defaultExpandAll,\n      defaultExpandItemValues: defaultExpandItemValues,\n      controlledExpandItemValues: controlledExpandItemValues,\n      onExpand: onExpand,\n      getChildren: getChildren,\n      appendChild: appendChild\n    })),\n    expandItemValues = _useExpandTree.expandItemValues,\n    handleExpandTreeNode = _useExpandTree.handleExpandTreeNode;\n  var flattenedNodes = useFlattenTree(treeData, _extends({}, itemDataKeys, {\n    uncheckableItemValues: uncheckableItemValues,\n    multiple: true,\n    cascade: cascade,\n    value: value\n  }));\n  var handleChange = useEventCallback(function (nextValue, event) {\n    setValue(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n  });\n  var treeContext = useMemo(function () {\n    return {\n      props: {\n        labelKey: labelKey,\n        valueKey: valueKey,\n        childrenKey: childrenKey,\n        virtualized: virtualized,\n        scrollShadow: scrollShadow,\n        renderTreeIcon: renderTreeIcon,\n        renderTreeNode: renderTreeNode\n      }\n    };\n  }, [childrenKey, labelKey, valueKey, virtualized, scrollShadow, renderTreeIcon, renderTreeNode]);\n  return /*#__PURE__*/React.createElement(TreeProvider, {\n    value: treeContext\n  }, /*#__PURE__*/React.createElement(CheckTreeView, _extends({}, rest, {\n    ref: ref,\n    value: value,\n    cascade: cascade,\n    data: treeData,\n    loadingNodeValues: loadingNodeValues,\n    flattenedNodes: flattenedNodes,\n    uncheckableItemValues: uncheckableItemValues,\n    expandItemValues: expandItemValues,\n    onChange: handleChange,\n    onExpand: handleExpandTreeNode\n  })));\n});\nCheckTree.displayName = 'CheckTree';\nexport default CheckTree;","map":null,"metadata":{},"sourceType":"module"}