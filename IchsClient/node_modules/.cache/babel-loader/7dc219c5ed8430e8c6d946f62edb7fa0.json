{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nvar _excluded = [\"as\", \"appearance\", \"cleanable\", \"cacheData\", \"classPrefix\", \"data\", \"disabled\", \"readOnly\", \"plaintext\", \"defaultValue\", \"defaultOpen\", \"disabledItemValues\", \"locale\", \"toggleAs\", \"style\", \"size\", \"searchable\", \"open\", \"placeholder\", \"placement\", \"groupBy\", \"menuClassName\", \"menuStyle\", \"menuAutoWidth\", \"menuMaxHeight\", \"creatable\", \"shouldDisplayCreateOption\", \"value\", \"valueKey\", \"virtualized\", \"labelKey\", \"listProps\", \"id\", \"tabIndex\", \"sort\", \"renderMenu\", \"renderExtraFooter\", \"renderValue\", \"renderMenuItem\", \"renderMenuGroup\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\", \"onChange\", \"onClean\", \"onCreate\", \"onSearch\", \"onSelect\", \"onBlur\", \"onFocus\", \"searchBy\"],\n  _excluded2 = [\"closable\", \"onClose\"];\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport isFunction from 'lodash/isFunction';\nimport remove from 'lodash/remove';\nimport clone from 'lodash/clone';\nimport isArray from 'lodash/isArray';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { shallowEqual, getDataGroupBy } from \"../internals/utils/index.js\";\nimport { filterNodesOfTree } from \"../internals/Tree/utils/index.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nimport { useClassNames, useCustom, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { KEY_VALUES } from \"../internals/constants/index.js\";\nimport { createChainedFunction, tplTransform, mergeRefs, isOneOf } from \"../internals/utils/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { Listbox, ListItem, ListCheckItem, PickerToggle, PickerPopup, PickerToggleTrigger, useFocusItemValue, usePickerClassName, useSearch, usePickerRef, useToggleKeyDownEvent, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from \"../internals/Picker/index.js\";\nimport Tag from \"../Tag/index.js\";\nimport TextBox from \"./TextBox.js\";\nimport { useTagContext } from \"./InputPickerContext.js\";\nimport Stack from \"../Stack/index.js\";\nimport useInput from \"./hooks/useInput.js\";\nimport useData from \"./hooks/useData.js\";\nimport { convertSize } from \"./utils.js\";\n/**\n * Single item selector with text box input.\n *\n * @see https://rsuitejs.com/components/input-picker\n */\nvar InputPicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _merge;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    _props$cacheData = props.cacheData,\n    cacheData = _props$cacheData === void 0 ? [] : _props$cacheData,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n    _props$data = props.data,\n    controlledData = _props$data === void 0 ? [] : _props$data,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    defaultValue = props.defaultValue,\n    _props$defaultOpen = props.defaultOpen,\n    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    overrideLocale = props.locale,\n    toggleAs = props.toggleAs,\n    style = props.style,\n    size = props.size,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? true : _props$searchable,\n    controlledOpen = props.open,\n    placeholder = props.placeholder,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    groupBy = props.groupBy,\n    menuClassName = props.menuClassName,\n    menuStyle = props.menuStyle,\n    _props$menuAutoWidth = props.menuAutoWidth,\n    menuAutoWidth = _props$menuAutoWidth === void 0 ? true : _props$menuAutoWidth,\n    _props$menuMaxHeight = props.menuMaxHeight,\n    menuMaxHeight = _props$menuMaxHeight === void 0 ? 320 : _props$menuMaxHeight,\n    creatable = props.creatable,\n    shouldDisplayCreateOption = props.shouldDisplayCreateOption,\n    valueProp = props.value,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    virtualized = props.virtualized,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    listProps = props.listProps,\n    id = props.id,\n    tabIndex = props.tabIndex,\n    sort = props.sort,\n    renderMenu = props.renderMenu,\n    renderExtraFooter = props.renderExtraFooter,\n    renderValue = props.renderValue,\n    renderMenuItem = props.renderMenuItem,\n    renderMenuGroup = props.renderMenuGroup,\n    onEnter = props.onEnter,\n    onEntered = props.onEntered,\n    onExit = props.onExit,\n    onExited = props.onExited,\n    onChange = props.onChange,\n    onClean = props.onClean,\n    onCreate = props.onCreate,\n    onSearch = props.onSearch,\n    onSelect = props.onSelect,\n    onBlur = props.onBlur,\n    onFocus = props.onFocus,\n    searchBy = props.searchBy,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useTagContext = useTagContext(),\n    multi = _useTagContext.multi,\n    tagProps = _useTagContext.tagProps,\n    trigger = _useTagContext.trigger,\n    disabledOptions = _useTagContext.disabledOptions,\n    onTagRemove = _useTagContext.onTagRemove,\n    renderCheckbox = _useTagContext.renderCheckbox;\n  if (groupBy === valueKey || groupBy === labelKey) {\n    throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n  }\n  var _usePickerRef = usePickerRef(ref),\n    triggerRef = _usePickerRef.trigger,\n    root = _usePickerRef.root,\n    target = _usePickerRef.target,\n    overlay = _usePickerRef.overlay,\n    list = _usePickerRef.list;\n  var _useCustom = useCustom(['Picker', 'InputPicker'], overrideLocale),\n    locale = _useCustom.locale;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var _useControlled = useControlled(controlledOpen, defaultOpen),\n    open = _useControlled[0],\n    setOpen = _useControlled[1];\n  var _useInput = useInput({\n      multi: multi,\n      triggerRef: triggerRef\n    }),\n    inputRef = _useInput.inputRef,\n    inputProps = _useInput.inputProps,\n    focus = _useInput.focus,\n    blur = _useInput.blur;\n  var handleDataChange = function handleDataChange(data) {\n    var _data$;\n    setFocusItemValue(data === null || data === void 0 ? void 0 : (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$[valueKey]);\n  };\n  var _useData = useData({\n      controlledData: controlledData,\n      cacheData: cacheData,\n      onChange: handleDataChange\n    }),\n    data = _useData.data,\n    dataWithCache = _useData.dataWithCache,\n    newData = _useData.newData,\n    setNewData = _useData.setNewData;\n  var _useControlled2 = useControlled(valueProp, multi ? defaultValue || [] : defaultValue),\n    value = _useControlled2[0],\n    setValue = _useControlled2[1],\n    isControlled = _useControlled2[2];\n  var cloneValue = function cloneValue() {\n    return multi ? clone(value) || [] : value;\n  };\n  var handleClose = useEventCallback(function () {\n    var _triggerRef$current, _target$current, _target$current$focus;\n    triggerRef === null || triggerRef === void 0 ? void 0 : (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.close();\n\n    // The focus is on the trigger button after closing\n    (_target$current = target.current) === null || _target$current === void 0 ? void 0 : (_target$current$focus = _target$current.focus) === null || _target$current$focus === void 0 ? void 0 : _target$current$focus.call(_target$current);\n  });\n  var focusItemValueOptions = {\n    data: dataWithCache,\n    valueKey: valueKey,\n    target: function target() {\n      return overlay.current;\n    }\n  };\n\n  // Used to hover the focuse item  when trigger `onKeydown`\n  var _useFocusItemValue = useFocusItemValue(multi ? value === null || value === void 0 ? void 0 : value[0] : value, focusItemValueOptions),\n    focusItemValue = _useFocusItemValue.focusItemValue,\n    setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n    onKeyDown = _useFocusItemValue.onKeyDown;\n  var onSearchCallback = useEventCallback(function (searchKeyword, filteredData, event) {\n    if (!disabledOptions) {\n      var _filteredData$;\n      // The first option after filtering is the focus.\n      var firstItemValue = filteredData === null || filteredData === void 0 ? void 0 : (_filteredData$ = filteredData[0]) === null || _filteredData$ === void 0 ? void 0 : _filteredData$[valueKey];\n\n      // If there is no value in the option and new options are supported, the search keyword is the first option\n      if (!firstItemValue && creatable) {\n        firstItemValue = searchKeyword;\n      }\n      setFocusItemValue(firstItemValue);\n    }\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n  });\n  var searchOptions = {\n    labelKey: labelKey,\n    searchBy: searchBy,\n    callback: onSearchCallback\n  };\n\n  // Use search keywords to filter options.\n  var _useSearch = useSearch(data, searchOptions),\n    searchKeyword = _useSearch.searchKeyword,\n    resetSearch = _useSearch.resetSearch,\n    checkShouldDisplay = _useSearch.checkShouldDisplay,\n    handleSearch = _useSearch.handleSearch;\n\n  // Update the position of the menu when the search keyword and value change\n  useEffect(function () {\n    var _triggerRef$current2, _triggerRef$current2$;\n    (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : (_triggerRef$current2$ = _triggerRef$current2.updatePosition) === null || _triggerRef$current2$ === void 0 ? void 0 : _triggerRef$current2$.call(_triggerRef$current2);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchKeyword, value]);\n  var getDataItem = function getDataItem(value) {\n    // Find active `MenuItem` by `value`\n    var activeItem = dataWithCache.find(function (item) {\n      return shallowEqual(item[valueKey], value);\n    });\n    var itemNode = placeholder;\n    if (activeItem !== null && activeItem !== void 0 && activeItem[labelKey]) {\n      itemNode = activeItem === null || activeItem === void 0 ? void 0 : activeItem[labelKey];\n    }\n    return {\n      isValid: !!activeItem,\n      activeItem: activeItem,\n      itemNode: itemNode\n    };\n  };\n\n  /**\n   * Convert the string of the newly created option into an object.\n   */\n  var createOption = function createOption(value) {\n    var _option;\n    var option = (_option = {\n      create: true\n    }, _option[valueKey] = value, _option[labelKey] = value, _option);\n    if (groupBy) {\n      var _extends2;\n      return _extends((_extends2 = {}, _extends2[groupBy] = locale === null || locale === void 0 ? void 0 : locale.newItem, _extends2), option);\n    }\n    return option;\n  };\n  var handleChange = useEventCallback(function (value, event) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  });\n  var handleRemoveItemByTag = useEventCallback(function (tag, event) {\n    event.stopPropagation();\n    var val = cloneValue();\n    remove(val, function (itemVal) {\n      return shallowEqual(itemVal, tag);\n    });\n    setValue(val);\n    handleChange(val, event);\n    onTagRemove === null || onTagRemove === void 0 ? void 0 : onTagRemove(tag, event);\n  });\n  var handleSelect = useEventCallback(function (value, item, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, item, event);\n    if (creatable && item.create) {\n      delete item.create;\n      onCreate === null || onCreate === void 0 ? void 0 : onCreate(value, item, event);\n      setNewData(newData.concat(item));\n    }\n  });\n\n  /**\n   * Callback triggered by single selection\n   * @param value\n   * @param item\n   * @param event\n   */\n  var handleSelectItem = useEventCallback(function (value, item, event) {\n    setValue(value);\n    setFocusItemValue(value);\n    resetSearch();\n    handleSelect(value, item, event);\n    handleChange(value, event);\n    handleClose();\n  });\n\n  /**\n   * Callback triggered by multiple selection\n   * @param nextItemValue\n   * @param item\n   * @param event\n   * @param checked\n   */\n  var handleCheckTag = useEventCallback(function (nextItemValue, item, event, checked) {\n    var val = cloneValue();\n    if (checked) {\n      val.push(nextItemValue);\n    } else {\n      remove(val, function (itemVal) {\n        return shallowEqual(itemVal, nextItemValue);\n      });\n    }\n    setValue(val);\n    resetSearch();\n    setFocusItemValue(nextItemValue);\n    handleSelect(val, item, event);\n    handleChange(val, event);\n    focus();\n  });\n  var handleTagKeyPress = useEventCallback(function (event) {\n    // When composing, ignore the keypress event.\n    if (event.nativeEvent.isComposing) {\n      return;\n    }\n    var val = cloneValue();\n    var newItemValue = focusItemValue || '';\n\n    // In TagInput\n    if (multi && disabledOptions) {\n      newItemValue = searchKeyword;\n    }\n    if (!newItemValue || !data) {\n      return;\n    }\n\n    // If the value is disabled in this option, it is returned.\n    if (disabledItemValues !== null && disabledItemValues !== void 0 && disabledItemValues.some(function (item) {\n      return item === newItemValue;\n    })) {\n      return;\n    }\n    if (!val.some(function (v) {\n      return shallowEqual(v, newItemValue);\n    })) {\n      val.push(newItemValue);\n    } else if (!disabledOptions) {\n      remove(val, function (itemVal) {\n        return shallowEqual(itemVal, newItemValue);\n      });\n    }\n    var focusItem = data.find(function (item) {\n      return shallowEqual(item === null || item === void 0 ? void 0 : item[valueKey], newItemValue);\n    });\n    if (!focusItem) {\n      focusItem = createOption(newItemValue);\n    }\n    setValue(val);\n    resetSearch();\n    handleSelect(val, focusItem, event);\n    handleChange(val, event);\n  });\n  var handleMenuItemKeyPress = useEventCallback(function (event) {\n    if (!focusItemValue || !controlledData) {\n      return;\n    }\n\n    // If the value is disabled in this option, it is returned.\n    if (disabledItemValues !== null && disabledItemValues !== void 0 && disabledItemValues.some(function (item) {\n      return item === focusItemValue;\n    })) {\n      return;\n    }\n\n    // Find active `MenuItem` by `value`\n    var focusItem = data.find(function (item) {\n      return shallowEqual(item[valueKey], focusItemValue);\n    });\n\n    // FIXME Bad state flow\n    if (!focusItem && focusItemValue === searchKeyword) {\n      focusItem = createOption(searchKeyword);\n    }\n    setValue(focusItemValue);\n    resetSearch();\n    if (focusItem) {\n      handleSelect(focusItemValue, focusItem, event);\n    }\n    handleChange(focusItemValue, event);\n    handleClose();\n  });\n\n  /**\n   * Remove the last item, after pressing the back key on the keyboard.\n   * @param event\n   */\n  var removeLastItem = useEventCallback(function (event) {\n    var target = event === null || event === void 0 ? void 0 : event.target;\n    if ((target === null || target === void 0 ? void 0 : target.tagName) !== 'INPUT') {\n      focus();\n      return;\n    }\n    if ((target === null || target === void 0 ? void 0 : target.tagName) === 'INPUT' && target !== null && target !== void 0 && target.value) {\n      return;\n    }\n    var val = cloneValue();\n    val.pop();\n    setValue(val);\n    handleChange(val, event);\n  });\n  var handleClean = useEventCallback(function (event) {\n    if (disabled || searchKeyword !== '') {\n      return;\n    }\n    setValue(null);\n    setFocusItemValue(null);\n    resetSearch();\n    if (multi) {\n      handleChange([], event);\n    } else {\n      handleChange(null, event);\n    }\n    onClean === null || onClean === void 0 ? void 0 : onClean(event);\n  });\n  var events = {\n    onMenuPressBackspace: multi ? removeLastItem : handleClean,\n    onMenuKeyDown: onKeyDown,\n    onMenuPressEnter: undefined,\n    onKeyDown: undefined\n  };\n  var handleKeyPress = useEventCallback(function (event) {\n    // When typing a space, create a tag.\n    if (isOneOf('Space', trigger) && event.key === KEY_VALUES.SPACE) {\n      handleTagKeyPress(event);\n      event.preventDefault();\n    }\n\n    // When typing a comma, create a tag.\n    if (isOneOf('Comma', trigger) && event.key === KEY_VALUES.COMMA) {\n      handleTagKeyPress(event);\n      event.preventDefault();\n    }\n  });\n  if (multi) {\n    if (isOneOf('Enter', trigger)) {\n      events.onMenuPressEnter = handleTagKeyPress;\n    }\n    if (creatable) {\n      events.onKeyDown = handleKeyPress;\n    }\n  } else {\n    events.onMenuPressEnter = handleMenuItemKeyPress;\n  }\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    trigger: triggerRef,\n    target: target,\n    overlay: overlay\n  }, events, rest));\n  var handleExited = useEventCallback(function () {\n    setFocusItemValue(multi ? value === null || value === void 0 ? void 0 : value[0] : value);\n    resetSearch();\n  });\n  var handleFocus = useEventCallback(function (event) {\n    if (!readOnly) {\n      var _triggerRef$current3;\n      setOpen(true);\n      (_triggerRef$current3 = triggerRef.current) === null || _triggerRef$current3 === void 0 ? void 0 : _triggerRef$current3.open();\n    }\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n  });\n  var handleEnter = useEventCallback(function () {\n    focus();\n    setOpen(true);\n  });\n  var handleExit = useEventCallback(function () {\n    blur();\n    setOpen(false);\n  });\n  var renderListItem = function renderListItem(label, item) {\n    // 'Create option \"{0}\"' =>  Create option \"xxxxx\"\n    var newLabel = item.create ? /*#__PURE__*/React.createElement(\"span\", null, tplTransform(locale.createOption, label)) : label;\n    return renderMenuItem ? renderMenuItem(newLabel, item) : newLabel;\n  };\n  var checkValue = function checkValue() {\n    if (multi) {\n      return {\n        isValid: false,\n        itemNode: null\n      };\n    }\n    var dataItem = getDataItem(value);\n    var itemNode = dataItem.itemNode;\n    if (!isNil(value) && isFunction(renderValue)) {\n      itemNode = renderValue(value, dataItem.activeItem, itemNode);\n    }\n    return {\n      isValid: dataItem.isValid,\n      itemNode: itemNode\n    };\n  };\n  var renderMultiValue = function renderMultiValue() {\n    if (!multi) {\n      return null;\n    }\n    var _tagProps$closable = tagProps.closable,\n      closable = _tagProps$closable === void 0 ? true : _tagProps$closable,\n      onClose = tagProps.onClose,\n      tagRest = _objectWithoutPropertiesLoose(tagProps, _excluded2);\n    var tags = value || [];\n    var items = [];\n    var tagElements = tags.map(function (tag) {\n      var _getDataItem = getDataItem(tag),\n        isValid = _getDataItem.isValid,\n        itemNode = _getDataItem.itemNode,\n        activeItem = _getDataItem.activeItem;\n      items.push(activeItem);\n      if (!isValid) {\n        return null;\n      }\n      return /*#__PURE__*/React.createElement(Tag, _extends({\n        role: \"option\"\n      }, tagRest, {\n        key: tag,\n        size: convertSize(size),\n        closable: !disabled && closable && !readOnly && !plaintext,\n        title: typeof itemNode === 'string' ? itemNode : undefined,\n        onClose: createChainedFunction(handleRemoveItemByTag.bind(null, tag), onClose)\n      }), itemNode);\n    }).filter(function (item) {\n      return item !== null;\n    });\n    if ((tags.length > 0 || isControlled) && isFunction(renderValue)) {\n      return renderValue(value, items, tagElements);\n    }\n    return tagElements;\n  };\n  var renderPopup = function renderPopup(positionProps, speakerRef) {\n    var left = positionProps.left,\n      top = positionProps.top,\n      className = positionProps.className;\n    var menuClassPrefix = multi ? 'picker-check-menu' : 'picker-select-menu';\n    var classes = merge(className, menuClassName, prefix(multi ? 'check-menu' : 'select-menu'));\n    var styles = _extends({}, menuStyle, {\n      left: left,\n      top: top\n    });\n    var items = filterNodesOfTree(data, checkShouldDisplay);\n    if (creatable && (typeof shouldDisplayCreateOption === 'function' ? shouldDisplayCreateOption(searchKeyword, items) : searchKeyword && !items.find(function (item) {\n      return item[valueKey] === searchKeyword;\n    }))) {\n      items = [].concat(items, [createOption(searchKeyword)]);\n    }\n\n    // Create a tree structure data when set `groupBy`\n    if (groupBy) {\n      items = getDataGroupBy(items, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      items = items.sort(sort(false));\n    }\n    if (disabledOptions) {\n      return /*#__PURE__*/React.createElement(PickerPopup, {\n        ref: mergeRefs(overlay, speakerRef)\n      });\n    }\n    var menu = items.length ? /*#__PURE__*/React.createElement(Listbox, {\n      listProps: listProps,\n      listRef: list,\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      classPrefix: menuClassPrefix,\n      listItemClassPrefix: multi ? undefined : menuClassPrefix + \"-item\",\n      listItemAs: multi ? ListCheckItem : ListItem,\n      listItemProps: {\n        renderCheckbox: renderCheckbox\n      },\n      activeItemValues: multi ? value : [value],\n      focusItemValue: focusItemValue,\n      maxHeight: menuMaxHeight,\n      data: items,\n      query: searchKeyword,\n      groupBy: groupBy,\n      onSelect: multi ? handleCheckTag : handleSelectItem,\n      renderMenuGroup: renderMenuGroup,\n      renderMenuItem: renderListItem,\n      virtualized: virtualized\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"none\"])))\n    }, locale === null || locale === void 0 ? void 0 : locale.noResultsText);\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      target: triggerRef,\n      onKeyDown: onPickerKeyDown\n    }, renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n  var _checkValue = checkValue(),\n    isValid = _checkValue.isValid,\n    itemNode = _checkValue.itemNode;\n  var tagElements = renderMultiValue();\n\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   * 3.If renderValue returns null or undefined, hasValue is false.\n   */\n  var hasSingleValue = !isNil(value) && isFunction(renderValue) && !isNil(itemNode);\n  var hasMultiValue = isArray(value) && value.length > 0 && isFunction(renderValue) && !isNil(tagElements);\n  var hasValue = multi ? !!(tagElements !== null && tagElements !== void 0 && tagElements.length) || hasMultiValue : isValid || hasSingleValue;\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n      classPrefix: classPrefix,\n      appearance: appearance,\n      hasValue: hasValue,\n      name: 'input',\n      cleanable: cleanable\n    })),\n    pickerClasses = _usePickerClassName[0],\n    usedClassNamePropKeys = _usePickerClassName[1];\n  var classes = merge(pickerClasses, (_merge = {}, _merge[prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"tag\"])))] = multi, _merge[prefix((multi ? 'tag' : 'input') + \"-\" + size)] = size, _merge[prefix(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"focused\"])))] = open, _merge[prefix(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"disabled-options\"])))] = disabledOptions, _merge));\n  var searching = !!searchKeyword && open;\n  var editable = searchable && !disabled && !rest.loading;\n  if (plaintext) {\n    var plaintextProps = {};\n\n    // When multiple selection, the tag is displayed in a stack layout.\n    if (multi && hasValue) {\n      plaintextProps.as = Stack;\n      plaintextProps.spacing = 6;\n      plaintextProps.wrap = true;\n      plaintextProps.childrenRenderMode = 'clone';\n    }\n    return /*#__PURE__*/React.createElement(Plaintext, _extends({\n      localeKey: \"notSelected\",\n      ref: target\n    }, plaintextProps), itemNode || (tagElements !== null && tagElements !== void 0 && tagElements.length ? tagElements : null) || placeholder);\n  }\n  var placeholderNode = placeholder || (disabledOptions ? null : locale === null || locale === void 0 ? void 0 : locale.placeholder);\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    id: id,\n    multiple: multi,\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: triggerRef,\n    trigger: \"active\",\n    onEnter: createChainedFunction(handleEnter, onEnter),\n    onEntered: onEntered,\n    onExit: createChainedFunction(handleExit, onExit),\n    onExited: createChainedFunction(handleExited, onExited),\n    speaker: renderPopup,\n    placement: placement\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    onClick: focus,\n    onKeyDown: onPickerKeyDown,\n    ref: root\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    appearance: appearance,\n    readOnly: readOnly,\n    plaintext: plaintext,\n    ref: target,\n    as: toggleAs,\n    tabIndex: tabIndex,\n    onClean: handleClean,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: open,\n    disabled: disabled,\n    placement: placement,\n    inputValue: value,\n    focusItemValue: focusItemValue,\n    caret: !disabledOptions,\n    size: size\n  }), searching || multi && hasValue ? null : itemNode || placeholderNode), /*#__PURE__*/React.createElement(TextBox, {\n    showTagList: hasValue && multi,\n    inputRef: inputRef,\n    inputValue: open ? searchKeyword : '',\n    inputProps: inputProps,\n    tags: tagElements,\n    editable: editable,\n    readOnly: readOnly,\n    disabled: disabled,\n    multiple: multi,\n    onBlur: onBlur,\n    onFocus: handleFocus,\n    onChange: handleSearch\n  })));\n});\nInputPicker.displayName = 'InputPicker';\nInputPicker.propTypes = _extends({}, listPickerPropTypes, {\n  locale: PropTypes.any,\n  appearance: oneOf(['default', 'subtle']),\n  cacheData: PropTypes.array,\n  menuAutoWidth: PropTypes.bool,\n  menuMaxHeight: PropTypes.number,\n  searchable: PropTypes.bool,\n  creatable: PropTypes.bool,\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onCreate: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  virtualized: PropTypes.bool,\n  searchBy: PropTypes.func\n});\nexport default InputPicker;","map":null,"metadata":{},"sourceType":"module"}