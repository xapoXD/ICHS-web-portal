{"ast":null,"code":"'use client';\n\nimport isEmpty from 'lodash/isEmpty';\n/**\n * Handles the left arrow key press event for tree navigation.\n * If the focus item is expanded, it collapses it. If the focus item is not expanded and has a parent,\n * it moves the focus to the parent item.\n */\nexport function handleLeftArrow(props) {\n  var focusItem = props.focusItem,\n    expand = props.expand,\n    onExpand = props.onExpand,\n    onFocusItem = props.onFocusItem;\n  if (isEmpty(focusItem)) {\n    return;\n  }\n  if (expand) {\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(focusItem, expand);\n  } else if (focusItem !== null && focusItem !== void 0 && focusItem.parent) {\n    onFocusItem();\n  }\n}\n\n/**\n * Handles the right arrow key press event for tree navigation.\n * If the focused item has children and is collapsed, it expands the item.\n * If the focused item has children and is expanded, it moves the focus to the next sibling.\n * If the focused item does not have children, it does nothing.\n */\nexport function handleRightArrow(props) {\n  var focusItem = props.focusItem,\n    expand = props.expand,\n    childrenKey = props.childrenKey,\n    onExpand = props.onExpand,\n    onFocusItem = props.onFocusItem;\n  if (isEmpty(focusItem) || !Array.isArray(focusItem[childrenKey])) {\n    return;\n  }\n  if (!expand) {\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(focusItem, expand);\n  } else {\n    onFocusItem();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}