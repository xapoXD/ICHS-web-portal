{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"disabled\", \"allowReupload\", \"file\", \"classPrefix\", \"listType\", \"className\", \"removable\", \"maxPreviewFileSize\", \"locale\", \"renderFileInfo\", \"renderThumbnail\", \"onPreview\", \"onCancel\", \"onReupload\"];\nimport React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Attachment from '@rsuite/icons/legacy/Attachment';\nimport Reload from '@rsuite/icons/Reload';\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { previewFile } from \"./utils/previewFile.js\";\nimport CloseButton from \"../internals/CloseButton/index.js\";\n/**\n * Format display file size\n * @param size\n */\nexport var formatSize = function formatSize(size) {\n  if (size === void 0) {\n    size = 0;\n  }\n  var K = 1024;\n  var M = 1024 * 1024;\n  var G = 1024 * 1024 * 1024;\n  if (size > G) {\n    return (size / G).toFixed(2) + \"GB\";\n  }\n  if (size > M) {\n    return (size / M).toFixed(2) + \"MB\";\n  }\n  if (size > K) {\n    return (size / K).toFixed(2) + \"KB\";\n  }\n  return size + \"B\";\n};\nvar UploadFileItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    disabled = props.disabled,\n    _props$allowReupload = props.allowReupload,\n    allowReupload = _props$allowReupload === void 0 ? true : _props$allowReupload,\n    file = props.file,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'uploader-file-item' : _props$classPrefix,\n    _props$listType = props.listType,\n    listType = _props$listType === void 0 ? 'text' : _props$listType,\n    className = props.className,\n    _props$removable = props.removable,\n    removable = _props$removable === void 0 ? true : _props$removable,\n    _props$maxPreviewFile = props.maxPreviewFileSize,\n    maxPreviewFileSize = _props$maxPreviewFile === void 0 ? 1024 * 1024 * 5 : _props$maxPreviewFile,\n    locale = props.locale,\n    renderFileInfo = props.renderFileInfo,\n    renderThumbnail = props.renderThumbnail,\n    onPreview = props.onPreview,\n    onCancel = props.onCancel,\n    onReupload = props.onReupload,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix(listType, {\n    disabled: disabled,\n    'has-error': file.status === 'error'\n  }));\n  var _useState = useState(file.url ? file.url : null),\n    previewImage = _useState[0],\n    setPreviewImage = _useState[1];\n\n  /**\n   * Get thumbnail of image file\n   */\n  var getThumbnail = useCallback(function (callback) {\n    var _file$blobFile;\n    if (!~['picture-text', 'picture'].indexOf(listType)) {\n      return;\n    }\n\n    // The thumbnail file size cannot be larger than the preset value.\n    if (!file.blobFile || (file === null || file === void 0 ? void 0 : (_file$blobFile = file.blobFile) === null || _file$blobFile === void 0 ? void 0 : _file$blobFile.size) > maxPreviewFileSize) {\n      return;\n    }\n    previewFile(file.blobFile, callback);\n  }, [file, listType, maxPreviewFileSize]);\n  useEffect(function () {\n    if (!file.url) {\n      getThumbnail(function (previewImage) {\n        setPreviewImage(previewImage);\n      });\n    }\n  }, [file.url, getThumbnail]);\n  var handlePreview = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    onPreview === null || onPreview === void 0 ? void 0 : onPreview(file, event);\n  }, [disabled, file, onPreview]);\n  var handleRemove = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    onCancel === null || onCancel === void 0 ? void 0 : onCancel(file.fileKey, event);\n  }, [disabled, file.fileKey, onCancel]);\n  var handleReupload = useCallback(function (event) {\n    if (disabled) {\n      return;\n    }\n    onReupload === null || onReupload === void 0 ? void 0 : onReupload(file, event);\n  }, [disabled, file, onReupload]);\n\n  /**\n   * Rendering progress bar\n   */\n  var renderProgressBar = function renderProgressBar() {\n    var _file$progress = file.progress,\n      progress = _file$progress === void 0 ? 0 : _file$progress,\n      status = file.status;\n    var show = !disabled && status === 'uploading';\n    var visibility = show ? 'visible' : 'hidden';\n    var wrapStyle = {\n      visibility: visibility\n    };\n    var progressbarStyle = {\n      width: progress + \"%\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('progress'),\n      style: wrapStyle\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('progress-bar'),\n      style: progressbarStyle\n    }));\n  };\n  var renderPreview = function renderPreview() {\n    var thumbnail = previewImage ? /*#__PURE__*/React.createElement(\"img\", {\n      role: \"presentation\",\n      src: previewImage,\n      alt: file.name,\n      onClick: handlePreview,\n      \"aria-label\": \"Preview: \" + file.name\n    }) : /*#__PURE__*/React.createElement(Attachment, {\n      className: prefix('icon')\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('preview')\n    }, renderThumbnail ? renderThumbnail(file, thumbnail) : thumbnail);\n  };\n\n  /**\n   * Render the loading state.\n   */\n  var renderIcon = function renderIcon() {\n    var uploading = file.status === 'uploading';\n    var classes = prefix('icon-wrapper', {\n      'icon-loading': uploading\n    });\n    if (uploading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: prefix('icon'),\n        \"aria-label\": \"Uploading\"\n      }));\n    }\n    if (listType === 'picture' || listType === 'picture-text') {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes\n    }, /*#__PURE__*/React.createElement(Attachment, {\n      className: prefix('icon')\n    }));\n  };\n\n  /**\n   * Render the remove file button.\n   */\n  var renderRemoveButton = function renderRemoveButton() {\n    if (!removable) {\n      return null;\n    }\n    var closeLabel = 'Remove file';\n    if (locale !== null && locale !== void 0 && locale.removeFile) {\n      closeLabel = (locale === null || locale === void 0 ? void 0 : locale.removeFile) + (file !== null && file !== void 0 && file.name ? \": \" + (file === null || file === void 0 ? void 0 : file.name) : '');\n    }\n    return /*#__PURE__*/React.createElement(CloseButton, {\n      className: prefix('btn-remove'),\n      onClick: handleRemove,\n      tabIndex: -1,\n      locale: {\n        closeLabel: closeLabel\n      },\n      \"aria-hidden\": disabled\n    });\n  };\n\n  /**\n   * Render error messages.\n   */\n  var renderErrorStatus = function renderErrorStatus() {\n    if (file.status === 'error') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('status')\n      }, /*#__PURE__*/React.createElement(\"span\", null, locale === null || locale === void 0 ? void 0 : locale.error), allowReupload && /*#__PURE__*/React.createElement(\"a\", {\n        role: \"button\",\n        tabIndex: -1,\n        onClick: handleReupload,\n        \"aria-label\": \"Retry\"\n      }, /*#__PURE__*/React.createElement(Reload, {\n        className: prefix('icon-reupload')\n      })));\n    }\n    return null;\n  };\n\n  /**\n   * Render file size.\n   */\n  var renderFileSize = function renderFileSize() {\n    if (file.status !== 'error' && file.blobFile) {\n      var _file$blobFile2;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: prefix('size')\n      }, formatSize(file === null || file === void 0 ? void 0 : (_file$blobFile2 = file.blobFile) === null || _file$blobFile2 === void 0 ? void 0 : _file$blobFile2.size));\n    }\n    return null;\n  };\n\n  /**\n   * Render file panel\n   */\n  var renderFilePanel = function renderFilePanel() {\n    var fileElement = /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('title'),\n      tabIndex: -1,\n      onClick: handlePreview,\n      \"aria-label\": \"Preview: \" + file.name\n    }, file.name);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('panel')\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('content')\n    }, renderFileInfo ? renderFileInfo(file, fileElement) : fileElement, renderErrorStatus(), renderFileSize()));\n  };\n  if (listType === 'picture') {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n      ref: ref,\n      className: classes\n    }), renderIcon(), renderPreview(), renderErrorStatus(), renderRemoveButton());\n  }\n  if (listType === 'picture-text') {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n      ref: ref,\n      className: classes\n    }), renderIcon(), renderPreview(), renderFilePanel(), renderProgressBar(), renderRemoveButton());\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), renderIcon(), renderFilePanel(), renderProgressBar(), renderRemoveButton());\n});\nUploadFileItem.displayName = 'UploadFileItem';\nUploadFileItem.propTypes = {\n  locale: PropTypes.any,\n  file: PropTypes.object.isRequired,\n  listType: oneOf(['text', 'picture-text', 'picture']),\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  maxPreviewFileSize: PropTypes.number,\n  classPrefix: PropTypes.string,\n  removable: PropTypes.bool,\n  allowReupload: PropTypes.bool,\n  renderFileInfo: PropTypes.func,\n  renderThumbnail: PropTypes.func,\n  onCancel: PropTypes.func,\n  onPreview: PropTypes.func,\n  onReupload: PropTypes.func\n};\nexport default UploadFileItem;","map":null,"metadata":{},"sourceType":"module"}