{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"disabled\", \"selected\", \"date\", \"onSelect\", \"unSameMonth\", \"rangeStart\", \"rangeEnd\", \"inRange\"];\nimport React from 'react';\nimport partial from 'lodash/partial';\nimport { isSameDay, getDate } from \"../internals/utils/date/index.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\nimport { getAriaLabel } from \"./utils.js\";\nvar TableCell = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-table' : _props$classPrefix,\n    disabled = props.disabled,\n    selected = props.selected,\n    date = props.date,\n    onSelect = props.onSelect,\n    unSameMonth = props.unSameMonth,\n    rangeStart = props.rangeStart,\n    rangeEnd = props.rangeEnd,\n    inRange = props.inRange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    onMouseMove = _useCalendarContext.onMouseMove,\n    cellClassName = _useCalendarContext.cellClassName,\n    renderCell = _useCalendarContext.renderCell,\n    renderCellOnPicker = _useCalendarContext.renderCellOnPicker,\n    overrideLocale = _useCalendarContext.locale;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var _useCustom = useCustom('Calendar', overrideLocale),\n    locale = _useCustom.locale,\n    formatDate = _useCustom.formatDate;\n  var formatStr = locale.formattedDayPattern;\n  var ariaLabel = getAriaLabel(date, formatStr, formatDate);\n  var todayDate = new Date();\n  var isToday = isSameDay(date, todayDate);\n  var classes = merge(prefix('cell', {\n    'cell-un-same-month': unSameMonth,\n    'cell-is-today': isToday,\n    'cell-selected': selected,\n    'cell-selected-start': rangeStart,\n    'cell-selected-end': rangeEnd,\n    'cell-in-range': !unSameMonth && inRange,\n    'cell-disabled': disabled\n  }), cellClassName === null || cellClassName === void 0 ? void 0 : cellClassName(date));\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    role: \"gridcell\",\n    \"aria-label\": ariaLabel,\n    \"aria-selected\": selected || undefined,\n    \"aria-disabled\": disabled || undefined,\n    tabIndex: selected ? 0 : -1,\n    title: isToday ? ariaLabel + \" (\" + (locale === null || locale === void 0 ? void 0 : locale.today) + \")\" : ariaLabel,\n    className: classes,\n    onMouseEnter: !disabled && onMouseMove ? onMouseMove.bind(null, date) : undefined,\n    onClick: onSelect ? partial(onSelect, date, disabled) : undefined\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('cell-content')\n  }, renderCellOnPicker ? renderCellOnPicker(date) : /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('cell-day')\n  }, getDate(date)), renderCell === null || renderCell === void 0 ? void 0 : renderCell(date)));\n});\nTableCell.displayName = 'CalendarTableCell';\nexport default TableCell;","map":null,"metadata":{},"sourceType":"module"}