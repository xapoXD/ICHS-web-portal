{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"autoWidth\", \"className\", \"placement\", \"target\"];\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport omit from 'lodash/omit';\nimport addStyle from 'dom-lib/addStyle';\nimport getWidth from 'dom-lib/getWidth';\nimport { mergeRefs } from \"../utils/index.js\";\nimport { useElementResize, useClassNames, useEventCallback } from \"../hooks/index.js\";\nimport { getDOMNode } from \"../utils/index.js\";\nvar omitProps = ['placement', 'arrowOffsetLeft', 'arrowOffsetTop', 'positionLeft', 'positionTop', 'getPositionInstance', 'getToggleInstance', 'autoWidth'];\nvar resizePlacement = ['topStart', 'topEnd', 'leftEnd', 'rightEnd', 'auto', 'autoVerticalStart', 'autoVerticalEnd', 'autoHorizontalEnd'];\nvar PickerPopup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker-popup' : _props$classPrefix,\n    autoWidth = props.autoWidth,\n    className = props.className,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    target = props.target,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var overlayRef = useRef(null);\n  var handleResize = useEventCallback(function () {\n    var instance = target === null || target === void 0 ? void 0 : target.current;\n    if (instance && resizePlacement.includes(placement)) {\n      instance.updatePosition();\n    }\n  });\n  useElementResize(useCallback(function () {\n    return overlayRef.current;\n  }, []), handleResize);\n  useEffect(function () {\n    var toggle = target === null || target === void 0 ? void 0 : target.current;\n    if (autoWidth && toggle !== null && toggle !== void 0 && toggle.root) {\n      // Get the width value of the button,\n      // and then set it to the menu to make their width consistent.\n      var width = getWidth(getDOMNode(toggle.root));\n      if (overlayRef.current) {\n        addStyle(overlayRef.current, 'min-width', width + \"px\");\n      }\n    }\n  }, [autoWidth, target, overlayRef]);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    \"data-testid\": \"picker-popup\"\n  }, omit(rest, omitProps), {\n    ref: mergeRefs(overlayRef, ref),\n    className: classes\n  }));\n});\nPickerPopup.displayName = 'PickerPopup';\nexport default PickerPopup;","map":null,"metadata":{},"sourceType":"module"}