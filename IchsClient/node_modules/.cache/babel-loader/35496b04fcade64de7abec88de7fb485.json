{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"children\", \"transition\", \"dialogTransitionTimeout\", \"style\", \"className\", \"container\", \"animationProps\", \"containerClassName\", \"keyboard\", \"enforceFocus\", \"backdrop\", \"backdropTransitionTimeout\", \"backdropStyle\", \"backdropClassName\", \"open\", \"autoFocus\", \"onEsc\", \"onExit\", \"onExiting\", \"onExited\", \"onEnter\", \"onEntering\", \"onEntered\", \"onClose\", \"onOpen\"],\n  _excluded2 = [\"className\"];\nimport React, { useRef, useEffect, useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport contains from 'dom-lib/contains';\nimport on from 'dom-lib/on';\nimport { KEY_VALUES } from \"../constants/index.js\";\nimport { usePortal, useWillUnmount, useEventCallback } from \"../hooks/index.js\";\nimport { mergeRefs, createChainedFunction } from \"../utils/index.js\";\nimport ModalManager from \"./ModalManager.js\";\nimport Fade from \"../../Animation/Fade.js\";\nimport { animationPropTypes } from \"../../Animation/utils.js\";\nimport OverlayContext from \"./OverlayContext.js\";\nvar manager;\nfunction getManager() {\n  if (!manager) manager = new ModalManager();\n  return manager;\n}\nvar useModalManager = function useModalManager() {\n  var modalManager = getManager();\n  var modal = useRef({\n    dialog: null,\n    backdrop: null\n  });\n  return {\n    get dialog() {\n      var _modal$current;\n      return (_modal$current = modal.current) === null || _modal$current === void 0 ? void 0 : _modal$current.dialog;\n    },\n    add: function add(containerElement, containerClassName) {\n      return modalManager.add(modal.current, containerElement, containerClassName);\n    },\n    remove: function remove() {\n      return modalManager.remove(modal.current);\n    },\n    isTopModal: function isTopModal() {\n      return modalManager.isTopModal(modal.current);\n    },\n    setDialogRef: useCallback(function (ref) {\n      modal.current.dialog = ref;\n    }, []),\n    setBackdropRef: useCallback(function (ref) {\n      modal.current.backdrop = ref;\n    }, [])\n  };\n};\nvar Modal = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    children = props.children,\n    Transition = props.transition,\n    dialogTransitionTimeout = props.dialogTransitionTimeout,\n    style = props.style,\n    className = props.className,\n    container = props.container,\n    animationProps = props.animationProps,\n    containerClassName = props.containerClassName,\n    _props$keyboard = props.keyboard,\n    keyboard = _props$keyboard === void 0 ? true : _props$keyboard,\n    _props$enforceFocus = props.enforceFocus,\n    enforceFocus = _props$enforceFocus === void 0 ? true : _props$enforceFocus,\n    _props$backdrop = props.backdrop,\n    backdrop = _props$backdrop === void 0 ? true : _props$backdrop,\n    backdropTransitionTimeout = props.backdropTransitionTimeout,\n    backdropStyle = props.backdropStyle,\n    backdropClassName = props.backdropClassName,\n    open = props.open,\n    _props$autoFocus = props.autoFocus,\n    autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n    onEsc = props.onEsc,\n    onExit = props.onExit,\n    onExiting = props.onExiting,\n    onExited = props.onExited,\n    onEnter = props.onEnter,\n    onEntering = props.onEntering,\n    onEntered = props.onEntered,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useState = useState(!open),\n    exited = _useState[0],\n    setExited = _useState[1];\n  var _usePortal = usePortal({\n      container: container\n    }),\n    Portal = _usePortal.Portal,\n    containerElement = _usePortal.target;\n  var modal = useModalManager();\n  if (open) {\n    if (exited) setExited(false);\n  } else if (!Transition && !exited) {\n    setExited(true);\n  }\n  var mountModal = open || Transition && !exited;\n  var lastFocus = useRef(null);\n  var handleDocumentKeyDown = useEventCallback(function (event) {\n    if (keyboard && event.key === KEY_VALUES.ESC && modal.isTopModal()) {\n      onEsc === null || onEsc === void 0 ? void 0 : onEsc(event);\n      onClose === null || onClose === void 0 ? void 0 : onClose(event);\n    }\n  });\n  var restoreLastFocus = useCallback(function () {\n    if (lastFocus.current) {\n      var _lastFocus$current$fo, _lastFocus$current;\n      (_lastFocus$current$fo = (_lastFocus$current = lastFocus.current).focus) === null || _lastFocus$current$fo === void 0 ? void 0 : _lastFocus$current$fo.call(_lastFocus$current);\n      lastFocus.current = null;\n    }\n  }, []);\n\n  /**\n   * Determines if the currently focused element is inside the dialog,\n   * and if not, returns the focus to the dialog.\n   *\n   */\n  var handleFocusDialog = useEventCallback(function (onBeforeFocusCallback) {\n    var currentActiveElement = document.activeElement;\n    var dialog = modal.dialog;\n    if (dialog && currentActiveElement && !contains(dialog, currentActiveElement)) {\n      onBeforeFocusCallback === null || onBeforeFocusCallback === void 0 ? void 0 : onBeforeFocusCallback();\n      dialog.focus();\n    }\n  });\n  var handleEnforceFocus = useEventCallback(function () {\n    if (!enforceFocus || !modal.isTopModal()) {\n      return;\n    }\n    handleFocusDialog();\n  });\n  var documentKeyDownListener = useRef();\n  var documentFocusListener = useRef();\n  var handleOpen = useEventCallback(function () {\n    if (containerElement) {\n      modal.add(containerElement, containerClassName);\n    }\n    if (!documentKeyDownListener.current) {\n      documentKeyDownListener.current = on(document, 'keydown', handleDocumentKeyDown);\n    }\n    if (!documentFocusListener.current) {\n      documentFocusListener.current = on(document, 'focus', handleEnforceFocus, true);\n    }\n    if (autoFocus) {\n      handleFocusDialog(function () {\n        lastFocus.current = document.activeElement;\n      });\n    }\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n  });\n  var handleClose = useEventCallback(function () {\n    var _documentKeyDownListe, _documentFocusListene;\n    modal.remove();\n    (_documentKeyDownListe = documentKeyDownListener.current) === null || _documentKeyDownListe === void 0 ? void 0 : _documentKeyDownListe.off();\n    documentKeyDownListener.current = null;\n    (_documentFocusListene = documentFocusListener.current) === null || _documentFocusListene === void 0 ? void 0 : _documentFocusListene.off();\n    documentFocusListener.current = null;\n    restoreLastFocus();\n  });\n  useEffect(function () {\n    if (!open) {\n      return;\n    }\n    handleOpen();\n  }, [open, handleOpen]);\n  useEffect(function () {\n    if (!exited) {\n      return;\n    }\n    handleClose();\n  }, [exited, handleClose]);\n  useWillUnmount(function () {\n    handleClose();\n  });\n  var handleExited = useCallback(function () {\n    setExited(true);\n  }, []);\n  var contextValue = useMemo(function () {\n    return {\n      overlayContainer: function overlayContainer() {\n        return modal.dialog;\n      }\n    };\n  }, [modal.dialog]);\n  if (!mountModal) {\n    return null;\n  }\n  var renderBackdrop = function renderBackdrop() {\n    if (Transition) {\n      return /*#__PURE__*/React.createElement(Fade, {\n        transitionAppear: true,\n        in: open,\n        timeout: backdropTransitionTimeout\n      }, function (fadeProps, ref) {\n        var className = fadeProps.className,\n          rest = _objectWithoutPropertiesLoose(fadeProps, _excluded2);\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          \"aria-hidden\": true,\n          \"data-testid\": \"backdrop\"\n        }, rest, {\n          style: backdropStyle,\n          ref: mergeRefs(modal.setBackdropRef, ref),\n          className: classNames(backdropClassName, className)\n        }));\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"aria-hidden\": true,\n      style: backdropStyle,\n      className: backdropClassName\n    });\n  };\n  var dialogElement = Transition ? /*#__PURE__*/React.createElement(Transition, _extends({}, animationProps, {\n    transitionAppear: true,\n    unmountOnExit: true,\n    in: open,\n    timeout: dialogTransitionTimeout,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: createChainedFunction(handleExited, onExited),\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered\n  }), children) : children;\n  return /*#__PURE__*/React.createElement(OverlayContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Portal, null, backdrop && renderBackdrop(), /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: mergeRefs(modal.setDialogRef, ref),\n    style: style,\n    className: className,\n    tabIndex: -1\n  }), dialogElement)));\n});\nexport var modalPropTypes = {\n  as: PropTypes.elementType,\n  className: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  style: PropTypes.object,\n  backdropStyle: PropTypes.object,\n  open: PropTypes.bool,\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  keyboard: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  enforceFocus: PropTypes.bool,\n  animationProps: PropTypes.object,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func\n};\nModal.displayName = 'OverlayModal';\nModal.propTypes = _extends({}, animationPropTypes, modalPropTypes, {\n  children: PropTypes.func,\n  container: PropTypes.any,\n  containerClassName: PropTypes.string,\n  dialogTransitionTimeout: PropTypes.number,\n  backdropTransitionTimeout: PropTypes.number,\n  transition: PropTypes.any,\n  onEsc: PropTypes.func\n});\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}