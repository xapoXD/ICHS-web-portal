{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"bordered\", \"className\", \"classPrefix\", \"compact\", \"defaultValue\", \"isoWeek\", \"weekStart\", \"locale\", \"onChange\", \"onMonthChange\", \"onSelect\", \"renderCell\", \"value\", \"cellClassName\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport CalendarContainer from \"./CalendarContainer.js\";\nimport Button from \"../Button/index.js\";\nimport { FormattedDate } from \"../CustomProvider/index.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport useCalendarDate from \"./useCalendarDate.js\";\n/**\n * The Calendar component is used to select dates.\n * @see https://rsuitejs.com/components/calendar\n */\nvar Calendar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? CalendarContainer : _props$as,\n    bordered = props.bordered,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar' : _props$classPrefix,\n    compact = props.compact,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? new Date() : _props$defaultValue,\n    isoWeek = props.isoWeek,\n    _props$weekStart = props.weekStart,\n    weekStart = _props$weekStart === void 0 ? 0 : _props$weekStart,\n    overrideLocale = props.locale,\n    onChange = props.onChange,\n    onMonthChange = props.onMonthChange,\n    onSelect = props.onSelect,\n    renderCell = props.renderCell,\n    value = props.value,\n    cellClassName = props.cellClassName,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarDate = useCalendarDate(value, defaultValue),\n    calendarDate = _useCalendarDate.calendarDate,\n    setCalendarDate = _useCalendarDate.setCalendarDate;\n  var _useCustom = useCustom('Calendar', overrideLocale),\n    locale = _useCustom.locale;\n  var handleChange = useCallback(function (nextValue) {\n    setCalendarDate(nextValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);\n    if (!isSameMonth(nextValue, calendarDate)) {\n      onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(nextValue);\n    }\n  }, [setCalendarDate, onChange, calendarDate, onMonthChange]);\n  var handleClickToday = useCallback(function () {\n    handleChange(new Date());\n  }, [handleChange]);\n  var handleSelect = useCallback(function (nextValue) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextValue);\n    handleChange(nextValue);\n  }, [handleChange, onSelect]);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var renderToolbar = useCallback(function () {\n    return /*#__PURE__*/React.createElement(Button, {\n      className: prefix('btn-today'),\n      size: \"sm\",\n      onClick: handleClickToday\n    }, locale.today || 'Today');\n  }, [handleClickToday, locale.today, prefix]);\n  var customRenderCell = useCallback(function (date) {\n    return renderCell === null || renderCell === void 0 ? void 0 : renderCell(date);\n  }, [renderCell]);\n  var classes = merge(className, withClassPrefix('panel', {\n    bordered: bordered,\n    compact: compact\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    inline: true,\n    className: classes,\n    ref: ref,\n    isoWeek: isoWeek,\n    weekStart: weekStart,\n    format: \"yyyy-MM-dd\",\n    calendarDate: calendarDate,\n    limitEndYear: 1000,\n    locale: locale,\n    renderTitle: function renderTitle(date) {\n      return /*#__PURE__*/React.createElement(FormattedDate, {\n        date: date,\n        formatStr: locale.formattedMonthPattern || 'MMMM  yyyy'\n      });\n    },\n    renderToolbar: renderToolbar,\n    renderCell: customRenderCell,\n    cellClassName: cellClassName,\n    onMoveForward: handleChange,\n    onMoveBackward: handleChange,\n    onChangeMonth: handleChange,\n    onSelect: handleSelect\n  }));\n});\nCalendar.displayName = 'Calendar';\nCalendar.propTypes = {\n  value: PropTypes.instanceOf(Date),\n  defaultValue: PropTypes.instanceOf(Date),\n  isoWeek: PropTypes.bool,\n  weekStart: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),\n  compact: PropTypes.bool,\n  bordered: PropTypes.bool,\n  locale: PropTypes.object,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  renderCell: PropTypes.func\n};\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}