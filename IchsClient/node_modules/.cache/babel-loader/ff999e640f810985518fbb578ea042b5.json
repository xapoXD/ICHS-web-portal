{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"show\", \"showMeridian\"];\nimport React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport getPosition from 'dom-lib/getPosition';\nimport scrollTop from 'dom-lib/scrollTop';\nimport partial from 'lodash/partial';\nimport camelCase from 'lodash/camelCase';\nimport isNumber from 'lodash/isNumber';\nimport { scrollTopAnimation } from \"../internals/utils/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport * as DateUtils from \"../internals/utils/date/index.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\n/**\n * Get the effective range of hours, minutes and seconds\n * @param meridian\n */\nexport function getRanges(meridian) {\n  return {\n    hours: {\n      start: 0,\n      end: meridian ? 11 : 23\n    },\n    minutes: {\n      start: 0,\n      end: 59\n    },\n    seconds: {\n      start: 0,\n      end: 59\n    }\n  };\n}\n\n/**\n * Convert the 24-hour clock to the 12-hour clock\n * @param hours\n */\nexport function getMeridianHours(hours) {\n  return hours >= 12 ? hours - 12 : hours;\n}\nvar getTime = function getTime(props) {\n  var format = props.format,\n    date = props.date,\n    showMeridian = props.showMeridian;\n  var time = date || new Date();\n  var nextTime = {};\n  if (!format) {\n    return nextTime;\n  }\n  if (/(H|h)/.test(format)) {\n    var hours = DateUtils.getHours(time);\n    nextTime.hours = showMeridian ? getMeridianHours(hours) : hours;\n  }\n  if (/m/.test(format)) {\n    nextTime.minutes = DateUtils.getMinutes(time);\n  }\n  if (/s/.test(format)) {\n    nextTime.seconds = DateUtils.getSeconds(time);\n  }\n  return nextTime;\n};\nvar scrollTo = function scrollTo(time, row) {\n  if (!row) {\n    return;\n  }\n  Object.entries(time).forEach(function (_ref) {\n    var type = _ref[0],\n      value = _ref[1];\n    var container = row.querySelector(\"[data-type=\\\"\" + type + \"\\\"]\");\n    var node = container === null || container === void 0 ? void 0 : container.querySelector(\"[data-key=\\\"\" + type + \"-\" + value + \"\\\"]\");\n    if (node && container) {\n      var position = getPosition(node, container);\n      if (position) {\n        scrollTopAnimation(container, position.top, scrollTop(container) !== 0);\n      }\n    }\n  });\n};\nvar TimeDropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-time-dropdown' : _props$classPrefix,\n    show = props.show,\n    _props$showMeridian = props.showMeridian,\n    showMeridian = _props$showMeridian === void 0 ? false : _props$showMeridian,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    locale = _useCalendarContext.locale,\n    format = _useCalendarContext.format,\n    date = _useCalendarContext.date,\n    onSelect = _useCalendarContext.onChangeTime,\n    targetId = _useCalendarContext.targetId;\n  var rowRef = useRef(null);\n  useEffect(function () {\n    var time = getTime({\n      format: format,\n      date: date,\n      showMeridian: showMeridian\n    });\n    // The currently selected time scrolls to the visible range.\n    if (show && rowRef.current) {\n      scrollTo(time, rowRef.current);\n    }\n  }, [date, format, show, showMeridian]);\n  var handleClick = function handleClick(type, d, event) {\n    var nextDate = date || new Date();\n    switch (type) {\n      case 'hours':\n        nextDate = DateUtils.setHours(date, showMeridian && DateUtils.getHours(nextDate) >= 12 ? d + 12 : d);\n        break;\n      case 'minutes':\n        nextDate = DateUtils.setMinutes(date, d);\n        break;\n      case 'seconds':\n        nextDate = DateUtils.setSeconds(date, d);\n        break;\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextDate, event);\n  };\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    rootPrefix = _useClassNames.rootPrefix,\n    merge = _useClassNames.merge;\n  var renderColumn = function renderColumn(type, active) {\n    if (!isNumber(active)) {\n      return null;\n    }\n    var _getRanges$type = getRanges(showMeridian)[type],\n      start = _getRanges$type.start,\n      end = _getRanges$type.end;\n    var items = [];\n    var hideFunc = props[camelCase(\"hide_\" + type)];\n    var disabledFunc = props[camelCase(\"disabled_\" + type)];\n    for (var i = start; i <= end; i += 1) {\n      if (!(hideFunc !== null && hideFunc !== void 0 && hideFunc(i, date))) {\n        var disabled = disabledFunc === null || disabledFunc === void 0 ? void 0 : disabledFunc(i, date);\n        var itemClasses = prefix('cell', {\n          'cell-active': active === i,\n          'cell-disabled': disabled\n        });\n        items.push( /*#__PURE__*/React.createElement(\"li\", {\n          key: i,\n          role: \"option\",\n          tabIndex: -1,\n          \"aria-label\": i + \" \" + type,\n          \"aria-selected\": active === i,\n          \"aria-disabled\": disabled,\n          \"data-key\": type + \"-\" + i,\n          onClick: !disabled ? partial(handleClick, type, i) : undefined\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: itemClasses\n        }, showMeridian && type === 'hours' && i === 0 ? '12' : i)));\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('column')\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('column-title')\n    }, locale === null || locale === void 0 ? void 0 : locale[type]), /*#__PURE__*/React.createElement(\"ul\", {\n      \"data-type\": type,\n      role: \"listbox\",\n      \"aria-label\": \"Select \" + type\n    }, items));\n  };\n  var time = getTime({\n    format: format,\n    date: date,\n    showMeridian: showMeridian\n  });\n  var classes = merge(className, rootPrefix(classPrefix), {\n    show: show\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"group\",\n    tabIndex: -1,\n    id: targetId ? targetId + \"-\" + classPrefix : undefined\n  }, DateUtils.omitHideDisabledProps(rest), {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content')\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('row'),\n    ref: rowRef\n  }, renderColumn('hours', time.hours), renderColumn('minutes', time.minutes), renderColumn('seconds', time.seconds))));\n});\nTimeDropdown.displayName = 'TimeDropdown';\nTimeDropdown.propTypes = {\n  show: PropTypes.bool,\n  showMeridian: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func\n};\nexport default TimeDropdown;","map":null,"metadata":{},"sourceType":"module"}