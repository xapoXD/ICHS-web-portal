{"ast":null,"code":"// This alphabet uses `A-Za-z0-9_-` symbols.\n// The order of characters is optimized for better gzip and brotli compression.\n// References to the same file (works both for gzip and brotli):\n// `'use`, `andom`, and `rict'`\n// References to the brotli default dictionary:\n// `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`\nlet urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = '';\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    let i = size | 0;\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += alphabet[Math.random() * alphabet.length | 0];\n    }\n    return id;\n  };\n};\nlet nanoid = (size = 21) => {\n  let id = '';\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size | 0;\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\nexport { nanoid, customAlphabet };","map":{"version":3,"names":["urlAlphabet","customAlphabet","alphabet","defaultSize","size","id","i","Math","random","length","nanoid"],"sources":["D:/School/Diploma/ICHS/IchsClient/node_modules/nanoid/non-secure/index.js"],"sourcesContent":["// This alphabet uses `A-Za-z0-9_-` symbols.\n// The order of characters is optimized for better gzip and brotli compression.\n// References to the same file (works both for gzip and brotli):\n// `'use`, `andom`, and `rict'`\n// References to the brotli default dictionary:\n// `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`\nlet urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    let i = size | 0\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size | 0\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GACb,kEAAkE;AAEpE,IAAIC,cAAc,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAG,EAAE,KAAK;EACnD,OAAO,CAACC,IAAI,GAAGD,WAAW,KAAK;IAC7B,IAAIE,EAAE,GAAG,EAAE;IACX;IACA,IAAIC,CAAC,GAAGF,IAAI,GAAG,CAAC;IAChB,OAAOE,CAAC,EAAE,EAAE;MACV;MACAD,EAAE,IAAIH,QAAQ,CAAEK,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGN,QAAQ,CAACO,MAAM,GAAI,CAAC,CAAC;IACvD;IACA,OAAOJ,EAAE;EACX,CAAC;AACH,CAAC;AAED,IAAIK,MAAM,GAAGA,CAACN,IAAI,GAAG,EAAE,KAAK;EAC1B,IAAIC,EAAE,GAAG,EAAE;EACX;EACA,IAAIC,CAAC,GAAGF,IAAI,GAAG,CAAC;EAChB,OAAOE,CAAC,EAAE,EAAE;IACV;IACAD,EAAE,IAAIL,WAAW,CAAEO,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAI,CAAC,CAAC;EAC7C;EACA,OAAOH,EAAE;AACX,CAAC;AAED,SAASK,MAAM,EAAET,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}