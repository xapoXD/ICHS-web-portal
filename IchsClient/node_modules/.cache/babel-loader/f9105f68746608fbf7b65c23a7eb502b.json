{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useCallback, useState } from 'react';\nimport PointerMoveTracker from 'dom-lib/PointerMoveTracker';\nimport addStyle from 'dom-lib/addStyle';\nimport getWidth from 'dom-lib/getWidth';\nimport { useEventCallback } from \"../internals/hooks/index.js\";\nvar useDrag = function useDrag(props) {\n  var rootRef = useRef(null);\n  var tooltipRef = useRef(null);\n  var tooltip = props.tooltip,\n    disabled = props.disabled,\n    onDragMove = props.onDragMove,\n    onDragEnd = props.onDragEnd,\n    onDragStart = props.onDragStart;\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n  var moveTracker = useRef();\n\n  // Release the move event\n  var releaseMoves = useCallback(function () {\n    var _moveTracker$current;\n    (_moveTracker$current = moveTracker.current) === null || _moveTracker$current === void 0 ? void 0 : _moveTracker$current.releaseMoves();\n    moveTracker.current = null;\n  }, []);\n  var setTooltipPosition = useCallback(function () {\n    var tooltipElement = tooltipRef.current;\n    if (tooltip && tooltipElement) {\n      var width = getWidth(tooltipElement);\n      // Set the position of the tooltip\n      addStyle(tooltipElement, 'left', \"-\" + width / 2 + \"px\");\n    }\n  }, [tooltip]);\n  var handleDragMove = useEventCallback(function (_deltaX, _deltaY, event) {\n    var _moveTracker$current2;\n    if ((_moveTracker$current2 = moveTracker.current) !== null && _moveTracker$current2 !== void 0 && _moveTracker$current2.isDragging()) {\n      var _rootRef$current;\n      onDragMove === null || onDragMove === void 0 ? void 0 : onDragMove(event, (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.dataset);\n      setTooltipPosition();\n    }\n  });\n  var handleDragEnd = useEventCallback(function (event) {\n    var _rootRef$current2;\n    setActive(false);\n    releaseMoves();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.dataset);\n  });\n  var getMouseMoveTracker = useCallback(function () {\n    return moveTracker.current || new PointerMoveTracker(document.body, {\n      onMove: handleDragMove,\n      onMoveEnd: handleDragEnd,\n      useTouchEvent: true\n    });\n  }, [handleDragEnd, handleDragMove]);\n  var onMoveStart = useEventCallback(function (event) {\n    var _moveTracker$current3, _rootRef$current3;\n    if (disabled) {\n      return;\n    }\n    moveTracker.current = getMouseMoveTracker();\n    (_moveTracker$current3 = moveTracker.current) === null || _moveTracker$current3 === void 0 ? void 0 : _moveTracker$current3.captureMoves(event);\n    (_rootRef$current3 = rootRef.current) === null || _rootRef$current3 === void 0 ? void 0 : _rootRef$current3.focus();\n    setActive(true);\n    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event);\n  });\n  var onMouseEnter = useEventCallback(function () {\n    setTooltipPosition();\n  });\n  useEffect(function () {\n    return function () {\n      releaseMoves();\n    };\n  }, [releaseMoves]);\n  return {\n    active: active,\n    rootRef: rootRef,\n    tooltipRef: tooltipRef,\n    onMoveStart: onMoveStart,\n    onMouseEnter: onMouseEnter\n  };\n};\nexport default useDrag;","map":null,"metadata":{},"sourceType":"module"}