{"ast":null,"code":"'use client';\n\nimport { composeFunctions } from \"../internals/utils/index.js\";\nimport * as DateUtils from \"../internals/utils/date/index.js\";\nfunction isAfterDay(date1, date2) {\n  return DateUtils.isAfter(new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()), new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()));\n}\nfunction isBeforeDay(date1, date2) {\n  return DateUtils.isBefore(new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()), new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()));\n}\n\n/**\n Allow the maximum number of days specified, other dates are disabled.\n */\nexport function allowedMaxDays(days) {\n  return function (date, selectValue, selectedDone, target) {\n    var beforeLimit = false;\n    var afterLimit = false;\n    if (selectValue !== null && selectValue !== void 0 && selectValue[0]) {\n      var startDate = selectValue[0];\n      beforeLimit = composeFunctions(function (f) {\n        return DateUtils.addDays(f, -days + 1);\n      }, function (f) {\n        return isAfterDay(f, date);\n      })(startDate);\n      afterLimit = composeFunctions(function (f) {\n        return DateUtils.addDays(f, days - 1);\n      }, function (f) {\n        return isBeforeDay(f, date);\n      })(startDate);\n    }\n    if (target === 'CALENDAR' && !selectedDone && (beforeLimit || afterLimit)) {\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n * Only allowed days are specified, other dates are disabled.\n */\nexport function allowedDays(days) {\n  return function (date, selectValue, selectedDone, target) {\n    var beforeLimit = false;\n    var afterLimit = false;\n    if (selectValue !== null && selectValue !== void 0 && selectValue[0]) {\n      var startDate = selectValue[0];\n      beforeLimit = composeFunctions(function (f) {\n        return DateUtils.addDays(f, -days + 1);\n      }, function (f) {\n        return !DateUtils.isSameDay(f, date);\n      })(startDate);\n      afterLimit = composeFunctions(function (f) {\n        return DateUtils.addDays(f, days - 1);\n      }, function (f) {\n        return !DateUtils.isSameDay(f, date);\n      })(startDate);\n    }\n    if (target === 'CALENDAR' && !selectedDone && beforeLimit && afterLimit) {\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n Allow specified date range, other dates are disabled.\n */\nexport function allowedRange(startDate, endDate) {\n  return function (date) {\n    if (isBeforeDay(date, new Date(startDate)) || isAfterDay(date, new Date(endDate))) {\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n Disable dates after the specified date.\n */\nexport function before(beforeDate) {\n  if (beforeDate === void 0) {\n    beforeDate = new Date();\n  }\n  return function (date) {\n    if (isBeforeDay(date, new Date(beforeDate))) {\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n Disable dates before the specified date.\n */\nexport function after(afterDate) {\n  if (afterDate === void 0) {\n    afterDate = new Date();\n  }\n  return function (date) {\n    if (isAfterDay(date, new Date(afterDate))) {\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n Disable dates after today.\n */\nexport function beforeToday() {\n  return before();\n}\n\n/**\n Disable dates before today.\n */\nexport function afterToday() {\n  return after();\n}\n\n/**\n Used to combine multiple conditions.\n */\nexport function combine() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return function () {\n    for (var _len2 = arguments.length, disabledDateArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      disabledDateArgs[_key2] = arguments[_key2];\n    }\n    return args.reduce(function (a, b) {\n      return a.apply(void 0, disabledDateArgs) || b.apply(void 0, disabledDateArgs);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}