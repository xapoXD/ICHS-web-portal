{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject;\nvar _excluded = [\"as\", \"appearance\", \"classPrefix\", \"countable\", \"data\", \"disabledItemValues\", \"valueKey\", \"labelKey\", \"searchable\", \"virtualized\", \"cleanable\", \"placement\", \"menuAutoWidth\", \"menuMaxHeight\", \"menuClassName\", \"menuStyle\", \"locale\", \"placeholder\", \"disabled\", \"toggleAs\", \"style\", \"sticky\", \"value\", \"defaultValue\", \"groupBy\", \"listProps\", \"id\", \"sort\", \"searchBy\", \"renderMenuItem\", \"renderMenuGroup\", \"renderValue\", \"renderExtraFooter\", \"renderMenu\", \"onGroupTitleClick\", \"onSearch\", \"onEnter\", \"onEntered\", \"onExited\", \"onClean\", \"onChange\", \"onSelect\"];\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clone from 'lodash/clone';\nimport isFunction from 'lodash/isFunction';\nimport remove from 'lodash/remove';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport isNil from 'lodash/isNil';\nimport { filterNodesOfTree } from \"../internals/Tree/utils/index.js\";\nimport { useClassNames, useCustom, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nimport { createChainedFunction, shallowEqual, mergeRefs, getDataGroupBy } from \"../internals/utils/index.js\";\nimport { Listbox, ListCheckItem, PickerToggle, PickerPopup, SelectedElement, PickerToggleTrigger, useFocusItemValue, usePickerClassName, useSearch, useToggleKeyDownEvent, usePickerRef, pickTriggerPropKeys, omitTriggerPropKeys, listPickerPropTypes } from \"../internals/Picker/index.js\";\nimport SearchBox from \"../internals/SearchBox/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nvar emptyArray = [];\n/**\n * A component for selecting checkable items in a dropdown list.\n * @see https://rsuitejs.com/components/check-picker\n */\nvar CheckPicker = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$appearance = props.appearance,\n    appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker' : _props$classPrefix,\n    _props$countable = props.countable,\n    countable = _props$countable === void 0 ? true : _props$countable,\n    _props$data = props.data,\n    data = _props$data === void 0 ? emptyArray : _props$data,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    _props$searchable = props.searchable,\n    searchable = _props$searchable === void 0 ? true : _props$searchable,\n    virtualized = props.virtualized,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    _props$menuAutoWidth = props.menuAutoWidth,\n    menuAutoWidth = _props$menuAutoWidth === void 0 ? true : _props$menuAutoWidth,\n    _props$menuMaxHeight = props.menuMaxHeight,\n    menuMaxHeight = _props$menuMaxHeight === void 0 ? 320 : _props$menuMaxHeight,\n    menuClassName = props.menuClassName,\n    menuStyle = props.menuStyle,\n    overrideLocale = props.locale,\n    placeholder = props.placeholder,\n    disabled = props.disabled,\n    toggleAs = props.toggleAs,\n    style = props.style,\n    sticky = props.sticky,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    groupBy = props.groupBy,\n    listProps = props.listProps,\n    id = props.id,\n    sort = props.sort,\n    searchBy = props.searchBy,\n    renderMenuItem = props.renderMenuItem,\n    renderMenuGroup = props.renderMenuGroup,\n    renderValue = props.renderValue,\n    renderExtraFooter = props.renderExtraFooter,\n    renderMenu = props.renderMenu,\n    onGroupTitleClick = props.onGroupTitleClick,\n    onSearch = props.onSearch,\n    onEnter = props.onEnter,\n    onEntered = props.onEntered,\n    onExited = props.onExited,\n    onClean = props.onClean,\n    onChange = props.onChange,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _usePickerRef = usePickerRef(ref),\n    trigger = _usePickerRef.trigger,\n    root = _usePickerRef.root,\n    target = _usePickerRef.target,\n    overlay = _usePickerRef.overlay,\n    list = _usePickerRef.list,\n    searchInput = _usePickerRef.searchInput;\n  var _useCustom = useCustom('Picker', overrideLocale),\n    locale = _useCustom.locale;\n  var _useControlled = useControlled(valueProp, defaultValue || []),\n    value = _useControlled[0],\n    setValue = _useControlled[1];\n\n  // Used to hover the focuse item  when trigger `onKeydown`\n  var _useFocusItemValue = useFocusItemValue(value === null || value === void 0 ? void 0 : value[0], {\n      data: data,\n      valueKey: valueKey,\n      target: function target() {\n        return overlay.current;\n      }\n    }),\n    focusItemValue = _useFocusItemValue.focusItemValue,\n    setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n    onFocusItem = _useFocusItemValue.onKeyDown;\n  var handleSearchCallback = useEventCallback(function (searchKeyword, filteredData, event) {\n    var _filteredData$;\n    // The first option after filtering is the focus.\n    setFocusItemValue(filteredData === null || filteredData === void 0 ? void 0 : (_filteredData$ = filteredData[0]) === null || _filteredData$ === void 0 ? void 0 : _filteredData$[valueKey]);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchKeyword, event);\n  });\n\n  // Use search keywords to filter options.\n  var _useSearch = useSearch(data, {\n      labelKey: labelKey,\n      searchBy: searchBy,\n      callback: handleSearchCallback\n    }),\n    searchKeyword = _useSearch.searchKeyword,\n    filteredData = _useSearch.filteredData,\n    handleSearch = _useSearch.handleSearch,\n    resetSearch = _useSearch.resetSearch,\n    checkShouldDisplay = _useSearch.checkShouldDisplay;\n\n  // Use component active state to support keyboard events.\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n\n  // A list of shortcut options.\n  // when opened again, the selected options are displayed at the top.\n  var _useState2 = useState([]),\n    stickyItems = _useState2[0],\n    setStickyItems = _useState2[1];\n  var initStickyItems = function initStickyItems() {\n    if (!sticky) {\n      return;\n    }\n    var nextStickyItems = [];\n    if (data && value.length) {\n      nextStickyItems = data.filter(function (item) {\n        return value.some(function (v) {\n          return v === item[valueKey];\n        });\n      });\n    }\n    setStickyItems(nextStickyItems);\n  };\n  var handleChangeValue = useEventCallback(function (value, event) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  });\n  var handleClean = useEventCallback(function (event) {\n    if (disabled || !cleanable) {\n      return;\n    }\n    setValue([]);\n    onClean === null || onClean === void 0 ? void 0 : onClean(event);\n    handleChangeValue([], event);\n  });\n  var handleMenuPressEnter = function handleMenuPressEnter(event) {\n    var nextValue = clone(value);\n    if (!focusItemValue) {\n      return;\n    }\n    if (!nextValue.some(function (v) {\n      return shallowEqual(v, focusItemValue);\n    })) {\n      nextValue.push(focusItemValue);\n    } else {\n      remove(nextValue, function (itemVal) {\n        return shallowEqual(itemVal, focusItemValue);\n      });\n    }\n    var focusItem = data.find(function (item) {\n      return shallowEqual(item === null || item === void 0 ? void 0 : item[valueKey], focusItemValue);\n    });\n    setValue(nextValue);\n    handleSelect(nextValue, focusItem, event);\n    handleChangeValue(nextValue, event);\n  };\n  var onPickerKeyDown = useToggleKeyDownEvent(_extends({\n    toggle: !focusItemValue || !active,\n    trigger: trigger,\n    target: target,\n    overlay: overlay,\n    searchInput: searchInput,\n    active: active,\n    onExit: handleClean,\n    onMenuKeyDown: onFocusItem,\n    onMenuPressEnter: handleMenuPressEnter,\n    onMenuPressBackspace: handleClean\n  }, rest));\n  var handleSelect = useEventCallback(function (nextItemValue, item, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextItemValue, item, event);\n  });\n  var handleItemSelect = useEventCallback(function (nextItemValue, item, event, checked) {\n    var nextValue = clone(value);\n    if (checked) {\n      nextValue.push(nextItemValue);\n    } else {\n      remove(nextValue, function (itemVal) {\n        return shallowEqual(itemVal, nextItemValue);\n      });\n    }\n    setValue(nextValue);\n    setFocusItemValue(nextItemValue);\n    handleSelect(nextValue, item, event);\n    handleChangeValue(nextValue, event);\n  });\n  var handleEntered = useEventCallback(function () {\n    setActive(true);\n  });\n  var handleExited = useEventCallback(function () {\n    resetSearch();\n    setFocusItemValue(null);\n    setActive(false);\n  });\n  var selectedItems = data.filter(function (item) {\n    return value === null || value === void 0 ? void 0 : value.some(function (val) {\n      return shallowEqual(item[valueKey], val);\n    });\n  }) || [];\n\n  /**\n   * 1.Have a value and the value is valid.\n   * 2.Regardless of whether the value is valid, as long as renderValue is set, it is judged to have a value.\n   */\n  var hasValue = selectedItems.length > 0 || (value === null || value === void 0 ? void 0 : value.length) > 0 && isFunction(renderValue);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var selectedElement = placeholder;\n  if (selectedItems.length > 0) {\n    selectedElement = /*#__PURE__*/React.createElement(SelectedElement, {\n      selectedItems: selectedItems,\n      countable: countable,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      prefix: prefix\n    });\n  }\n  if ((value === null || value === void 0 ? void 0 : value.length) > 0 && isFunction(renderValue)) {\n    selectedElement = renderValue(value, selectedItems, selectedElement);\n    // If renderValue returns null or undefined, hasValue is false.\n    if (isNil(selectedElement)) {\n      hasValue = false;\n    }\n  }\n  var renderPopup = function renderPopup(positionProps, speakerRef) {\n    var left = positionProps.left,\n      top = positionProps.top,\n      className = positionProps.className;\n    var classes = merge(className, menuClassName, prefix('check-menu'));\n    var styles = _extends({}, menuStyle, {\n      left: left,\n      top: top\n    });\n    var items = filteredData;\n    var filteredStickyItems = [];\n    if (stickyItems) {\n      filteredStickyItems = filterNodesOfTree(stickyItems, function (item) {\n        return checkShouldDisplay(item);\n      });\n      items = filterNodesOfTree(data, function (item) {\n        return checkShouldDisplay(item) && !stickyItems.some(function (v) {\n          return v[valueKey] === item[valueKey];\n        });\n      });\n    }\n\n    // Create a tree structure data when set `groupBy`\n    if (groupBy) {\n      items = getDataGroupBy(items, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      items = items.sort(sort(false));\n    }\n    var menu = items.length || filteredStickyItems.length ? /*#__PURE__*/React.createElement(Listbox, {\n      listProps: listProps,\n      listRef: list,\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      renderMenuGroup: renderMenuGroup,\n      renderMenuItem: renderMenuItem,\n      maxHeight: menuMaxHeight,\n      classPrefix: 'picker-check-menu',\n      listItemAs: ListCheckItem,\n      activeItemValues: value,\n      focusItemValue: focusItemValue,\n      data: [].concat(filteredStickyItems, items),\n      groupBy: groupBy,\n      onSelect: handleItemSelect,\n      onGroupTitleClick: onGroupTitleClick,\n      virtualized: virtualized,\n      query: searchKeyword\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"none\"])))\n    }, locale === null || locale === void 0 ? void 0 : locale.noResultsText);\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      onKeyDown: onPickerKeyDown,\n      target: trigger\n    }, searchable && /*#__PURE__*/React.createElement(SearchBox, {\n      placeholder: locale === null || locale === void 0 ? void 0 : locale.searchPlaceholder,\n      onChange: handleSearch,\n      value: searchKeyword,\n      inputRef: searchInput\n    }), renderMenu ? renderMenu(menu) : menu, renderExtraFooter === null || renderExtraFooter === void 0 ? void 0 : renderExtraFooter());\n  };\n  var _usePickerClassName = usePickerClassName(_extends({}, props, {\n      appearance: appearance,\n      classPrefix: classPrefix,\n      cleanable: cleanable,\n      countable: countable,\n      hasValue: hasValue,\n      name: 'check'\n    })),\n    classes = _usePickerClassName[0],\n    usedClassNamePropKeys = _usePickerClassName[1];\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    id: id,\n    multiple: true,\n    pickerProps: pick(props, pickTriggerPropKeys),\n    ref: trigger,\n    placement: placement,\n    onEnter: createChainedFunction(initStickyItems, onEnter),\n    onEntered: createChainedFunction(handleEntered, onEntered),\n    onExited: createChainedFunction(handleExited, onExited),\n    speaker: renderPopup\n  }, /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    style: style,\n    ref: root\n  }, /*#__PURE__*/React.createElement(PickerToggle, _extends({}, omit(rest, [].concat(omitTriggerPropKeys, usedClassNamePropKeys)), {\n    ref: target,\n    appearance: appearance,\n    disabled: disabled,\n    onClean: handleClean,\n    onKeyDown: onPickerKeyDown,\n    as: toggleAs,\n    cleanable: cleanable && !disabled,\n    hasValue: hasValue,\n    active: active,\n    placement: placement,\n    inputValue: value,\n    focusItemValue: focusItemValue\n  }), selectedElement || (locale === null || locale === void 0 ? void 0 : locale.placeholder))));\n});\nCheckPicker.displayName = 'CheckPicker';\nCheckPicker.propTypes = _extends({}, listPickerPropTypes, {\n  locale: PropTypes.any,\n  appearance: oneOf(['default', 'subtle']),\n  menuAutoWidth: PropTypes.bool,\n  menuMaxHeight: PropTypes.number,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  renderMenuGroup: PropTypes.func,\n  onSelect: PropTypes.func,\n  onGroupTitleClick: PropTypes.func,\n  onSearch: PropTypes.func,\n  groupBy: PropTypes.any,\n  sort: PropTypes.func,\n  searchable: PropTypes.bool,\n  countable: PropTypes.bool,\n  sticky: PropTypes.bool,\n  virtualized: PropTypes.bool,\n  searchBy: PropTypes.func\n});\nexport default CheckPicker;","map":null,"metadata":{},"sourceType":"module"}