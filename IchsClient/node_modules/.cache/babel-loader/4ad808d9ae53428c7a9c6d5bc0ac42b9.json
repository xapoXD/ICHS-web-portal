{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"style\", \"className\", \"classPrefix\", \"visible\", \"layer\", \"disabled\", \"allUncheckable\", \"loading\", \"expanded\", \"hasChildren\", \"nodeData\", \"focus\", \"label\", \"uncheckable\", \"checkState\", \"value\", \"treeItemRef\", \"onExpand\", \"onSelect\"];\nimport React, { forwardRef, useMemo } from 'react';\nimport ListCheckItem from \"../internals/Picker/ListCheckItem.js\";\nimport { stringifyReactNode, mergeRefs } from \"../internals/utils/index.js\";\nimport { CHECK_STATE } from \"../internals/constants/index.js\";\nimport { indentTreeNode } from \"../Tree/utils/index.js\";\nimport { useClassNames, useEventCallback, useCustom, useFocusVirtualListItem } from \"../internals/hooks/index.js\";\nimport { useTreeContextProps } from \"../internals/Tree/TreeProvider.js\";\nimport TreeNodeToggle from \"../Tree/TreeNodeToggle.js\";\nvar CheckTreeNode = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    style = props.style,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'check-tree-node' : _props$classPrefix,\n    _props$visible = props.visible,\n    visible = _props$visible === void 0 ? true : _props$visible,\n    layer = props.layer,\n    disabled = props.disabled,\n    allUncheckable = props.allUncheckable,\n    loading = props.loading,\n    expanded = props.expanded,\n    hasChildren = props.hasChildren,\n    nodeData = props.nodeData,\n    focus = props.focus,\n    label = props.label,\n    uncheckable = props.uncheckable,\n    checkState = props.checkState,\n    value = props.value,\n    treeItemRef = props.treeItemRef,\n    onExpand = props.onExpand,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useTreeContextProps = useTreeContextProps(),\n    renderTreeNode = _useTreeContextProps.renderTreeNode,\n    virtualized = _useTreeContextProps.virtualized;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var labelStr = useMemo(function () {\n    return stringifyReactNode(label);\n  }, [label]);\n  var handleExpand = useEventCallback(function (event) {\n    var _event$nativeEvent, _event$nativeEvent$st;\n    // stop propagation when using custom loading icon\n    event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : (_event$nativeEvent$st = _event$nativeEvent.stopImmediatePropagation) === null || _event$nativeEvent$st === void 0 ? void 0 : _event$nativeEvent$st.call(_event$nativeEvent);\n    onExpand === null || onExpand === void 0 ? void 0 : onExpand(nodeData, expanded);\n  });\n  var handleSelect = useEventCallback(function (_value, event) {\n    var isChecked = false;\n    if (checkState === CHECK_STATE.UNCHECK || checkState === CHECK_STATE.INDETERMINATE) {\n      isChecked = true;\n    }\n    if (checkState === CHECK_STATE.CHECK) {\n      isChecked = false;\n    }\n    var nextNodeData = _extends({}, nodeData, {\n      check: isChecked\n    });\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(nextNodeData, event);\n  });\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled,\n    'all-uncheckable': !!allUncheckable,\n    'text-muted': disabled,\n    focus: focus\n  }));\n  var styles = virtualized ? _extends({}, style, indentTreeNode(rtl, layer - 1)) : style;\n  var itemRef = useFocusVirtualListItem(focus);\n  return visible ? /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    style: styles,\n    className: classes,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(TreeNodeToggle, {\n    \"aria-label\": (expanded ? 'Collapse' : 'Expand') + (\" \" + labelStr),\n    data: nodeData,\n    expanded: expanded,\n    loading: loading,\n    hasChildren: hasChildren,\n    onClick: handleExpand\n  }), /*#__PURE__*/React.createElement(ListCheckItem, {\n    as: \"div\",\n    role: \"treeitem\",\n    ref: mergeRefs(itemRef, treeItemRef),\n    \"aria-label\": labelStr,\n    \"aria-expanded\": expanded,\n    \"aria-checked\": checkState === CHECK_STATE.CHECK,\n    \"aria-selected\": focus,\n    \"aria-disabled\": disabled,\n    \"aria-level\": layer,\n    \"data-layer\": layer,\n    active: checkState === CHECK_STATE.CHECK,\n    indeterminate: checkState === CHECK_STATE.INDETERMINATE,\n    focus: focus,\n    checkable: !uncheckable,\n    disabled: disabled,\n    value: nodeData.refKey || value,\n    className: prefix('content'),\n    title: labelStr,\n    onSelect: handleSelect\n  }, typeof renderTreeNode === 'function' ? renderTreeNode(nodeData) : label)) : null;\n});\nCheckTreeNode.displayName = 'CheckTreeNode';\nexport default CheckTreeNode;","map":null,"metadata":{},"sourceType":"module"}