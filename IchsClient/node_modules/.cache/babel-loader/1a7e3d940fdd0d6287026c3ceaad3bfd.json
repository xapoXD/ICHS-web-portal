{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useCallback, useRef, useEffect } from 'react';\nimport omit from 'lodash/omit';\nimport isNil from 'lodash/isNil';\nimport { shallowEqual } from \"../../internals/utils/index.js\";\nimport { formatNodeRefKey } from \"../utils/index.js\";\nimport useForceUpdate from \"./useForceUpdate.js\";\n/**\n * Custom hook that flattens a tree data structure into a map of nodes.\n *\n */\nfunction useFlattenTree(data, options) {\n  var value = options.value,\n    labelKey = options.labelKey,\n    valueKey = options.valueKey,\n    childrenKey = options.childrenKey,\n    _options$uncheckableI = options.uncheckableItemValues,\n    uncheckableItemValues = _options$uncheckableI === void 0 ? [] : _options$uncheckableI,\n    cascade = options.cascade,\n    multiple = options.multiple,\n    callback = options.callback;\n  var forceUpdate = useForceUpdate();\n  var flattenedNodes = useRef({});\n  var updateTreeNodeCheckState = useCallback(function (value) {\n    if (value === void 0) {\n      value = [];\n    }\n    // Reset values to false\n    Object.keys(flattenedNodes.current).forEach(function (refKey) {\n      var node = flattenedNodes.current[refKey];\n      if (cascade && !isNil(node.parent) && !isNil(node.parent.refKey)) {\n        node.check = flattenedNodes.current[node.parent.refKey].check;\n      } else {\n        node.check = false;\n      }\n      value.forEach(function (nodeVal) {\n        if (shallowEqual(flattenedNodes.current[refKey][valueKey], nodeVal) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(nodeVal, uncheckableValue);\n        })) {\n          flattenedNodes.current[refKey].check = true;\n        }\n      });\n    });\n  }, [cascade, uncheckableItemValues, valueKey]);\n  var flattenTreeData = useCallback(function (treeData, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n    treeData.map(function (node) {\n      var _extends2;\n      var value = node[valueKey];\n      /**\n       * because the value of the node's type is string or number,\n       * so it can used as the key of the object directly\n       * to avoid number value is converted to string. 1 and '1' will be convert to '1'\n       * we used `String_` or `Number_` prefix\n       */\n      var refKey = formatNodeRefKey(value);\n      node.refKey = refKey;\n      flattenedNodes.current[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n      if (parent) {\n        flattenedNodes.current[refKey].parent = omit(parent, 'parent', 'children');\n      }\n      flattenTreeData(node[childrenKey], node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenedNodes.current);\n    forceUpdate();\n  }, [callback, forceUpdate, valueKey, labelKey, uncheckableItemValues, childrenKey]);\n  useEffect(function () {\n    // when data is changed, should clear the flattenedNodes, avoid duplicate keys\n    flattenedNodes.current = {};\n    flattenTreeData(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (multiple) {\n      updateTreeNodeCheckState(value);\n      forceUpdate();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n  return flattenedNodes.current;\n}\nexport default useFlattenTree;","map":null,"metadata":{},"sourceType":"module"}