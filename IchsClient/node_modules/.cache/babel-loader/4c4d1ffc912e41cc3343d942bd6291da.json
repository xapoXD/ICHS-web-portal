{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2;\nvar _excluded = [\"onToggle\", \"eventKey\", \"title\", \"classPrefix\", \"children\", \"openDirection\"],\n  _excluded2 = [\"icon\", \"className\", \"disabled\"],\n  _excluded3 = [\"open\"],\n  _excluded4 = [\"open\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport isNil from 'lodash/isNil';\nimport AngleLeft from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRight from '@rsuite/icons/legacy/AngleRight';\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport { NavbarContext } from '.';\nimport Disclosure from \"../internals/Disclosure/index.js\";\nimport NavContext from \"../Nav/NavContext.js\";\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\n/**\n * @private this component is not supposed to be used directly\n *          Instead it's rendered by a <Nav.Menu> within a <Navbar>\n *\n * <Navbar>\n *   <Nav>\n *     <Nav.Menu>\n *       <Nav.Menu title=\"menu\"> -> This submenu will render <NavbarDropdownMenu> component\n *       </Nav.Menu>\n *     </Nav.Menu>\n *   </Nav>\n * </Navbar>\n */\nvar NavbarDropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var navbar = useContext(NavbarContext);\n  var nav = useContext(NavContext);\n  if (!navbar || !nav) {\n    throw new Error('<Navbar.Dropdown.Menu> must be rendered within a <Nav> within a <Navbar> component.');\n  }\n  var _onToggle = props.onToggle,\n    eventKey = props.eventKey,\n    title = props.title,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown-menu' : _props$classPrefix,\n    children = props.children,\n    _props$openDirection = props.openDirection,\n    openDirection = _props$openDirection === void 0 ? 'end' : _props$openDirection,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('DropdownMenu'),\n    rtl = _useCustom.rtl;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix;\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n    withMenuClassPrefix = _useClassNames2.withClassPrefix,\n    mergeMenuClassName = _useClassNames2.merge;\n  var _useClassNames3 = useClassNames('dropdown-item'),\n    mergeItemClassNames = _useClassNames3.merge,\n    withItemClassPrefix = _useClassNames3.withClassPrefix,\n    prefixItemClassName = _useClassNames3.prefix;\n\n  // Parent menu exists. This is a submenu.\n  // Should render a `menuitem` that controls this submenu.\n  var _omit = omit(rest, ['trigger']),\n    icon = _omit.icon,\n    className = _omit.className,\n    disabled = _omit.disabled,\n    menuProps = _objectWithoutPropertiesLoose(_omit, _excluded2);\n  var Icon = rtl ? AngleLeft : AngleRight;\n  return /*#__PURE__*/React.createElement(Disclosure, {\n    hideOnClickOutside: true,\n    trigger: ['click', 'hover'],\n    onToggle: function onToggle(open, event) {\n      return _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(open, undefined, event);\n    }\n  }, function (_ref, containerRef) {\n    var open = _ref.open,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded3);\n    var classes = mergeItemClassNames(className, withItemClassPrefix({\n      disabled: disabled,\n      open: open,\n      submenu: true\n    }));\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: mergeRefs(ref, containerRef),\n      className: classes\n    }, props), /*#__PURE__*/React.createElement(Disclosure.Button, null, function (_ref2, buttonRef) {\n      var open = _ref2.open,\n        buttonProps = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n      var classes = mergeItemClassNames(className, prefixItemClassName(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"toggle\"]))), withItemClassPrefix({\n        'with-icon': icon,\n        open: open,\n        disabled: disabled\n      }));\n      var dataAttributes = {\n        'data-event-key': eventKey\n      };\n      if (!isNil(eventKey) && typeof eventKey !== 'string') {\n        dataAttributes['data-event-key-type'] = typeof eventKey;\n      }\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        ref: mergeRefs(buttonRef, buttonRef),\n        className: classes\n      }, dataAttributes, buttonProps), icon && /*#__PURE__*/React.cloneElement(icon, {\n        className: prefix('menu-icon')\n      }), title, /*#__PURE__*/React.createElement(Icon, {\n        className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"toggle-icon\"])))\n      }));\n    }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref3, elementRef) {\n      var open = _ref3.open;\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: elementRef,\n        className: menuClassName,\n        hidden: !open,\n        \"data-direction\": openDirection\n      }, menuProps), children);\n    }));\n  });\n});\nNavbarDropdownMenu.displayName = 'Nav.Dropdown.Menu';\nNavbarDropdownMenu.propTypes = {\n  active: PropTypes.bool,\n  activeKey: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  icon: PropTypes.any,\n  classPrefix: PropTypes.string,\n  pullLeft: deprecatePropType(PropTypes.bool, 'Use openDirection=\"start\" instead.'),\n  openDirection: oneOf(['start', 'end']),\n  title: PropTypes.node,\n  open: PropTypes.bool,\n  eventKey: PropTypes.any,\n  expanded: PropTypes.bool,\n  collapsible: PropTypes.bool,\n  onToggle: PropTypes.func\n};\nexport default NavbarDropdownMenu;","map":null,"metadata":{},"sourceType":"module"}