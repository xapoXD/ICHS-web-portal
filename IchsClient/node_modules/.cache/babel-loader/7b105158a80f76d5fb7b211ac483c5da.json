{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"name\", \"componentAs\", \"componentClassPrefix\"],\n  _excluded2 = [\"as\", \"classPrefix\", \"className\", \"role\"];\nimport React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../hooks/index.js\";\n/**\n * Create a component with `classPrefix` and `as` attributes.\n */\nexport function createComponent(_ref) {\n  var name = _ref.name,\n    componentAs = _ref.componentAs,\n    componentClassPrefix = _ref.componentClassPrefix,\n    defaultProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var Component = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var _props$as = props.as,\n      Component = _props$as === void 0 ? componentAs || 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? componentClassPrefix || kebabCase(name) : _props$classPrefix,\n      className = props.className,\n      role = props.role,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n    var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n    var classes = merge(className, withClassPrefix());\n    return /*#__PURE__*/React.createElement(Component, _extends({}, defaultProps, rest, {\n      role: role,\n      ref: ref,\n      className: classes\n    }));\n  });\n  Component.displayName = name;\n  Component.propTypes = {\n    as: PropTypes.elementType,\n    className: PropTypes.string,\n    classPrefix: PropTypes.string,\n    children: PropTypes.node\n  };\n  return Component;\n}\nexport default createComponent;","map":null,"metadata":{},"sourceType":"module"}