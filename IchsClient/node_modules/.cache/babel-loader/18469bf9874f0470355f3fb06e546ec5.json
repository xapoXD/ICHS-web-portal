{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"active\", \"disabled\", \"eventKey\", \"className\", \"classPrefix\", \"style\", \"children\", \"icon\", \"divider\", \"panel\", \"onClick\", \"onSelect\"];\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport Ripple from \"../internals/Ripple/index.js\";\nimport SafeAnchor from \"../SafeAnchor/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { shallowEqual } from \"../internals/utils/index.js\";\nimport NavContext from \"./NavContext.js\";\nimport classNames from 'classnames';\n/**\n * The `Nav.Item` component is used to create navigation links.\n *\n * - When used as direct child of `<Nav>`, render the NavItem\n * - When used within a `<Nav.Menu>`, render the NavDropdownItem\n * @see https://rsuitejs.com/components/nav\n *\n */\nvar NavItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var nav = useContext(NavContext);\n  if (!nav) {\n    throw new Error('<Nav.Item> must be rendered within a <Nav> component.');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? SafeAnchor : _props$as,\n    activeProp = props.active,\n    disabled = props.disabled,\n    eventKey = props.eventKey,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'nav-item' : _props$classPrefix,\n    style = props.style,\n    children = props.children,\n    icon = props.icon,\n    divider = props.divider,\n    panel = props.panel,\n    onClick = props.onClick,\n    onSelectProp = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var activeKey = nav.activeKey,\n    onSelectFromNav = nav.onSelect;\n  var active = activeProp !== null && activeProp !== void 0 ? activeProp : !isNil(eventKey) && shallowEqual(eventKey, activeKey);\n  var emitSelect = useCallback(function (event) {\n    onSelectProp === null || onSelectProp === void 0 ? void 0 : onSelectProp(eventKey, event);\n    onSelectFromNav === null || onSelectFromNav === void 0 ? void 0 : onSelectFromNav(eventKey, event);\n  }, [eventKey, onSelectProp, onSelectFromNav]);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix({\n    active: active,\n    disabled: disabled\n  }));\n  var handleClick = useCallback(function (event) {\n    if (!disabled) {\n      emitSelect(event);\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    }\n  }, [disabled, emitSelect, onClick]);\n  if (divider) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      ref: ref,\n      role: \"separator\",\n      style: style,\n      className: merge(className, prefix('divider'))\n    }, rest));\n  }\n  if (panel) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      ref: ref,\n      style: style,\n      className: merge(className, prefix('panel'))\n    }, rest), children);\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    tabIndex: disabled ? -1 : undefined\n  }, rest, {\n    className: classes,\n    onClick: handleClick,\n    style: style,\n    \"aria-selected\": active || undefined\n  }), icon && /*#__PURE__*/React.cloneElement(icon, {\n    className: classNames(prefix('icon'), icon.props.className)\n  }), children, /*#__PURE__*/React.createElement(Ripple, null));\n});\nNavItem.displayName = 'Nav.Item';\nNavItem.propTypes = {\n  as: PropTypes.elementType,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  divider: PropTypes.bool,\n  panel: PropTypes.bool,\n  onClick: PropTypes.func,\n  style: PropTypes.object,\n  icon: PropTypes.node,\n  onSelect: PropTypes.func,\n  children: PropTypes.node,\n  eventKey: PropTypes.any\n};\nexport default NavItem;","map":null,"metadata":{},"sourceType":"module"}