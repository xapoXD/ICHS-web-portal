{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"classPrefix\", \"className\", \"shortcut\", \"active\", \"eventKey\", \"onSelect\", \"icon\", \"as\", \"divider\", \"panel\", \"children\", \"disabled\"],\n  _excluded2 = [\"selected\", \"active\"];\nimport React, { useCallback, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { deprecatePropType, deprecatePropTypeNew, oneOf } from \"../internals/propTypes/index.js\";\nimport MenuItem from \"../internals/Menu/MenuItem.js\";\nimport DropdownContext from \"./DropdownContext.js\";\nimport isNil from 'lodash/isNil';\nimport pick from 'lodash/pick';\nimport { useClassNames, useInternalId } from \"../internals/hooks/index.js\";\nimport { mergeRefs, shallowEqual, warnOnce } from \"../internals/utils/index.js\";\nimport NavContext from \"../Nav/NavContext.js\";\nimport { DropdownActionType } from \"./DropdownState.js\";\nimport { useRenderDropdownItem } from \"./useRenderDropdownItem.js\";\nimport Nav from \"../Nav/index.js\";\nimport Text from \"../Text/index.js\";\nimport DropdownSeparator from \"./DropdownSeparator.js\";\n/**\n * The `<Dropdown.Item>` API\n * - When used inside `<Sidenav>`, renders a `<TreeviewItem>`\n * - Otherwise renders a `<MenuItem>`\n */\nvar DropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown-item' : _props$classPrefix,\n    className = props.className,\n    shortcut = props.shortcut,\n    activeProp = props.active,\n    eventKey = props.eventKey,\n    onSelect = props.onSelect,\n    icon = props.icon,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'li' : _props$as,\n    divider = props.divider,\n    panel = props.panel,\n    children = props.children,\n    disabled = props.disabled,\n    restProps = _objectWithoutPropertiesLoose(props, _excluded);\n  var internalId = useInternalId('DropdownItem');\n  var nav = useContext(NavContext);\n  var dropdown = useContext(DropdownContext);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var handleSelectItem = useCallback(function (event) {\n    var _dropdown$onSelect;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    dropdown === null || dropdown === void 0 ? void 0 : (_dropdown$onSelect = dropdown.onSelect) === null || _dropdown$onSelect === void 0 ? void 0 : _dropdown$onSelect.call(dropdown, eventKey, event);\n  }, [onSelect, eventKey, dropdown]);\n  var selected = activeProp || !isNil(eventKey) && shallowEqual(dropdown === null || dropdown === void 0 ? void 0 : dropdown.activeKey, eventKey);\n  var dispatch = dropdown === null || dropdown === void 0 ? void 0 : dropdown.dispatch;\n  useEffect(function () {\n    if (dispatch) {\n      dispatch({\n        type: DropdownActionType.RegisterItem,\n        payload: {\n          id: internalId,\n          props: {\n            selected: selected\n          }\n        }\n      });\n      return function () {\n        dispatch({\n          type: DropdownActionType.UnregisterItem,\n          payload: {\n            id: internalId\n          }\n        });\n      };\n    }\n  }, [internalId, selected, dispatch]);\n  var renderDropdownItem = useRenderDropdownItem(Component);\n\n  // If using <Dropdown.Item> within <Nav>\n  // Suggest <Nav.Item>\n  if (nav) {\n    warnOnce('Usage of <Dropdown.Item> within <Nav> is deprecated. Replace with <Nav.Item> within <Nav.Menu>.');\n    return /*#__PURE__*/React.createElement(Nav.Item, _extends({\n      ref: ref\n    }, props));\n  }\n  if (divider) {\n    return /*#__PURE__*/React.createElement(DropdownSeparator, _extends({\n      as: \"li\"\n    }, pick(props, ['data-testid'])));\n  }\n  if (panel) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      className: merge(prefix('panel'), className),\n      children: children\n    }, restProps));\n  }\n  return /*#__PURE__*/React.createElement(MenuItem, {\n    selected: selected,\n    disabled: disabled,\n    onActivate: handleSelectItem\n  }, function (_ref, menuitemRef) {\n    var selected = _ref.selected,\n      active = _ref.active,\n      menuitem = _objectWithoutPropertiesLoose(_ref, _excluded2);\n    var classes = merge(className, withClassPrefix({\n      'with-icon': icon,\n      active: selected,\n      disabled: disabled,\n      focus: active,\n      divider: divider,\n      panel: panel\n    }));\n    var dataAttributes = {\n      'data-event-key': eventKey\n    };\n    if (!isNil(eventKey) && typeof eventKey !== 'string') {\n      dataAttributes['data-event-key-type'] = typeof eventKey;\n    }\n    return renderDropdownItem(_extends({\n      ref: mergeRefs(ref, menuitemRef),\n      className: classes\n    }, menuitem, dataAttributes, restProps, {\n      children: /*#__PURE__*/React.createElement(React.Fragment, null, icon && /*#__PURE__*/React.cloneElement(icon, {\n        className: classNames(prefix('menu-icon'), icon.props.className)\n      }), /*#__PURE__*/React.createElement(Text, {\n        as: \"span\",\n        className: prefix('content')\n      }, children), shortcut && /*#__PURE__*/React.createElement(Text, {\n        as: \"kbd\",\n        className: prefix('shortcut'),\n        muted: true\n      }, shortcut))\n    }));\n  });\n});\nDropdownItem.displayName = 'Dropdown.Item';\nDropdownItem.propTypes = {\n  as: PropTypes.elementType,\n  divider: deprecatePropTypeNew(PropTypes.bool, 'Use Dropdown.Separator component instead.'),\n  panel: PropTypes.bool,\n  trigger: PropTypes.oneOfType([PropTypes.array, oneOf(['click', 'hover'])]),\n  open: deprecatePropType(PropTypes.bool),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  pullLeft: deprecatePropType(PropTypes.bool),\n  submenu: PropTypes.element,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number\n};\nexport default DropdownItem;","map":null,"metadata":{},"sourceType":"module"}