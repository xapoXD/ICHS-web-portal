{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport * as ReactIs from 'react-is';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\n * Get the columns ReactElement array.\n * - Handling the case where there is an array of <Column> in children.\n * - Filter empty items in children.\n */\n\nfunction getTableColumns(children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var flattenColumns = flatten(childrenArray).map(function (column) {\n    // If the column is a group, we need to get the columns from the children.\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n        header = _column$props.header,\n        groupChildren = _column$props.children,\n        align = _column$props.align,\n        fixed = _column$props.fixed,\n        verticalAlign = _column$props.verticalAlign,\n        groupHeaderHeight = _column$props.groupHeaderHeight;\n      var childColumns = getTableColumns(groupChildren);\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          fixed: fixed,\n          // Column extends the properties of Group （align，verticalAlign）\n          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,\n          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign\n        });\n        /**\n         * Set attributes for the first column in the group:\n         * @field groupCount: The number of grouping sub-items.\n         * @field groupHeader: Group header title.\n         * @field resizable: Set to not resizable.\n         */\n\n        if (index === 0) {\n          groupCellProps.groupAlign = align;\n          groupCellProps.groupVerticalAlign = verticalAlign;\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    } else if (ReactIs.isFragment(column)) {\n      var _column$props2;\n\n      // If the column is a fragment, we need to get the columns from the children.\n      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);\n    } else if (Array.isArray(column)) {\n      // If the column is an array, need check item in the array.\n      return getTableColumns(column);\n    } // If the column is not a group, we just return the column.\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(Boolean);\n}\nexport default getTableColumns;","map":null,"metadata":{},"sourceType":"module"}