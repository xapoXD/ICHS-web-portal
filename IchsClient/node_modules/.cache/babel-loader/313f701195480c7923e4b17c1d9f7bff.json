{"ast":null,"code":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { shallowEqual } from \"../../internals/utils/index.js\";\nimport { findNodeOfTree } from \"../../internals/Tree/utils/index.js\";\n/**\n * Custom hook that provides functionality for managing a tree structure with children.\n */\nexport default function useTreeWithChildren(data, options) {\n  var valueKey = options.valueKey,\n    childrenKey = options.childrenKey;\n  var _useState = useState([]),\n    loadingNodeValues = _useState[0],\n    setLoadingNodeValues = _useState[1];\n  var _useState2 = useState(data),\n    treeData = _useState2[0],\n    setTreeData = _useState2[1];\n  useEffect(function () {\n    setTreeData(data);\n  }, [data]);\n  var concatChildren = useCallback(function (treeNode, children) {\n    var value = treeNode[valueKey];\n    treeNode = findNodeOfTree(data, function (item) {\n      return value === item[valueKey];\n    });\n    treeNode[childrenKey] = children;\n    var newData = data.concat([]);\n    setTreeData(newData);\n    return newData;\n  }, [data, valueKey, childrenKey]);\n  var appendChild = useCallback(function (node, getChildren) {\n    setLoadingNodeValues(function (prev) {\n      return prev.concat(node[valueKey]);\n    });\n    var children = getChildren(node);\n    if (children instanceof Promise) {\n      children.then(function (res) {\n        var newData = concatChildren(node, res);\n        setTreeData(newData);\n        setLoadingNodeValues(function (prev) {\n          return prev.filter(function (item) {\n            return !shallowEqual(item, node[valueKey]);\n          });\n        });\n      });\n    } else {\n      setTreeData(concatChildren(node, children));\n      setLoadingNodeValues(function (prev) {\n        return prev.filter(function (item) {\n          return !shallowEqual(item, node[valueKey]);\n        });\n      });\n    }\n  }, [concatChildren, valueKey]);\n  return {\n    treeData: treeData,\n    loadingNodeValues: loadingNodeValues,\n    appendChild: appendChild\n  };\n}","map":null,"metadata":{},"sourceType":"module"}