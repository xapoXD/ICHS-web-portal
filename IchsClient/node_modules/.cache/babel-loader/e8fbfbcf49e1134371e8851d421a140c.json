{"ast":null,"code":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { isValid } from \"../../internals/utils/date/index.js\";\nimport Input from \"../../Input/index.js\";\nimport DateInput from \"../../DateInput/index.js\";\nimport DateRangeInput from \"../../DateRangeInput/index.js\";\nfunction useCustomizedInput(props) {\n  var value = props.value,\n    formatStr = props.formatStr,\n    readOnly = props.readOnly,\n    editable = props.editable,\n    loading = props.loading,\n    _props$mode = props.mode,\n    mode = _props$mode === void 0 ? 'date' : _props$mode,\n    renderValue = props.renderValue;\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n  var onActive = useCallback(function () {\n    return setActive(true);\n  }, []);\n  var onInactive = useCallback(function () {\n    return setActive(false);\n  }, []);\n\n  // Custom rendering of the selected value\n  var customValue = null;\n\n  // Input box is read-only when the component is uneditable or loading state\n  var inputReadOnly = readOnly || !editable || loading || false;\n\n  // If the component is not active or editable, the custom rendering value is displayed\n  var customized = !active || !editable;\n  if (typeof renderValue === 'function' && value && customized) {\n    if (Array.isArray(value) ? value.every(isValid) : isValid(value)) {\n      customValue = renderValue(value, formatStr);\n\n      // If the custom rendering value, the input box is read-only\n      inputReadOnly = true;\n    }\n  }\n  var TargetInput = mode === 'dateRange' ? DateRangeInput : DateInput;\n  var CustomizedInput = customValue ? Input : TargetInput;\n  return {\n    customValue: customValue,\n    Input: CustomizedInput,\n    inputReadOnly: inputReadOnly,\n    events: {\n      onActive: onActive,\n      onInactive: onInactive\n    }\n  };\n}\nexport default useCustomizedInput;","map":null,"metadata":{},"sourceType":"module"}