{"ast":null,"code":"import { MixedType, schemaSpecKey } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty, formatErrorMessage } from './utils';\nexport class ObjectType extends MixedType {\n  constructor(errorMessage) {\n    super('object');\n    super.pushRule({\n      onValid: v => typeof v === 'object',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  check(value = this.value, data, fieldName) {\n    const check = (value, data, type, childFieldKey) => {\n      var _a;\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(type.requiredMessage || ((_a = type.locale) === null || _a === void 0 ? void 0 : _a.isRequired), {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        };\n      }\n      if (type[schemaSpecKey] && typeof value === 'object') {\n        const checkResultObject = {};\n        let hasError = false;\n        Object.entries(type[schemaSpecKey]).forEach(([k, v]) => {\n          const checkResult = check(value[k], value, v, k);\n          if (checkResult === null || checkResult === void 0 ? void 0 : checkResult.hasError) {\n            hasError = true;\n          }\n          checkResultObject[k] = checkResult;\n        });\n        return {\n          hasError,\n          object: checkResultObject\n        };\n      }\n      const validator = createValidator(data, childFieldKey || fieldName, type.fieldLabel);\n      const checkStatus = validator(value, type.priorityRules);\n      if (checkStatus) {\n        return checkStatus;\n      }\n      if (!type.required && isEmpty(value)) {\n        return {\n          hasError: false\n        };\n      }\n      return validator(value, type.rules) || {\n        hasError: false\n      };\n    };\n    return check(value, data, this);\n  }\n  checkAsync(value = this.value, data, fieldName) {\n    const check = (value, data, type, childFieldKey) => {\n      var _a;\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: formatErrorMessage(type.requiredMessage || ((_a = type.locale) === null || _a === void 0 ? void 0 : _a.isRequired), {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        });\n      }\n      const validator = createValidatorAsync(data, childFieldKey || fieldName, type.fieldLabel);\n      return new Promise(resolve => {\n        if (type[schemaSpecKey] && typeof value === 'object') {\n          const checkResult = {};\n          const checkAll = [];\n          const keys = [];\n          Object.entries(type[schemaSpecKey]).forEach(([k, v]) => {\n            checkAll.push(check(value[k], value, v, k));\n            keys.push(k);\n          });\n          return Promise.all(checkAll).then(values => {\n            let hasError = false;\n            values.forEach((v, index) => {\n              if (v === null || v === void 0 ? void 0 : v.hasError) {\n                hasError = true;\n              }\n              checkResult[keys[index]] = v;\n            });\n            resolve({\n              hasError,\n              object: checkResult\n            });\n          });\n        }\n        return validator(value, type.priorityRules).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        }).then(() => {\n          if (!type.required && isEmpty(value)) {\n            resolve({\n              hasError: false\n            });\n          }\n        }).then(() => validator(value, type.rules)).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n          resolve({\n            hasError: false\n          });\n        });\n      });\n    };\n    return check(value, data, this);\n  }\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n  shape(fields) {\n    this[schemaSpecKey] = fields;\n    return this;\n  }\n}\nexport default function getObjectType(errorMessage) {\n  return new ObjectType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}