{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"classPrefix\", \"theme\", \"toastContainer\", \"disableRipple\"];\nimport React from 'react';\nimport { usePortal, useIsomorphicLayoutEffect } from \"../internals/hooks/index.js\";\nimport { getClassNamePrefix, prefix } from \"../internals/utils/prefix.js\";\nimport { addClass, removeClass, canUseDOM } from \"../DOMHelper/index.js\";\nimport ToastContainer, { toastPlacements } from \"../toaster/ToastContainer.js\";\nvar CustomContext = /*#__PURE__*/React.createContext({});\nvar themes = ['light', 'dark', 'high-contrast'];\n\n/**\n * CustomProvider is used to provide global configuration, such as language, theme, etc.\n *\n * @see https://rsuitejs.com/components/custom-provider\n */\nvar CustomProvider = function CustomProvider(props) {\n  var children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? getClassNamePrefix() : _props$classPrefix,\n    theme = props.theme,\n    container = props.toastContainer,\n    disableRipple = props.disableRipple,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var toasters = React.useRef(new Map());\n  var _usePortal = usePortal({\n      container: container,\n      waitMount: true\n    }),\n    Portal = _usePortal.Portal;\n  var value = React.useMemo(function () {\n    return _extends({\n      classPrefix: classPrefix,\n      theme: theme,\n      toasters: toasters,\n      disableRipple: disableRipple\n    }, rest);\n  }, [classPrefix, theme, disableRipple, rest]);\n  useIsomorphicLayoutEffect(function () {\n    if (canUseDOM && theme) {\n      addClass(document.body, prefix(classPrefix, \"theme-\" + theme));\n\n      // Remove the className that will cause style conflicts\n      themes.forEach(function (t) {\n        if (t !== theme) {\n          removeClass(document.body, prefix(classPrefix, \"theme-\" + t));\n        }\n      });\n    }\n  }, [classPrefix, theme]);\n  return /*#__PURE__*/React.createElement(CustomContext.Provider, {\n    value: value\n  }, children, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rs-toast-provider\"\n  }, toastPlacements.map(function (placement) {\n    return /*#__PURE__*/React.createElement(ToastContainer, {\n      key: placement,\n      placement: placement,\n      ref: function ref(_ref) {\n        toasters.current.set(placement, _ref);\n      }\n    });\n  }))));\n};\nexport { CustomContext };\nexport default CustomProvider;","map":null,"metadata":{},"sourceType":"module"}