{"ast":null,"code":"var containers = []; // will store container HTMLElement references\nvar styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}\n\nvar usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';\nfunction insertCss(css, options) {\n  options = options || {};\n  if (css === undefined) {\n    throw new Error(usage);\n  }\n  var position = options.prepend === true ? 'prepend' : 'append';\n  var container = options.container !== undefined ? options.container : document.querySelector('head');\n  var containerId = containers.indexOf(container);\n\n  // first time we see this container, create the necessary entries\n  if (containerId === -1) {\n    containerId = containers.push(container) - 1;\n    styleElements[containerId] = {};\n  }\n\n  // try to get the correponding container + position styleElement, create it otherwise\n  var styleElement;\n  if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {\n    styleElement = styleElements[containerId][position];\n  } else {\n    styleElement = styleElements[containerId][position] = createStyleElement();\n    if (position === 'prepend') {\n      container.insertBefore(styleElement, container.childNodes[0]);\n    } else {\n      container.appendChild(styleElement);\n    }\n  }\n\n  // strip potential UTF-8 BOM if css was read from a file\n  if (css.charCodeAt(0) === 0xFEFF) {\n    css = css.substr(1, css.length);\n  }\n\n  // actually add the stylesheet\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText += css;\n  } else {\n    styleElement.textContent += css;\n  }\n  return styleElement;\n}\n;\nfunction createStyleElement() {\n  var styleElement = document.createElement('style');\n  styleElement.setAttribute('type', 'text/css');\n  return styleElement;\n}\nmodule.exports = insertCss;\nmodule.exports.insertCss = insertCss;","map":null,"metadata":{},"sourceType":"script"}