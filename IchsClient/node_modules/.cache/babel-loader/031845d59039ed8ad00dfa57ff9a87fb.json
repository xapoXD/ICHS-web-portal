{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"title\", \"onClose\", \"onOpen\", \"onToggle\", \"trigger\", \"placement\", \"toggleAs\", \"toggleClassName\", \"classPrefix\", \"className\", \"disabled\", \"children\", \"menuStyle\", \"style\"],\n  _excluded2 = [\"open\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport castArray from 'lodash/castArray';\nimport omit from 'lodash/omit';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { PLACEMENT_8 } from \"../internals/constants/index.js\";\nimport { mergeRefs, placementPolyfill } from \"../internals/utils/index.js\";\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\nimport kebabCase from 'lodash/kebabCase';\nimport { NavbarContext } from '.';\nimport Disclosure from \"../internals/Disclosure/Disclosure.js\";\nimport NavDropdownItem from \"../Nav/NavDropdownItem.js\";\nimport NavDropdownMenu from \"../Nav/NavDropdownMenu.js\";\nimport NavbarDropdownToggle from \"./NavbarDropdownToggle.js\";\n/**\n * @private\n */\nvar NavbarDropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var navbar = useContext(NavbarContext);\n  if (!navbar) {\n    throw new Error('<Navbar.Dropdown> should be used within a <Navbar> component.');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    title = props.title,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    _onToggle = props.onToggle,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? 'click' : _props$trigger,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    toggleAs = props.toggleAs,\n    toggleClassName = props.toggleClassName,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    children = props.children,\n    menuStyle = props.menuStyle,\n    style = props.style,\n    toggleProps = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n    withMenuClassPrefix = _useClassNames2.withClassPrefix,\n    mergeMenuClassName = _useClassNames2.merge;\n  return /*#__PURE__*/React.createElement(Disclosure, {\n    trigger: castArray(trigger),\n    hideOnClickOutside: true,\n    onToggle: function onToggle(open) {\n      _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(open);\n      if (open) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n      } else {\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }\n  }, function (_ref, containerRef) {\n    var _withClassPrefix;\n    var open = _ref.open,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded2);\n    var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = !!placement, _withClassPrefix.disabled = disabled, _withClassPrefix.open = open, _withClassPrefix)));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: mergeRefs(ref, containerRef),\n      className: classes,\n      style: style\n    }, props), /*#__PURE__*/React.createElement(Disclosure.Button, null, function (buttonProps, buttonRef) {\n      return /*#__PURE__*/React.createElement(NavbarDropdownToggle, _extends({\n        ref: buttonRef,\n        as: toggleAs,\n        className: toggleClassName,\n        placement: placement,\n        disabled: disabled\n      }, omit(buttonProps, ['open']), toggleProps), title);\n    }), /*#__PURE__*/React.createElement(Disclosure.Content, null, function (_ref2, elementRef) {\n      var open = _ref2.open;\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        ref: elementRef,\n        className: menuClassName,\n        style: menuStyle,\n        hidden: !open\n      }, children);\n    }));\n  });\n});\nNavbarDropdown.Item = NavDropdownItem;\nNavbarDropdown.Menu = NavDropdownMenu;\nNavbarDropdown.displayName = 'Navbar.Dropdown';\nNavbarDropdown.propTypes = {\n  classPrefix: PropTypes.string,\n  trigger: PropTypes.oneOfType([PropTypes.array, oneOf(['click', 'hover', 'contextMenu'])]),\n  placement: oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  open: deprecatePropType(PropTypes.bool),\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  toggleAs: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderToggle: PropTypes.func\n};\nexport default NavbarDropdown;","map":null,"metadata":{},"sourceType":"module"}