{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"disabled\", \"className\", \"placement\", \"selectOnEnter\", \"classPrefix\", \"defaultValue\", \"menuAutoWidth\", \"data\", \"value\", \"open\", \"style\", \"size\", \"menuClassName\", \"id\", \"readOnly\", \"plaintext\", \"renderMenu\", \"renderMenuItem\", \"onSelect\", \"filterBy\", \"onKeyDown\", \"onChange\", \"onClose\", \"onOpen\", \"onFocus\", \"onBlur\", \"onMenuFocus\"];\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport { useClassNames, useControlled, useIsMounted, useEventCallback } from \"../internals/hooks/index.js\";\nimport { mergeRefs, partitionHTMLProps } from \"../internals/utils/index.js\";\nimport { animationPropTypes } from \"../Animation/utils.js\";\nimport { PickerToggleTrigger, onMenuKeyDown, Listbox, ListItem, PickerPopup, useFocusItemValue, usePickerRef, pickTriggerPropKeys } from \"../internals/Picker/index.js\";\nimport { PLACEMENT } from \"../internals/constants/index.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { transformData, shouldDisplay } from \"./utils.js\";\nimport Combobox from \"./Combobox.js\";\n/**\n * Autocomplete function of input field.\n * @see https://rsuitejs.com/components/auto-complete\n *\n * TODO: Remove unnecessary .rs-auto-complete element\n * TODO: role=combobox and aria-autocomplete on input element\n */\nvar AutoComplete = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    disabled = props.disabled,\n    className = props.className,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    _props$selectOnEnter = props.selectOnEnter,\n    selectOnEnter = _props$selectOnEnter === void 0 ? true : _props$selectOnEnter,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'auto-complete' : _props$classPrefix,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,\n    _props$menuAutoWidth = props.menuAutoWidth,\n    menuAutoWidth = _props$menuAutoWidth === void 0 ? true : _props$menuAutoWidth,\n    data = props.data,\n    valueProp = props.value,\n    open = props.open,\n    style = props.style,\n    size = props.size,\n    menuClassName = props.menuClassName,\n    id = props.id,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    renderMenu = props.renderMenu,\n    renderMenuItem = props.renderMenuItem,\n    onSelect = props.onSelect,\n    filterBy = props.filterBy,\n    onKeyDown = props.onKeyDown,\n    onChange = props.onChange,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    onMenuFocus = props.onMenuFocus,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var datalist = transformData(data);\n  var _useControlled = useControlled(valueProp, defaultValue),\n    value = _useControlled[0],\n    setValue = _useControlled[1];\n  var _useState = useState(false),\n    focus = _useState[0],\n    setFocus = _useState[1];\n  var items = (datalist === null || datalist === void 0 ? void 0 : datalist.filter(shouldDisplay(filterBy, value))) || [];\n  var hasItems = items.length > 0;\n  var _usePickerRef = usePickerRef(ref),\n    trigger = _usePickerRef.trigger,\n    overlay = _usePickerRef.overlay,\n    root = _usePickerRef.root;\n  var isMounted = useIsMounted();\n\n  // Used to hover the focuse item  when trigger `onKeydown`\n  var _useFocusItemValue = useFocusItemValue(value, {\n      data: datalist,\n      focusToOption: false,\n      callback: onMenuFocus,\n      target: function target() {\n        return overlay.current;\n      }\n    }),\n    focusItemValue = _useFocusItemValue.focusItemValue,\n    setFocusItemValue = _useFocusItemValue.setFocusItemValue,\n    handleKeyDown = _useFocusItemValue.onKeyDown;\n  var handleKeyDownEvent = function handleKeyDownEvent(event) {\n    if (!overlay.current) {\n      return;\n    }\n    onMenuKeyDown(event, {\n      enter: selectOnEnter ? selectFocusMenuItem : undefined,\n      esc: handleClose\n    });\n    handleKeyDown(event);\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n  var selectFocusMenuItem = function selectFocusMenuItem(event) {\n    if (!focusItemValue) {\n      return;\n    }\n    var focusItem = datalist.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === focusItemValue;\n    });\n    setValue(focusItemValue);\n    setFocusItemValue(focusItemValue);\n    handleSelect(focusItem, event);\n    if (value !== focusItemValue) {\n      handleChangeValue(focusItemValue, event);\n    }\n    handleClose();\n  };\n  var handleSelect = useEventCallback(function (item, event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(item.value, item, event);\n  });\n  var handleChangeValue = useEventCallback(function (value, event) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  });\n  var handleChange = function handleChange(value, event) {\n    setFocusItemValue('');\n    setValue(value);\n    setFocus(true);\n    handleChangeValue(value, event);\n  };\n  var handleClose = useEventCallback(function () {\n    if (isMounted()) {\n      setFocus(false);\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  });\n  var handleOpen = useEventCallback(function () {\n    setFocus(true);\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n  });\n  var handleItemSelect = useEventCallback(function (nextItemValue, item, event) {\n    setValue(nextItemValue);\n    setFocusItemValue(nextItemValue);\n    handleSelect(item, event);\n    if (value !== nextItemValue) {\n      handleChangeValue(nextItemValue, event);\n    }\n    handleClose();\n  });\n  var handleInputFocus = useEventCallback(function (event) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    handleOpen();\n  });\n  var handleInputBlur = useEventCallback(function (event) {\n    setTimeout(handleClose, 300);\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  });\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled\n  }));\n  var _partitionHTMLProps = partitionHTMLProps(omit(rest, pickTriggerPropKeys)),\n    htmlInputProps = _partitionHTMLProps[0],\n    restProps = _partitionHTMLProps[1];\n  var renderPopup = function renderPopup(positionProps, speakerRef) {\n    var left = positionProps.left,\n      top = positionProps.top,\n      className = positionProps.className;\n    var styles = {\n      left: left,\n      top: top\n    };\n    var menu = /*#__PURE__*/React.createElement(Listbox, {\n      classPrefix: \"auto-complete-menu\",\n      listItemClassPrefix: \"auto-complete-item\",\n      listItemAs: ListItem,\n      focusItemValue: focusItemValue,\n      onSelect: handleItemSelect,\n      renderMenuItem: renderMenuItem,\n      data: items,\n      className: menuClassName,\n      query: value\n    });\n    return /*#__PURE__*/React.createElement(PickerPopup, {\n      ref: mergeRefs(overlay, speakerRef),\n      style: styles,\n      className: className,\n      onKeyDown: handleKeyDownEvent,\n      target: trigger,\n      autoWidth: menuAutoWidth\n    }, renderMenu ? renderMenu(menu) : menu);\n  };\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"unfilled\"\n    }, typeof value === 'undefined' ? defaultValue : value);\n  }\n  var expanded = open || focus && hasItems;\n  return /*#__PURE__*/React.createElement(PickerToggleTrigger, {\n    id: id,\n    ref: trigger,\n    placement: placement,\n    pickerProps: pick(props, pickTriggerPropKeys),\n    trigger: ['click', 'focus'],\n    open: expanded,\n    speaker: renderPopup\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: classes,\n    style: style,\n    ref: root\n  }, restProps), /*#__PURE__*/React.createElement(Combobox, _extends({}, htmlInputProps, {\n    disabled: disabled,\n    value: value,\n    size: size,\n    readOnly: readOnly,\n    expanded: expanded,\n    focusItemValue: focusItemValue,\n    onBlur: handleInputBlur,\n    onFocus: handleInputFocus,\n    onChange: handleChange,\n    onKeyDown: handleKeyDownEvent\n  }))));\n});\nAutoComplete.displayName = 'AutoComplete';\nAutoComplete.propTypes = _extends({}, animationPropTypes, {\n  data: PropTypes.array,\n  disabled: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  className: PropTypes.string,\n  menuClassName: PropTypes.string,\n  menuAutoWidth: PropTypes.bool,\n  placement: oneOf(PLACEMENT),\n  onFocus: PropTypes.func,\n  onMenuFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  readOnly: PropTypes.bool,\n  renderMenu: PropTypes.func,\n  renderMenuItem: PropTypes.func,\n  style: PropTypes.object,\n  size: oneOf(['lg', 'md', 'sm', 'xs']),\n  open: PropTypes.bool,\n  selectOnEnter: PropTypes.bool,\n  filterBy: PropTypes.func\n});\nexport default AutoComplete;","map":null,"metadata":{},"sourceType":"module"}