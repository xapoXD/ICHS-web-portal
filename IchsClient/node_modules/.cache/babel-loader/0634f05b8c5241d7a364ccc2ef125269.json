{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"timeout\", \"dimension\", \"exitedClassName\", \"exitingClassName\", \"enteredClassName\", \"enteringClassName\", \"getDimensionValue\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport getStyle from 'dom-lib/getStyle';\nimport addStyle from 'dom-lib/addStyle';\nimport get from 'lodash/get';\nimport capitalize from 'lodash/capitalize';\nimport Transition, { transitionPropTypes } from \"./Transition.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { createChainedFunction } from \"../internals/utils/index.js\";\nexport var DIMENSION = /*#__PURE__*/function (DIMENSION) {\n  DIMENSION[\"HEIGHT\"] = \"height\";\n  DIMENSION[\"WIDTH\"] = \"width\";\n  return DIMENSION;\n}({});\nvar triggerBrowserReflow = function triggerBrowserReflow(node) {\n  return get(node, 'offsetHeight');\n};\nvar MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\nfunction defaultGetDimensionValue(dimension, elem) {\n  var _get;\n  var value = (_get = get(elem, \"offset\" + capitalize(dimension))) !== null && _get !== void 0 ? _get : 0;\n  var margins = MARGINS[dimension];\n  return value + parseInt(getStyle(elem, margins[0]), 10) + parseInt(getStyle(elem, margins[1]), 10);\n}\nfunction getScrollDimensionValue(elem, dimension) {\n  var value = get(elem, \"scroll\" + capitalize(dimension));\n  return value + \"px\";\n}\n\n/**\n * A Collapse animation component.\n * @see https://rsuitejs.com/components/animation/#collapse\n */\nvar Collapse = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n    _props$timeout = props.timeout,\n    timeout = _props$timeout === void 0 ? 300 : _props$timeout,\n    _props$dimension = props.dimension,\n    dimensionProp = _props$dimension === void 0 ? DIMENSION.HEIGHT : _props$dimension,\n    exitedClassName = props.exitedClassName,\n    exitingClassName = props.exitingClassName,\n    enteredClassName = props.enteredClassName,\n    enteringClassName = props.enteringClassName,\n    _props$getDimensionVa = props.getDimensionValue,\n    getDimensionValue = _props$getDimensionVa === void 0 ? defaultGetDimensionValue : _props$getDimensionVa,\n    onEnter = props.onEnter,\n    onEntering = props.onEntering,\n    onEntered = props.onEntered,\n    onExit = props.onExit,\n    onExiting = props.onExiting,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames('anim'),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var dimension = typeof dimensionProp === 'function' ? dimensionProp() : dimensionProp;\n  var handleEnter = useCallback(function (elem) {\n    addStyle(elem, dimension, 0);\n  }, [dimension]);\n  var handleEntering = useCallback(function (elem) {\n    addStyle(elem, dimension, getScrollDimensionValue(elem, dimension));\n  }, [dimension]);\n  var handleEntered = useCallback(function (elem) {\n    addStyle(elem, dimension, 'auto');\n  }, [dimension]);\n  var handleExit = useCallback(function (elem) {\n    var value = getDimensionValue ? getDimensionValue(dimension, elem) : 0;\n    addStyle(elem, dimension, value + \"px\");\n  }, [dimension, getDimensionValue]);\n  var handleExiting = useCallback(function (elem) {\n    triggerBrowserReflow(elem);\n    addStyle(elem, dimension, 0);\n  }, [dimension]);\n  return /*#__PURE__*/React.createElement(Transition, _extends({}, rest, {\n    ref: ref,\n    timeout: timeout,\n    className: merge(className, prefix({\n      'collapse-horizontal': dimension === 'width'\n    })),\n    exitedClassName: exitedClassName || prefix('collapse'),\n    exitingClassName: exitingClassName || prefix('collapsing'),\n    enteredClassName: enteredClassName || prefix('collapse', 'in'),\n    enteringClassName: enteringClassName || prefix('collapsing'),\n    onEnter: createChainedFunction(handleEnter, onEnter),\n    onEntering: createChainedFunction(handleEntering, onEntering),\n    onEntered: createChainedFunction(handleEntered, onEntered),\n    onExit: createChainedFunction(handleExit, onExit),\n    onExiting: createChainedFunction(handleExiting, onExiting)\n  }));\n});\nCollapse.displayName = 'Collapse';\nCollapse.propTypes = _extends({}, transitionPropTypes, {\n  dimension: PropTypes.any,\n  getDimensionValue: PropTypes.func\n});\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}