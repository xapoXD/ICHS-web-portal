{"ast":null,"code":"'use client';\n\nimport { useState, useCallback, useMemo } from 'react';\nimport isUndefined from 'lodash/isUndefined';\nimport { shouldDisplay } from \"../utils.js\";\n/**\n * A hook that handles search filter options\n */\nfunction useSearch(data, props) {\n  var labelKey = props.labelKey,\n    searchBy = props.searchBy,\n    callback = props.callback;\n\n  // Use search keywords to filter options.\n  var _useState = useState(''),\n    searchKeyword = _useState[0],\n    setSearchKeyword = _useState[1];\n  var resetSearch = useCallback(function () {\n    setSearchKeyword('');\n  }, []);\n\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n  var checkShouldDisplay = useCallback(function (item, keyword) {\n    var checkValue = typeof item === 'object' ? item === null || item === void 0 ? void 0 : item[labelKey] : String(item);\n    var _keyword = isUndefined(keyword) ? searchKeyword : keyword;\n    if (typeof searchBy === 'function') {\n      return searchBy(_keyword, checkValue, item);\n    }\n    return shouldDisplay(checkValue, _keyword);\n  }, [labelKey, searchBy, searchKeyword]);\n  var filteredData = useMemo(function () {\n    return data.filter(function (item) {\n      return checkShouldDisplay(item, searchKeyword);\n    });\n  }, [checkShouldDisplay, data, searchKeyword]);\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = data.filter(function (item) {\n      return checkShouldDisplay(item, searchKeyword);\n    });\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n  return {\n    searchKeyword: searchKeyword,\n    filteredData: filteredData,\n    checkShouldDisplay: checkShouldDisplay,\n    handleSearch: handleSearch,\n    resetSearch: resetSearch\n  };\n}\nexport default useSearch;","map":null,"metadata":{},"sourceType":"module"}