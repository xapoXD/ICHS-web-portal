{"ast":null,"code":"'use client';\n\nimport { useCallback, useRef } from 'react';\nimport { getPatternGroups } from \"../utils.js\";\nimport { useUpdateEffect } from \"../../internals/hooks/index.js\";\nexport function useFieldCursor(format, value) {\n  var typeCount = useRef(0);\n  var increment = useCallback(function () {\n    typeCount.current += 1;\n  }, []);\n  var reset = useCallback(function () {\n    typeCount.current = 0;\n  }, []);\n  var isResetValue = useCallback(function () {\n    return typeCount.current === 0;\n  }, []);\n\n  // Check if the cursor should move to the next field\n  var isMoveCursor = useCallback(function (value, pattern) {\n    var patternGroup = getPatternGroups(format, pattern);\n    if (value.toString().length === patternGroup.length) {\n      return true;\n    } else if (pattern === 'y' && typeCount.current === 4) {\n      return true;\n    } else if (pattern !== 'y' && typeCount.current === 2) {\n      return true;\n    }\n    switch (pattern) {\n      case 'M':\n        return parseInt(value + \"0\") > 12;\n      case 'd':\n        return parseInt(value + \"0\") > 31;\n      case 'H':\n        return parseInt(value + \"0\") > 23;\n      case 'h':\n        return parseInt(value + \"0\") > 12;\n      case 'm':\n      case 's':\n        return parseInt(value + \"0\") > 59;\n      default:\n        return false;\n    }\n  }, [format]);\n  useUpdateEffect(function () {\n    if (!value) {\n      reset();\n    }\n  }, [value]);\n  return {\n    increment: increment,\n    reset: reset,\n    isMoveCursor: isMoveCursor,\n    isResetValue: isResetValue\n  };\n}\nexport default useFieldCursor;","map":null,"metadata":{},"sourceType":"module"}