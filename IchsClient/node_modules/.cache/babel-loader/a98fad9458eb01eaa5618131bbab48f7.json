{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject;\nvar _excluded = [\"as\", \"accepter\", \"classPrefix\", \"checkAsync\", \"checkTrigger\", \"errorPlacement\", \"errorMessage\", \"name\", \"value\", \"readOnly\", \"plaintext\", \"disabled\", \"onChange\", \"onBlur\", \"defaultValue\", \"shouldResetWithUnmount\", \"rule\", \"id\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from \"../Input/index.js\";\nimport FormErrorMessage from \"../FormErrorMessage/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport FormContext, { FormValueContext } from \"../Form/FormContext.js\";\nimport { useFormGroup } from \"../FormGroup/index.js\";\nimport { useWillUnmount, useEventCallback } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport useRegisterModel from \"./hooks/useRegisterModel.js\";\nimport useField from \"./hooks/useField.js\";\nimport Toggle from \"../Toggle/index.js\";\n\n/**\n * Props that FormControl passes to its accepter\n */\n\n/**\n * The `<Form.Control>` component is used to wrap the components that need to be validated.\n * @see https://rsuitejs.com/components/form/\n */\nvar FormControl = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _accepterProps;\n  var _useContext = useContext(FormContext),\n    readOnlyContext = _useContext.readOnly,\n    plaintextContext = _useContext.plaintext,\n    disabledContext = _useContext.disabled,\n    errorFromContext = _useContext.errorFromContext,\n    formError = _useContext.formError,\n    nestedField = _useContext.nestedField,\n    removeFieldValue = _useContext.removeFieldValue,\n    removeFieldError = _useContext.removeFieldError,\n    onFieldChange = _useContext.onFieldChange,\n    onFieldError = _useContext.onFieldError,\n    onFieldSuccess = _useContext.onFieldSuccess,\n    getCombinedModel = _useContext.getCombinedModel,\n    contextCheckTrigger = _useContext.checkTrigger;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$accepter = props.accepter,\n    AccepterComponent = _props$accepter === void 0 ? Input : _props$accepter,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'form-control' : _props$classPrefix,\n    checkAsync = props.checkAsync,\n    checkTrigger = props.checkTrigger,\n    _props$errorPlacement = props.errorPlacement,\n    errorPlacement = _props$errorPlacement === void 0 ? 'bottomStart' : _props$errorPlacement,\n    errorMessage = props.errorMessage,\n    name = props.name,\n    value = props.value,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? readOnlyContext : _props$readOnly,\n    _props$plaintext = props.plaintext,\n    plaintext = _props$plaintext === void 0 ? plaintextContext : _props$plaintext,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,\n    onChange = props.onChange,\n    onBlur = props.onBlur,\n    defaultValue = props.defaultValue,\n    _props$shouldResetWit = props.shouldResetWithUnmount,\n    shouldResetWithUnmount = _props$shouldResetWit === void 0 ? false : _props$shouldResetWit,\n    rule = props.rule,\n    id = props.id,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useFormGroup = useFormGroup(id),\n    controlId = _useFormGroup.controlId,\n    helpTextId = _useFormGroup.helpTextId,\n    labelId = _useFormGroup.labelId,\n    errorMessageId = _useFormGroup.errorMessageId;\n  if (!onFieldChange) {\n    throw new Error(\"\\n      <FormControl> must be inside a component decorated with <Form>.\\n      And need to update React to 16.6.0 +.\\n    \");\n  }\n  useRegisterModel(name, rule);\n  useWillUnmount(function () {\n    if (shouldResetWithUnmount) {\n      removeFieldValue === null || removeFieldValue === void 0 ? void 0 : removeFieldValue(name);\n      removeFieldError === null || removeFieldError === void 0 ? void 0 : removeFieldError(name);\n    }\n  });\n  var trigger = checkTrigger || contextCheckTrigger;\n  var formValue = useContext(FormValueContext);\n  var _useField = useField({\n      name: name,\n      errorMessage: errorMessage,\n      formValue: formValue,\n      formError: formError,\n      value: value,\n      nestedField: nestedField,\n      errorFromContext: errorFromContext\n    }),\n    fieldValue = _useField.fieldValue,\n    fieldError = _useField.fieldError,\n    setFieldValue = _useField.setFieldValue;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = withClassPrefix('wrapper');\n  var handleFieldChange = useEventCallback(function (value, event) {\n    if (trigger === 'change') {\n      handleFieldCheck(value);\n    }\n    onFieldChange === null || onFieldChange === void 0 ? void 0 : onFieldChange(name, value, event);\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  });\n  var handleFieldBlur = useEventCallback(function (event) {\n    if (trigger === 'blur') {\n      handleFieldCheck(fieldValue);\n    }\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  });\n  var handleFieldCheck = useEventCallback(function (value) {\n    var callbackEvents = function callbackEvents(checkResult) {\n      if (checkResult.hasError) {\n        var _errorMessage = checkResult.errorMessage;\n        var _fieldError = nestedField ? checkResult : _errorMessage || checkResult;\n        onFieldError === null || onFieldError === void 0 ? void 0 : onFieldError(name, _fieldError);\n      } else {\n        onFieldSuccess === null || onFieldSuccess === void 0 ? void 0 : onFieldSuccess(name);\n      }\n      return checkResult;\n    };\n    var nextFormValue = setFieldValue(name, value);\n    var model = getCombinedModel();\n    var checkOptions = {\n      nestedObject: nestedField\n    };\n    if (checkAsync) {\n      return model === null || model === void 0 ? void 0 : model.checkForFieldAsync(name, nextFormValue, checkOptions).then(function (checkResult) {\n        return callbackEvents(checkResult);\n      });\n    }\n    return Promise.resolve(callbackEvents(model === null || model === void 0 ? void 0 : model.checkForField(name, nextFormValue, checkOptions)));\n  });\n  var fieldHasError = Boolean(fieldError);\n\n  // Toggle component is a special case that uses `checked` and `defaultChecked` instead of `value` and `defaultValue` props.\n  var valueKey = AccepterComponent === Toggle ? 'checked' : 'value';\n  var accepterProps = (_accepterProps = {}, _accepterProps[valueKey] = fieldValue === undefined ? defaultValue : fieldValue, _accepterProps);\n  return /*#__PURE__*/React.createElement(Component, {\n    className: classes,\n    ref: ref,\n    \"data-testid\": \"form-control-wrapper\"\n  }, /*#__PURE__*/React.createElement(AccepterComponent, _extends({\n    id: controlId,\n    \"aria-labelledby\": labelId,\n    \"aria-describedby\": helpTextId,\n    \"aria-invalid\": fieldHasError || undefined,\n    \"aria-errormessage\": fieldHasError ? errorMessageId : undefined\n  }, accepterProps, rest, {\n    readOnly: readOnly,\n    plaintext: plaintext,\n    disabled: disabled,\n    name: name,\n    onChange: handleFieldChange,\n    onBlur: handleFieldBlur\n  })), /*#__PURE__*/React.createElement(FormErrorMessage, {\n    id: errorMessageId,\n    role: \"alert\",\n    \"aria-relevant\": \"all\",\n    show: fieldHasError,\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"message-wrapper\"]))),\n    placement: errorPlacement\n  }, fieldError));\n});\nFormControl.displayName = 'FormControl';\nFormControl.propTypes = {\n  name: PropTypes.string.isRequired,\n  checkTrigger: oneOf(['change', 'blur', 'none']),\n  checkAsync: PropTypes.bool,\n  accepter: PropTypes.any,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  classPrefix: PropTypes.string,\n  errorMessage: PropTypes.node,\n  errorPlacement: oneOf(['bottomStart', 'bottomEnd', 'topStart', 'topEnd', 'leftStart', 'rightStart', 'leftEnd', 'rightEnd']),\n  value: PropTypes.any\n};\nexport default FormControl;","map":null,"metadata":{},"sourceType":"module"}