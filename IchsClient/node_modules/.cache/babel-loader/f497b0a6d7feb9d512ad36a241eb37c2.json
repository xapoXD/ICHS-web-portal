{"ast":null,"code":"'use client';\n\nimport React, { useCallback } from 'react';\nimport { TREE_NODE_DROP_POSITION } from \"../../internals/constants/index.js\";\nimport { shallowEqual as equal } from \"../../internals/utils/index.js\";\nimport { useCombobox } from \"../../internals/Picker/hooks/index.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\nimport Highlight from \"../../Highlight/index.js\";\nfunction useTreeNodeProps(props) {\n  var _useItemDataKeys = useItemDataKeys(),\n    valueKey = _useItemDataKeys.valueKey,\n    labelKey = _useItemDataKeys.labelKey,\n    childrenKey = _useItemDataKeys.childrenKey;\n  var _useCombobox = useCombobox(),\n    id = _useCombobox.id;\n  var value = props.value,\n    disabledItemValues = props.disabledItemValues,\n    loadingNodeValues = props.loadingNodeValues,\n    focusItemValue = props.focusItemValue,\n    keyword = props.keyword,\n    dragNode = props.dragNode,\n    dragOverNodeKey = props.dragOverNodeKey,\n    dropNodePosition = props.dropNodePosition;\n  return useCallback(function (nodeData, layer, index) {\n    var DRAG_OVER = TREE_NODE_DROP_POSITION.DRAG_OVER,\n      DRAG_OVER_TOP = TREE_NODE_DROP_POSITION.DRAG_OVER_TOP,\n      DRAG_OVER_BOTTOM = TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n    var visible = nodeData.visible;\n    var draggingNode = dragNode !== null && dragNode !== void 0 ? dragNode : {};\n    var nodeValue = nodeData[valueKey];\n    var nodeLabel = nodeData[labelKey];\n    var children = nodeData[childrenKey];\n    var label = keyword ? /*#__PURE__*/React.createElement(Highlight, {\n      as: \"span\",\n      query: keyword\n    }, nodeLabel) : nodeLabel;\n    var dragging = equal(nodeValue, draggingNode[valueKey]);\n    var dragStatus;\n    if (equal(nodeValue, dragOverNodeKey)) {\n      switch (dropNodePosition) {\n        case DRAG_OVER:\n          dragStatus = 'drag-over';\n          break;\n        case DRAG_OVER_TOP:\n          dragStatus = 'drag-over-top';\n          break;\n        case DRAG_OVER_BOTTOM:\n          dragStatus = 'drag-over-bottom';\n          break;\n      }\n    }\n    var disabled = disabledItemValues.some(function (disabledItem) {\n      return equal(disabledItem, nodeValue);\n    });\n    var loading = loadingNodeValues.some(function (item) {\n      return equal(item, nodeValue);\n    });\n    var active = equal(nodeValue, value);\n    var focus = equal(nodeValue, focusItemValue);\n    return {\n      id: id ? id + \"-opt-\" + nodeValue : undefined,\n      value: nodeValue,\n      label: label,\n      index: index,\n      layer: layer,\n      loading: loading,\n      active: active,\n      focus: focus,\n      visible: visible,\n      children: children,\n      nodeData: nodeData,\n      disabled: disabled,\n      dragging: dragging,\n      dragStatus: dragStatus\n    };\n  }, [childrenKey, disabledItemValues, dragNode, dragOverNodeKey, dropNodePosition, focusItemValue, id, keyword, labelKey, loadingNodeValues, value, valueKey]);\n}\nexport default useTreeNodeProps;","map":null,"metadata":{},"sourceType":"module"}