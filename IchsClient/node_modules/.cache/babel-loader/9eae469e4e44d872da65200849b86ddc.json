{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// Inspired by tailwindlabs/headlessui\nimport { useReducer } from 'react';\nimport { MenuActionTypes, MoveFocusTo } from \"./MenuContext.js\";\nexport var initialMenuState = {\n  role: 'menu',\n  open: false,\n  items: [],\n  activeItemIndex: null\n};\nexport function menuReducer(state, action) {\n  var items = state.items,\n    activeItemIndex = state.activeItemIndex;\n  switch (action.type) {\n    case MenuActionTypes.RegisterItem:\n      return _extends({}, state, {\n        items: [].concat(items, [{\n          element: action.element,\n          props: action.props\n        }])\n      });\n    case MenuActionTypes.UnregisterItem:\n      return _extends({}, state, {\n        items: items.filter(function (item) {\n          return item.element.id !== action.id;\n        })\n      });\n    case MenuActionTypes.OpenMenu:\n      return _extends({}, state, {\n        open: true\n      });\n    case MenuActionTypes.CloseMenu:\n      return _extends({}, state, {\n        open: false\n      });\n    case MenuActionTypes.MoveFocus:\n      var nextActiveItemIndex = activeItemIndex;\n      switch (action.to) {\n        case MoveFocusTo.Next:\n          for (var i = activeItemIndex === null ? 0 : activeItemIndex + 1; i < items.length; i++) {\n            var _items$i$props;\n            if (!((_items$i$props = items[i].props) !== null && _items$i$props !== void 0 && _items$i$props.disabled)) {\n              nextActiveItemIndex = i;\n              break;\n            }\n          }\n          break;\n        case MoveFocusTo.Prev:\n          for (var _i = activeItemIndex === null ? items.length - 1 : activeItemIndex - 1; _i >= 0; _i--) {\n            var _items$_i$props;\n            if (!((_items$_i$props = items[_i].props) !== null && _items$_i$props !== void 0 && _items$_i$props.disabled)) {\n              nextActiveItemIndex = _i;\n              break;\n            }\n          }\n          break;\n        case MoveFocusTo.First:\n          for (var _i2 = 0; _i2 < items.length; _i2++) {\n            var _items$_i2$props;\n            if (!((_items$_i2$props = items[_i2].props) !== null && _items$_i2$props !== void 0 && _items$_i2$props.disabled)) {\n              nextActiveItemIndex = _i2;\n              break;\n            }\n          }\n          break;\n        case MoveFocusTo.Last:\n          for (var _i3 = items.length - 1; _i3 >= 0; _i3--) {\n            var _items$_i3$props;\n            if (!((_items$_i3$props = items[_i3].props) !== null && _items$_i3$props !== void 0 && _items$_i3$props.disabled)) {\n              nextActiveItemIndex = _i3;\n              break;\n            }\n          }\n          break;\n        case MoveFocusTo.Specific:\n          for (var _i4 = 0; _i4 < items.length; _i4++) {\n            var _items$_i4$props;\n            if (items[_i4].element.id === action.id && !((_items$_i4$props = items[_i4].props) !== null && _items$_i4$props !== void 0 && _items$_i4$props.disabled)) {\n              nextActiveItemIndex = _i4;\n              break;\n            }\n          }\n          break;\n        case MoveFocusTo.None:\n          nextActiveItemIndex = null;\n          break;\n      }\n      return _extends({}, state, {\n        activeItemIndex: nextActiveItemIndex\n      });\n    default:\n      return state;\n  }\n}\nexport default function useMenu(initialState) {\n  // `menuitem`s\n  var _useReducer = useReducer(menuReducer, _extends({}, initialMenuState, initialState)),\n    state = _useReducer[0],\n    dispatch = _useReducer[1];\n  return [state, dispatch];\n}","map":null,"metadata":{},"sourceType":"module"}