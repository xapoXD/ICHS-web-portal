{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"classPrefix\", \"as\", \"type\", \"disabled\", \"value\", \"defaultValue\", \"inputRef\", \"id\", \"size\", \"htmlSize\", \"plaintext\", \"placeholder\", \"readOnly\", \"onPressEnter\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onChange\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormGroup } from \"../FormGroup/index.js\";\nimport { InputGroupContext } from \"../InputGroup/InputGroup.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nimport { KEY_VALUES } from \"../internals/constants/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { createChainedFunction, mergeRefs } from \"../internals/utils/index.js\";\nimport { refType, oneOf } from \"../internals/propTypes/index.js\";\n/**\n * The `<Input>` component is used to get user input in a text field.\n *\n * @see https://rsuitejs.com/components/input\n */\nvar Input = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'input' : _props$classPrefix,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'input' : _props$as,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'text' : _props$type,\n    disabled = props.disabled,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    inputRef = props.inputRef,\n    id = props.id,\n    size = props.size,\n    htmlSize = props.htmlSize,\n    plaintext = props.plaintext,\n    placeholder = props.placeholder,\n    readOnly = props.readOnly,\n    onPressEnter = props.onPressEnter,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    onKeyDown = props.onKeyDown,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.key === KEY_VALUES.ENTER) {\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n  var handleChange = function handleChange(event) {\n    var _event$target;\n    onChange === null || onChange === void 0 ? void 0 : onChange((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value, event);\n  };\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix(size, {\n    plaintext: plaintext\n  }));\n  var inputGroupContext = useContext(InputGroupContext);\n  var _useFormGroup = useFormGroup(),\n    controlId = _useFormGroup.controlId;\n\n  // Make the Input component display in plain text,\n  // and display default characters when there is no value.\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"unfilled\",\n      placeholder: placeholder\n    }, typeof value === 'undefined' ? defaultValue : value);\n  }\n  var inputable = !disabled && !readOnly;\n  var eventProps = {};\n  if (inputable) {\n    eventProps.onChange = handleChange;\n    eventProps.onKeyDown = handleKeyDown;\n    eventProps.onFocus = createChainedFunction(onFocus, inputGroupContext === null || inputGroupContext === void 0 ? void 0 : inputGroupContext.onFocus);\n    eventProps.onBlur = createChainedFunction(onBlur, inputGroupContext === null || inputGroupContext === void 0 ? void 0 : inputGroupContext.onBlur);\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, eventProps, {\n    ref: mergeRefs(ref, inputRef),\n    className: classes,\n    type: type,\n    id: id || controlId,\n    value: value,\n    defaultValue: defaultValue,\n    disabled: disabled,\n    readOnly: readOnly,\n    size: htmlSize,\n    placeholder: placeholder\n  }));\n});\nInput.displayName = 'Input';\nInput.propTypes = {\n  type: PropTypes.string,\n  as: PropTypes.elementType,\n  id: PropTypes.string,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: oneOf(['lg', 'md', 'sm', 'xs']),\n  inputRef: refType,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onPressEnter: PropTypes.func\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}