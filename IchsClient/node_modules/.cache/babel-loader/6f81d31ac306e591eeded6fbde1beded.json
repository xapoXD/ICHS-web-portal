{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"accordion\", \"defaultActiveKey\", \"bordered\", \"className\", \"classPrefix\", \"children\", \"activeKey\", \"onSelect\"];\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useControlled, useEventCallback } from \"../internals/hooks/index.js\";\nexport var PanelGroupContext = /*#__PURE__*/React.createContext({});\n\n/**\n * The `PanelGroup` component is used to display content that can be collapsed.\n * @see https://rsuitejs.com/components/panel\n */\nvar PanelGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    accordion = props.accordion,\n    defaultActiveKey = props.defaultActiveKey,\n    bordered = props.bordered,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'panel-group' : _props$classPrefix,\n    children = props.children,\n    activeProp = props.activeKey,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var _useControlled = useControlled(activeProp, defaultActiveKey),\n    activeKey = _useControlled[0],\n    setActiveKey = _useControlled[1];\n  var classes = merge(className, withClassPrefix({\n    accordion: accordion,\n    bordered: bordered\n  }));\n  var handleSelect = useEventCallback(function (activeKey, event) {\n    setActiveKey(activeKey);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(activeKey, event);\n  });\n  var contextValue = useMemo(function () {\n    return {\n      accordion: accordion,\n      activeKey: activeKey,\n      onGroupSelect: handleSelect\n    };\n  }, [accordion, activeKey, handleSelect]);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(PanelGroupContext.Provider, {\n    value: contextValue\n  }, children));\n});\nPanelGroup.displayName = 'PanelGroup';\nPanelGroup.propTypes = {\n  accordion: PropTypes.bool,\n  activeKey: PropTypes.any,\n  bordered: PropTypes.bool,\n  defaultActiveKey: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  onSelect: PropTypes.func\n};\nexport default PanelGroup;","map":null,"metadata":{},"sourceType":"module"}