{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"children\", \"classPrefix\", \"checked\", \"className\", \"defaultChecked\", \"disabled\", \"icon\", \"value\", \"label\", \"name\", \"tabIndex\", \"onChange\"];\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport CheckIcon from '@rsuite/icons/Check';\nimport Stack from \"../Stack/index.js\";\nimport { RadioTileContext } from \"../RadioTileGroup/RadioTileGroup.js\";\nimport { useClassNames, useControlled, useUniqueId } from \"../internals/hooks/index.js\";\nimport { partitionHTMLProps } from \"../internals/utils/index.js\";\n/**\n * A series of selectable tile components that behave like Radio.\n * @version 5.35.0\n * @see https://rsuitejs.com/components/radio-tile/\n */\nvar RadioTile = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useContext = useContext(RadioTileContext),\n    groupValue = _useContext.value,\n    nameContext = _useContext.name,\n    disabledContext = _useContext.disabled,\n    onGroupChange = _useContext.onChange;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? Stack : _props$as,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'radio-tile' : _props$classPrefix,\n    checkedProp = props.checked,\n    className = props.className,\n    defaultChecked = props.defaultChecked,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? disabledContext : _props$disabled,\n    icon = props.icon,\n    value = props.value,\n    label = props.label,\n    _props$name = props.name,\n    name = _props$name === void 0 ? nameContext : _props$name,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useControlled = useControlled(typeof groupValue !== 'undefined' ? groupValue === value : checkedProp, defaultChecked || false),\n    checked = _useControlled[0],\n    setChecked = _useControlled[1];\n  var _partitionHTMLProps = partitionHTMLProps(rest),\n    htmlInputProps = _partitionHTMLProps[0],\n    restProps = _partitionHTMLProps[1];\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var handleChange = useCallback(function (event) {\n    setChecked(true);\n    onGroupChange === null || onGroupChange === void 0 ? void 0 : onGroupChange(value, event);\n    onChange === null || onChange === void 0 ? void 0 : onChange(value, event);\n  }, [onChange, onGroupChange, setChecked, value]);\n  var classes = merge(className, withClassPrefix({\n    checked: checked,\n    disabled: disabled\n  }));\n  var radioId = useUniqueId('radio-');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    spacing: 6\n  }, restProps, {\n    childrenRenderMode: \"clone\",\n    ref: ref,\n    className: classes,\n    as: \"label\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('icon')\n  }, icon), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('body')\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, {\n    type: \"radio\",\n    name: name,\n    value: value,\n    checked: checked,\n    tabIndex: tabIndex,\n    disabled: disabled,\n    onChange: handleChange,\n    \"aria-checked\": checked,\n    \"aria-disabled\": disabled,\n    \"aria-labelledby\": radioId + \"-label\",\n    \"aria-describedby\": radioId + \"-desc\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('label'),\n    id: radioId + \"-label\"\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content'),\n    id: radioId + \"-desc\"\n  }, children), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('mark')\n  }, /*#__PURE__*/React.createElement(CheckIcon, {\n    className: prefix('mark-icon')\n  }))));\n});\nRadioTile.displayName = 'RadioTile';\nRadioTile.propTypes = {\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func\n};\nexport default RadioTile;","map":null,"metadata":{},"sourceType":"module"}