{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"listType\", \"defaultFileList\", \"fileList\", \"fileListVisible\", \"locale\", \"style\", \"draggable\", \"name\", \"multiple\", \"disabled\", \"readOnly\", \"plaintext\", \"accept\", \"children\", \"toggleAs\", \"removable\", \"disabledFileItem\", \"maxPreviewFileSize\", \"method\", \"autoUpload\", \"action\", \"headers\", \"withCredentials\", \"disableMultipart\", \"timeout\", \"data\", \"onRemove\", \"onUpload\", \"shouldUpload\", \"shouldQueueUpdate\", \"renderFileInfo\", \"renderThumbnail\", \"onPreview\", \"onChange\", \"onSuccess\", \"onError\", \"onProgress\", \"onReupload\"];\nimport React, { useCallback, useRef, useImperativeHandle, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport find from 'lodash/find';\nimport FileItem from \"./UploadFileItem.js\";\nimport UploadTrigger from \"./UploadTrigger.js\";\nimport { useClassNames, useCustom, useWillUnmount } from \"../internals/hooks/index.js\";\nimport { guid } from \"../internals/utils/index.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport ajaxUpload from \"./utils/ajaxUpload.js\";\n\n// Define several states of the file during the upload process.\n\nvar getFiles = function getFiles(event) {\n  if (typeof (event === null || event === void 0 ? void 0 : event['dataTransfer']) === 'object') {\n    var _event$dataTransfer;\n    return event === null || event === void 0 ? void 0 : (_event$dataTransfer = event['dataTransfer']) === null || _event$dataTransfer === void 0 ? void 0 : _event$dataTransfer.files;\n  }\n  if (event.target) {\n    return event.target['files'];\n  }\n  return [];\n};\nvar createFile = function createFile(file) {\n  var fileKey = file.fileKey;\n  return _extends({}, file, {\n    fileKey: fileKey || guid(),\n    progress: 0\n  });\n};\nfunction fileListReducer(files, action) {\n  var _action$files;\n  switch (action.type) {\n    // Add one or more files\n    case 'push':\n      return [].concat(files, action.files);\n\n    // Remove a file by `fileKey`\n    case 'remove':\n      return files.filter(function (f) {\n        return f.fileKey !== action.fileKey;\n      });\n\n    // Update a file\n    case 'updateFile':\n      return files.map(function (file) {\n        return file.fileKey === action.file.fileKey ? action.file : file;\n      });\n\n    // Initialization file list\n    case 'init':\n      return ((_action$files = action.files) === null || _action$files === void 0 ? void 0 : _action$files.map(function (file) {\n        // The state of the file needs to be preserved when the `fileList` is controlled.\n        return files.find(function (f) {\n          return f.fileKey === file.fileKey;\n        }) || createFile(file);\n      })) || [];\n    default:\n      throw new Error();\n  }\n}\nvar useFileList = function useFileList(defaultFileList) {\n  if (defaultFileList === void 0) {\n    defaultFileList = [];\n  }\n  var fileListRef = useRef(defaultFileList.map(createFile));\n  var fileListUpdateCallback = useRef();\n  var _useReducer = useReducer(fileListReducer, fileListRef.current),\n    fileList = _useReducer[0],\n    dispatch = _useReducer[1];\n  fileListRef.current = fileList;\n  useEffect(function () {\n    var _fileListUpdateCallba;\n    (_fileListUpdateCallba = fileListUpdateCallback.current) === null || _fileListUpdateCallba === void 0 ? void 0 : _fileListUpdateCallba.call(fileListUpdateCallback, fileList);\n    fileListUpdateCallback.current = null;\n  }, [fileList]);\n  useWillUnmount(function () {\n    fileListUpdateCallback.current = null;\n  });\n  var dispatchCallback = useCallback(function (action, callback) {\n    dispatch(action);\n    fileListUpdateCallback.current = callback;\n  }, []);\n  return [fileListRef, dispatchCallback];\n};\n\n/**\n * The `Uploader` component is used to upload files.\n *\n * @see https://rsuitejs.com/components/uploader\n */\nvar Uploader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'uploader' : _props$classPrefix,\n    className = props.className,\n    _props$listType = props.listType,\n    listType = _props$listType === void 0 ? 'text' : _props$listType,\n    defaultFileList = props.defaultFileList,\n    fileListProp = props.fileList,\n    _props$fileListVisibl = props.fileListVisible,\n    fileListVisible = _props$fileListVisibl === void 0 ? true : _props$fileListVisibl,\n    localeProp = props.locale,\n    style = props.style,\n    draggable = props.draggable,\n    _props$name = props.name,\n    name = _props$name === void 0 ? 'file' : _props$name,\n    _props$multiple = props.multiple,\n    multiple = _props$multiple === void 0 ? false : _props$multiple,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    accept = props.accept,\n    children = props.children,\n    toggleAs = props.toggleAs,\n    _props$removable = props.removable,\n    removable = _props$removable === void 0 ? true : _props$removable,\n    disabledFileItem = props.disabledFileItem,\n    maxPreviewFileSize = props.maxPreviewFileSize,\n    _props$method = props.method,\n    method = _props$method === void 0 ? 'POST' : _props$method,\n    _props$autoUpload = props.autoUpload,\n    autoUpload = _props$autoUpload === void 0 ? true : _props$autoUpload,\n    action = props.action,\n    headers = props.headers,\n    _props$withCredential = props.withCredentials,\n    withCredentials = _props$withCredential === void 0 ? false : _props$withCredential,\n    disableMultipart = props.disableMultipart,\n    _props$timeout = props.timeout,\n    timeout = _props$timeout === void 0 ? 0 : _props$timeout,\n    _props$data = props.data,\n    data = _props$data === void 0 ? {} : _props$data,\n    onRemove = props.onRemove,\n    onUpload = props.onUpload,\n    shouldUpload = props.shouldUpload,\n    shouldQueueUpdate = props.shouldQueueUpdate,\n    renderFileInfo = props.renderFileInfo,\n    renderThumbnail = props.renderThumbnail,\n    onPreview = props.onPreview,\n    onChange = props.onChange,\n    onSuccess = props.onSuccess,\n    onError = props.onError,\n    onProgress = props.onProgress,\n    onReupload = props.onReupload,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix(listType, {\n    draggable: draggable\n  }));\n  var _useCustom = useCustom('Uploader', localeProp),\n    locale = _useCustom.locale;\n  var rootRef = useRef();\n  var xhrs = useRef({});\n  var trigger = useRef();\n  var _useFileList = useFileList(fileListProp || defaultFileList),\n    fileList = _useFileList[0],\n    dispatch = _useFileList[1];\n  useEffect(function () {\n    if (typeof fileListProp !== 'undefined') {\n      // Force reset fileList in reducer, when `fileListProp` is updated\n      dispatch({\n        type: 'init',\n        files: fileListProp\n      });\n    }\n  }, [dispatch, fileListProp]);\n  var updateFileStatus = useCallback(function (nextFile) {\n    dispatch({\n      type: 'updateFile',\n      file: nextFile\n    });\n  }, [dispatch]);\n\n  /**\n   * Clear the value in input.\n   */\n  var cleanInputValue = useCallback(function () {\n    var _trigger$current;\n    (_trigger$current = trigger.current) === null || _trigger$current === void 0 ? void 0 : _trigger$current.clearInput();\n  }, []);\n\n  /**\n   * Callback for successful file upload.\n   * @param file\n   * @param response\n   * @param event\n   * @param xhr\n   */\n  var handleAjaxUploadSuccess = useCallback(function (file, response, event, xhr) {\n    var nextFile = _extends({}, file, {\n      status: 'finished',\n      progress: 100\n    });\n    updateFileStatus(nextFile);\n    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(response, nextFile, event, xhr);\n  }, [onSuccess, updateFileStatus]);\n\n  /**\n   * Callback for file upload error.\n   * @param file\n   * @param status\n   * @param event\n   * @param xhr\n   */\n  var handleAjaxUploadError = useCallback(function (file, status, event, xhr) {\n    var nextFile = _extends({}, file, {\n      status: 'error'\n    });\n    updateFileStatus(nextFile);\n    onError === null || onError === void 0 ? void 0 : onError(status, nextFile, event, xhr);\n  }, [onError, updateFileStatus]);\n\n  /**\n   * Callback for file upload progress update.\n   * @param file\n   * @param percent\n   * @param event\n   * @param xhr\n   */\n  var handleAjaxUploadProgress = useCallback(function (file, percent, event, xhr) {\n    var nextFile = _extends({}, file, {\n      status: 'uploading',\n      progress: percent\n    });\n    updateFileStatus(nextFile);\n    onProgress === null || onProgress === void 0 ? void 0 : onProgress(percent, nextFile, event, xhr);\n  }, [onProgress, updateFileStatus]);\n\n  /**\n   * Upload a single file.\n   * @param file\n   */\n  var handleUploadFile = useCallback(function (file) {\n    var _ajaxUpload = ajaxUpload({\n        name: name,\n        timeout: timeout,\n        headers: headers,\n        data: data,\n        method: method,\n        withCredentials: withCredentials,\n        disableMultipart: disableMultipart,\n        file: file.blobFile,\n        url: action,\n        onError: handleAjaxUploadError.bind(null, file),\n        onSuccess: handleAjaxUploadSuccess.bind(null, file),\n        onProgress: handleAjaxUploadProgress.bind(null, file)\n      }),\n      xhr = _ajaxUpload.xhr,\n      uploadData = _ajaxUpload.data;\n    updateFileStatus(_extends({}, file, {\n      status: 'uploading'\n    }));\n    if (file.fileKey) {\n      xhrs.current[file.fileKey] = xhr;\n    }\n    onUpload === null || onUpload === void 0 ? void 0 : onUpload(file, uploadData, xhr);\n  }, [name, timeout, headers, data, method, withCredentials, disableMultipart, action, handleAjaxUploadError, handleAjaxUploadSuccess, handleAjaxUploadProgress, updateFileStatus, onUpload]);\n  var handleAjaxUpload = useCallback(function () {\n    fileList.current.forEach(function (file) {\n      var checkState = shouldUpload === null || shouldUpload === void 0 ? void 0 : shouldUpload(file);\n      if (checkState instanceof Promise) {\n        checkState.then(function (res) {\n          if (res) {\n            handleUploadFile(file);\n          }\n        });\n        return;\n      } else if (checkState === false) {\n        return;\n      }\n      if (file.status === 'inited') {\n        handleUploadFile(file);\n      }\n    });\n    cleanInputValue();\n  }, [cleanInputValue, fileList, handleUploadFile, shouldUpload]);\n  var handleUploadTriggerChange = function handleUploadTriggerChange(event) {\n    var files = getFiles(event);\n    var newFileList = [];\n    Array.from(files).forEach(function (file) {\n      newFileList.push({\n        blobFile: file,\n        name: file.name,\n        status: 'inited',\n        fileKey: guid()\n      });\n    });\n    var nextFileList = [].concat(fileList.current, newFileList);\n    var checkState = shouldQueueUpdate === null || shouldQueueUpdate === void 0 ? void 0 : shouldQueueUpdate(nextFileList, newFileList);\n    if (checkState === false) {\n      cleanInputValue();\n      return;\n    }\n    var upload = function upload() {\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextFileList);\n      dispatch({\n        type: 'push',\n        files: newFileList\n      }, function () {\n        autoUpload && handleAjaxUpload();\n      });\n    };\n    if (checkState instanceof Promise) {\n      checkState.then(function (res) {\n        res && upload();\n      });\n      return;\n    }\n    upload();\n  };\n  var handleRemoveFile = function handleRemoveFile(fileKey) {\n    var _xhrs$current, _xhrs$current$file$fi;\n    var file = find(fileList.current, function (f) {\n      return f.fileKey === fileKey;\n    });\n    var nextFileList = fileList.current.filter(function (f) {\n      return f.fileKey !== fileKey;\n    });\n    if (((_xhrs$current = xhrs.current) === null || _xhrs$current === void 0 ? void 0 : (_xhrs$current$file$fi = _xhrs$current[file.fileKey]) === null || _xhrs$current$file$fi === void 0 ? void 0 : _xhrs$current$file$fi.readyState) !== 4) {\n      var _xhrs$current$file$fi2;\n      (_xhrs$current$file$fi2 = xhrs.current[file.fileKey]) === null || _xhrs$current$file$fi2 === void 0 ? void 0 : _xhrs$current$file$fi2.abort();\n    }\n    dispatch({\n      type: 'remove',\n      fileKey: fileKey\n    });\n    onRemove === null || onRemove === void 0 ? void 0 : onRemove(file);\n    onChange === null || onChange === void 0 ? void 0 : onChange(nextFileList);\n    cleanInputValue();\n  };\n  var handleReupload = function handleReupload(file) {\n    autoUpload && handleUploadFile(file);\n    onReupload === null || onReupload === void 0 ? void 0 : onReupload(file);\n  };\n\n  // public API\n  var start = function start(file) {\n    if (file) {\n      handleUploadFile(file);\n      return;\n    }\n    handleAjaxUpload();\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      root: rootRef.current,\n      start: start\n    };\n  });\n  var renderList = [/*#__PURE__*/React.createElement(UploadTrigger, _extends({}, rest, {\n    locale: locale,\n    name: name,\n    key: \"trigger\",\n    multiple: multiple,\n    draggable: draggable,\n    disabled: disabled,\n    readOnly: readOnly,\n    accept: accept,\n    ref: trigger,\n    onChange: handleUploadTriggerChange,\n    as: toggleAs\n  }), children)];\n  if (fileListVisible) {\n    renderList.push( /*#__PURE__*/React.createElement(\"div\", {\n      key: \"items\",\n      className: prefix('file-items')\n    }, fileList.current.map(function (file, index) {\n      return /*#__PURE__*/React.createElement(FileItem, {\n        locale: locale,\n        key: file.fileKey || index,\n        file: file,\n        maxPreviewFileSize: maxPreviewFileSize,\n        listType: listType,\n        disabled: disabledFileItem,\n        onPreview: onPreview,\n        onReupload: handleReupload,\n        onCancel: handleRemoveFile,\n        renderFileInfo: renderFileInfo,\n        renderThumbnail: renderThumbnail,\n        removable: removable && !readOnly && !plaintext,\n        allowReupload: !readOnly && !plaintext\n      });\n    })));\n  }\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      localeKey: \"notUploaded\",\n      className: withClassPrefix(listType)\n    }, fileList.current.length ? renderList[1] : null);\n  }\n  if (listType === 'picture') {\n    renderList.reverse();\n  }\n  return /*#__PURE__*/React.createElement(Component, {\n    ref: rootRef,\n    className: classes,\n    style: style\n  }, renderList);\n});\nUploader.displayName = 'Uploader';\nUploader.propTypes = {\n  action: PropTypes.string.isRequired,\n  accept: PropTypes.string,\n  autoUpload: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  defaultFileList: PropTypes.array,\n  fileList: PropTypes.array,\n  data: PropTypes.object,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disabledFileItem: PropTypes.bool,\n  name: PropTypes.string,\n  timeout: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  headers: PropTypes.object,\n  locale: PropTypes.any,\n  listType: oneOf(['text', 'picture-text', 'picture']),\n  shouldQueueUpdate: PropTypes.func,\n  shouldUpload: PropTypes.func,\n  onChange: PropTypes.func,\n  onUpload: PropTypes.func,\n  onReupload: PropTypes.func,\n  onPreview: PropTypes.func,\n  onError: PropTypes.func,\n  onSuccess: PropTypes.func,\n  onProgress: PropTypes.func,\n  onRemove: PropTypes.func,\n  maxPreviewFileSize: PropTypes.number,\n  method: PropTypes.string,\n  style: PropTypes.object,\n  renderFileInfo: PropTypes.func,\n  renderThumbnail: PropTypes.func,\n  removable: PropTypes.bool,\n  fileListVisible: PropTypes.bool,\n  draggable: PropTypes.bool,\n  disableMultipart: PropTypes.bool\n};\nexport default Uploader;","map":null,"metadata":{},"sourceType":"module"}