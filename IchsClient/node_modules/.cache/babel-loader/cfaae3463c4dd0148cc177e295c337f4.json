{"ast":null,"code":"var _jsxFileName = \"/Users/jankarasek/PROJEKT_ICHS/IchsClient/src/components/custom/TableComponent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './TableView.css'; // Ensure this CSS file exists and is correctly linked.\n\nconst TableView = ({\n  data\n}) => {\n  console.log('TableComponent, Passed data:', data);\n\n  // Ensure the data is in the correct format\n  if (!data || !Array.isArray(data.StepwiseFilteredData) || data.StepwiseFilteredData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 16\n      }\n    }, \"No data available\");\n  }\n\n  // Function to apply conditional formatting based on value comparison\n  const getCellClass = (percentage, overallPercentage) => {\n    if (percentage < overallPercentage) {\n      return 'green';\n    } else if (percentage > overallPercentage) {\n      return 'red';\n    }\n    return ''; // No special class if percentages are equal\n  };\n\n  // Mapping region codes to names (Example mapping, update as needed)\n  const regionMapping = {\n    CZ10: 'Praha',\n    CZ20: 'Středočeský kraj',\n    CZ31: 'Jihočeský kraj',\n    CZ32: 'Plzeňský kraj',\n    CZ41: 'Karlovarský kraj',\n    CZ51: 'Liberecký kraj',\n    CZ52: 'Královéhradecký kraj',\n    CZ53: 'Pardubický kraj',\n    CZ63: 'Kraj Vysočina',\n    CZ64: 'Jihomoravský kraj',\n    CZ71: 'Olomoucký kraj',\n    CZ72: 'Zlínský kraj',\n    CZ80: 'Moravskoslezský kraj',\n    CZ42: 'Ústecký kraj'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"data-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }, \"Region\"), data.StepwiseFilteredData.map((filterData, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }\n  }, filterData.AppliedFilter)))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Kraj\"), data.StepwiseFilteredData.map((filterData, index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, \"Krajsk\\xFD pr\\u016Fm\\u011Br\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  }, \"Celost\\xE1tn\\xED pr\\u016Fm\\u011Br\"))))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, data.StepwiseFilteredData[0].RegionSummary.map((regionData, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, regionMapping[regionData.Region] || 'Unknown'), data.StepwiseFilteredData.map((filterData, filterIndex) => {\n    var _filterData$RegionSum;\n    const regionPercentage = ((_filterData$RegionSum = filterData.RegionSummary[index]) === null || _filterData$RegionSum === void 0 ? void 0 : _filterData$RegionSum.Percentage) || 0;\n    const overallPercentage = filterData.OverallPercentage || 0;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: filterIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: getCellClass(regionPercentage, overallPercentage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }\n    }, regionPercentage.toFixed(2), \"%\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 41\n      }\n    }, overallPercentage.toFixed(2), \"%\"));\n  }))))));\n};\n\n// Adding prop types to enforce type checking\nTableView.propTypes = {\n  data: PropTypes.shape({\n    StepwiseFilteredData: PropTypes.arrayOf(PropTypes.shape({\n      AppliedFilter: PropTypes.string.isRequired,\n      RegionSummary: PropTypes.arrayOf(PropTypes.shape({\n        Region: PropTypes.string.isRequired,\n        Percentage: PropTypes.number.isRequired\n      })).isRequired,\n      OverallPercentage: PropTypes.number.isRequired\n    })).isRequired\n  }).isRequired\n};\nexport default TableView;","map":{"version":3,"names":["React","PropTypes","TableView","data","console","log","Array","isArray","StepwiseFilteredData","length","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","getCellClass","percentage","overallPercentage","regionMapping","CZ10","CZ20","CZ31","CZ32","CZ41","CZ51","CZ52","CZ53","CZ63","CZ64","CZ71","CZ72","CZ80","CZ42","className","map","filterData","index","Fragment","key","colSpan","AppliedFilter","RegionSummary","regionData","Region","filterIndex","_filterData$RegionSum","regionPercentage","Percentage","OverallPercentage","toFixed","propTypes","shape","arrayOf","string","isRequired","number"],"sources":["/Users/jankarasek/PROJEKT_ICHS/IchsClient/src/components/custom/TableComponent.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TableView.css'; // Ensure this CSS file exists and is correctly linked.\n\nconst TableView = ({ data }) => {\n\n    console.log('TableComponent, Passed data:', data);\n\n    // Ensure the data is in the correct format\n    if (!data || !Array.isArray(data.StepwiseFilteredData) || data.StepwiseFilteredData.length === 0) {\n        return <div>No data available</div>;\n    }\n\n    // Function to apply conditional formatting based on value comparison\n    const getCellClass = (percentage, overallPercentage) => {\n        if (percentage < overallPercentage) {\n            return 'green';\n        } else if (percentage > overallPercentage) {\n            return 'red';\n        }\n        return ''; // No special class if percentages are equal\n    };\n\n    // Mapping region codes to names (Example mapping, update as needed)\n    const regionMapping = {\n        CZ10: 'Praha',\n        CZ20: 'Středočeský kraj',\n        CZ31: 'Jihočeský kraj',\n        CZ32: 'Plzeňský kraj',\n        CZ41: 'Karlovarský kraj',\n        CZ51: 'Liberecký kraj',\n        CZ52: 'Královéhradecký kraj',\n        CZ53: 'Pardubický kraj',\n        CZ63: 'Kraj Vysočina',\n        CZ64: 'Jihomoravský kraj',\n        CZ71: 'Olomoucký kraj',\n        CZ72: 'Zlínský kraj',\n        CZ80: 'Moravskoslezský kraj',\n        CZ42: 'Ústecký kraj'\n    };\n\n    return (\n        <div className=\"table-container\">\n\n            <table className=\"data-table\">\n                <thead>\n                    <tr>\n                        <th>Region</th>\n                        {data.StepwiseFilteredData.map((filterData, index) => (\n                            <React.Fragment key={index}>\n                                <th colSpan=\"2\">{filterData.AppliedFilter}</th>\n                            </React.Fragment>\n                        ))}\n                    </tr>\n                    <tr>\n                        <th>Kraj</th>\n                        {data.StepwiseFilteredData.map((filterData, index) => (\n                            <React.Fragment key={index}>\n                                <th>Krajský průměr</th>\n                                <th>Celostátní průměr</th>\n                            </React.Fragment>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.StepwiseFilteredData[0].RegionSummary.map((regionData, index) => (\n                        <tr key={index}>\n                            <td>{regionMapping[regionData.Region] || 'Unknown'}</td>\n                            {data.StepwiseFilteredData.map((filterData, filterIndex) => {\n                                const regionPercentage = filterData.RegionSummary[index]?.Percentage || 0;\n                                const overallPercentage = filterData.OverallPercentage || 0;\n                                return (\n                                    <React.Fragment key={filterIndex}>\n                                        <td className={getCellClass(regionPercentage, overallPercentage)}>\n                                            {regionPercentage.toFixed(2)}%\n                                        </td>\n                                        <td>\n                                            {overallPercentage.toFixed(2)}%\n                                        </td>\n                                    </React.Fragment>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\n// Adding prop types to enforce type checking\nTableView.propTypes = {\n    data: PropTypes.shape({\n        StepwiseFilteredData: PropTypes.arrayOf(PropTypes.shape({\n            AppliedFilter: PropTypes.string.isRequired,\n            RegionSummary: PropTypes.arrayOf(PropTypes.shape({\n                Region: PropTypes.string.isRequired,\n                Percentage: PropTypes.number.isRequired\n            })).isRequired,\n            OverallPercentage: PropTypes.number.isRequired\n        })).isRequired\n    }).isRequired\n};\n\nexport default TableView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}