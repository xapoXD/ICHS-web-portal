{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"character\", \"className\", \"classPrefix\", \"disabled\", \"max\", \"readOnly\", \"vertical\", \"size\", \"color\", \"allowHalf\", \"value\", \"defaultValue\", \"cleanable\", \"plaintext\", \"onChange\", \"renderCharacter\", \"onChangeActive\"];\nimport React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport Star from '@rsuite/icons/legacy/Star';\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { SIZE, KEY_VALUES } from \"../internals/constants/index.js\";\nimport { useControlled, useClassNames } from \"../internals/hooks/index.js\";\nimport { shallowEqualArray } from \"../internals/utils/index.js\";\nimport { transformValueToCharacterMap, transformCharacterMapToValue } from \"./utils.js\";\nimport Character from \"./Character.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\n/**\n * The `Rate` component is used for rating. It can be used to evaluate the quality of the content.\n * @see https://rsuitejs.com/components/rate/\n */\nvar Rate = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'ul' : _props$as,\n    _props$character = props.character,\n    character = _props$character === void 0 ? /*#__PURE__*/React.createElement(Star, null) : _props$character,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'rate' : _props$classPrefix,\n    disabled = props.disabled,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 5 : _props$max,\n    readOnly = props.readOnly,\n    vertical = props.vertical,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'md' : _props$size,\n    color = props.color,\n    _props$allowHalf = props.allowHalf,\n    allowHalf = _props$allowHalf === void 0 ? false : _props$allowHalf,\n    valueProp = props.value,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? 0 : _props$defaultValue,\n    _props$cleanable = props.cleanable,\n    cleanable = _props$cleanable === void 0 ? true : _props$cleanable,\n    plaintext = props.plaintext,\n    onChange = props.onChange,\n    renderCharacter = props.renderCharacter,\n    onChangeActive = props.onChangeActive,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useControlled = useControlled(valueProp, defaultValue),\n    value = _useControlled[0],\n    setValue = _useControlled[1];\n  var getCharacterMap = useCallback(function (v) {\n    return transformValueToCharacterMap(typeof v !== 'undefined' ? v : value, max, allowHalf);\n  }, [allowHalf, max, value]);\n  var _useState = useState(getCharacterMap()),\n    characterMap = _useState[0],\n    setCharacterMap = _useState[1];\n  var hoverValue = transformCharacterMapToValue(characterMap);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var classes = merge(className, withClassPrefix(size, color, {\n    disabled: disabled,\n    readonly: readOnly\n  }));\n  var resetCharacterMap = useCallback(function () {\n    setCharacterMap(getCharacterMap());\n  }, [getCharacterMap]);\n  useEffect(function () {\n    // Update characterMap when value is updated.\n    setCharacterMap(getCharacterMap(valueProp));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueProp]);\n  var handleMouseLeave = useCallback(function (event) {\n    resetCharacterMap();\n    onChangeActive === null || onChangeActive === void 0 ? void 0 : onChangeActive(value, event);\n  }, [onChangeActive, resetCharacterMap, value]);\n  var handleChangeValue = useCallback(function (index, event) {\n    var nextValue = transformCharacterMapToValue(characterMap);\n    if (cleanable && value === nextValue && getCharacterMap(value)[index] === characterMap[index]) {\n      nextValue = 0;\n    }\n    if (nextValue !== value) {\n      setValue(nextValue);\n      setCharacterMap(getCharacterMap(nextValue));\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextValue, event);\n    }\n  }, [characterMap, cleanable, getCharacterMap, onChange, setValue, value]);\n  var handleKeyDown = useCallback(function (index, event) {\n    var key = event.key;\n    var nextValue = transformCharacterMapToValue(characterMap);\n    if (key === KEY_VALUES.RIGHT && nextValue < max) {\n      nextValue = allowHalf ? nextValue + 0.5 : nextValue + 1;\n    } else if (key === KEY_VALUES.LEFT && nextValue > 0) {\n      nextValue = allowHalf ? nextValue - 0.5 : nextValue - 1;\n    }\n    setCharacterMap(getCharacterMap(nextValue));\n    if (key === KEY_VALUES.ENTER) {\n      handleChangeValue(index, event);\n    }\n  }, [allowHalf, characterMap, getCharacterMap, handleChangeValue, max]);\n  var handleChangeCharacterMap = useCallback(function (index, key, event) {\n    var nextCharacterMap = characterMap.map(function (_item, i) {\n      if (i === index && key === 'before' && allowHalf) {\n        return 0.5;\n      }\n      return index >= i ? 1 : 0;\n    });\n    if (!shallowEqualArray(characterMap, nextCharacterMap)) {\n      setCharacterMap(nextCharacterMap);\n      onChangeActive === null || onChangeActive === void 0 ? void 0 : onChangeActive(transformCharacterMapToValue(nextCharacterMap), event);\n    }\n  }, [allowHalf, characterMap, onChangeActive]);\n  var handleClick = useCallback(function (index, key, event) {\n    handleChangeCharacterMap(index, key, event);\n    handleChangeValue(index, event);\n  }, [handleChangeCharacterMap, handleChangeValue]);\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      localeKey: \"notSelected\",\n      className: className\n    }, !isNil(value) ? value + \"(\" + max + \")\" : null);\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"radiogroup\",\n    tabIndex: 0\n  }, rest, {\n    ref: ref,\n    className: classes,\n    onMouseLeave: handleMouseLeave\n  }), characterMap.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(Character, {\n      role: \"radio\",\n      \"aria-posinset\": index + 1,\n      \"aria-setsize\": max,\n      \"aria-checked\": value === index + 1,\n      key: index,\n      status: item,\n      disabled: disabled || readOnly,\n      vertical: vertical,\n      onClick: function onClick(key, event) {\n        return handleClick(index, key, event);\n      },\n      onKeyDown: function onKeyDown(event) {\n        return handleKeyDown(index, event);\n      },\n      onMouseMove: function onMouseMove(key, event) {\n        return handleChangeCharacterMap(index, key, event);\n      }\n    }, renderCharacter ? renderCharacter(hoverValue, index) : character);\n  }));\n});\nRate.displayName = 'Rate';\nRate.propTypes = {\n  allowHalf: PropTypes.bool,\n  character: PropTypes.node,\n  classPrefix: PropTypes.string,\n  cleanable: PropTypes.bool,\n  defaultValue: PropTypes.number,\n  disabled: PropTypes.bool,\n  max: PropTypes.number,\n  renderCharacter: PropTypes.func,\n  readOnly: PropTypes.bool,\n  size: oneOf(SIZE),\n  value: PropTypes.number,\n  vertical: PropTypes.bool,\n  onChange: PropTypes.func,\n  onChangeActive: PropTypes.func\n};\nexport default Rate;","map":null,"metadata":{},"sourceType":"module"}