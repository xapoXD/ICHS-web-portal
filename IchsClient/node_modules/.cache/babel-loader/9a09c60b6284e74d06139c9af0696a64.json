{"ast":null,"code":"import on from \"./on.js\";\nimport isEventSupported from \"./utils/isEventSupported.js\";\n\n/**\n * Track mouse/touch events for a given element.\n */\nvar PointerMoveTracker = /*#__PURE__*/function () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function PointerMoveTracker(domNode, _ref) {\n    var _this = this;\n    var onMove = _ref.onMove,\n      onMoveEnd = _ref.onMoveEnd,\n      _ref$useTouchEvent = _ref.useTouchEvent,\n      useTouchEvent = _ref$useTouchEvent === void 0 ? true : _ref$useTouchEvent;\n    this.isDragStatus = false;\n    this.useTouchEvent = true;\n    this.animationFrameID = null;\n    this.domNode = void 0;\n    this.onMove = null;\n    this.onMoveEnd = null;\n    this.eventMoveToken = null;\n    this.eventUpToken = null;\n    this.moveEvent = null;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.x = 0;\n    this.y = 0;\n    this.isDragging = function () {\n      return _this.isDragStatus;\n    };\n    this.onDragMove = function (event) {\n      var x = _this.getClientX(event);\n      var y = _this.getClientY(event);\n      _this.deltaX += x - _this.x;\n      _this.deltaY += x - _this.y;\n      if (_this.animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFrame` to avoid over-updating.\n        _this.animationFrameID = requestAnimationFrame(_this.didDragMove);\n      }\n      _this.x = x;\n      _this.y = y;\n      _this.moveEvent = event;\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n    };\n    this.didDragMove = function () {\n      _this.animationFrameID = null;\n      _this.onMove(_this.deltaX, _this.deltaY, _this.moveEvent);\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    };\n    this.onDragUp = function (event) {\n      var _this$onMoveEnd;\n      if (_this.animationFrameID) {\n        _this.didDragMove();\n      }\n      (_this$onMoveEnd = _this.onMoveEnd) === null || _this$onMoveEnd === void 0 ? void 0 : _this$onMoveEnd.call(_this, event);\n    };\n    this.domNode = domNode;\n    this.onMove = onMove;\n    this.onMoveEnd = onMoveEnd;\n    this.useTouchEvent = useTouchEvent;\n  }\n  var _proto = PointerMoveTracker.prototype;\n  _proto.isSupportTouchEvent = function isSupportTouchEvent() {\n    return this.useTouchEvent && isEventSupported('touchstart');\n  };\n  _proto.getClientX = function getClientX(event) {\n    var _touches;\n    return this.isSupportTouchEvent() ? (_touches = event.touches) === null || _touches === void 0 ? void 0 : _touches[0].clientX : event.clientX;\n  };\n  _proto.getClientY = function getClientY(event) {\n    var _touches2;\n    return this.isSupportTouchEvent() ? (_touches2 = event.touches) === null || _touches2 === void 0 ? void 0 : _touches2[0].clientY : event.clientY;\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */;\n\n  _proto.captureMoves = function captureMoves(event) {\n    if (!this.eventMoveToken && !this.eventUpToken) {\n      if (this.isSupportTouchEvent()) {\n        this.eventMoveToken = on(this.domNode, 'touchmove', this.onDragMove, {\n          passive: false\n        });\n        this.eventUpToken = on(this.domNode, 'touchend', this.onDragUp, {\n          passive: false\n        });\n        on(this.domNode, 'touchcancel', this.releaseMoves);\n      } else {\n        this.eventMoveToken = on(this.domNode, 'mousemove', this.onDragMove);\n        this.eventUpToken = on(this.domNode, 'mouseup', this.onDragUp);\n      }\n    }\n    if (!this.isDragStatus) {\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.isDragStatus = true;\n      this.x = this.getClientX(event);\n      this.y = this.getClientY(event);\n    }\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  /**\n   * These releases all of the listeners on document.body.\n   */;\n\n  _proto.releaseMoves = function releaseMoves() {\n    if (this.eventMoveToken) {\n      this.eventMoveToken.off();\n      this.eventMoveToken = null;\n    }\n    if (this.eventUpToken) {\n      this.eventUpToken.off();\n      this.eventUpToken = null;\n    }\n    if (this.animationFrameID !== null) {\n      cancelAnimationFrame(this.animationFrameID);\n      this.animationFrameID = null;\n    }\n    if (this.isDragStatus) {\n      this.isDragStatus = false;\n      this.x = 0;\n      this.y = 0;\n    }\n  }\n  /**\n   * Returns whether or not if the mouse movement is being tracked.\n   */;\n\n  return PointerMoveTracker;\n}();\nexport { PointerMoveTracker as default };","map":null,"metadata":{},"sourceType":"module"}