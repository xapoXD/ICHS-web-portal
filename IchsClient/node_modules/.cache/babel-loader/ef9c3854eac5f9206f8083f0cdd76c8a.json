{"ast":null,"code":"import emptyFunction from \"./utils/emptyFunction.js\";\nimport normalizeWheel from \"./utils/normalizeWheel.js\";\nimport requestAnimationFramePolyfill from \"./requestAnimationFramePolyfill.js\";\nvar swapWheelAxis = function swapWheelAxis(normalizedEvent) {\n  return {\n    spinX: normalizedEvent.spinY,\n    spinY: normalizedEvent.spinX,\n    pixelX: normalizedEvent.pixelY,\n    pixelY: normalizedEvent.pixelX\n  };\n};\n/**\n * Used to handle scrolling trackpad and mouse wheel events.\n */\n\nvar WheelHandler = /*#__PURE__*/function () {\n  function WheelHandler(onWheel, handleScrollX, handleScrollY, stopPropagation) {\n    this.animationFrameID = null;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.handleScrollX = null;\n    this.handleScrollY = null;\n    this.stopPropagation = null;\n    this.onWheelCallback = null;\n    this.didWheel = this.didWheel.bind(this);\n    if (typeof handleScrollX !== 'function') {\n      handleScrollX = handleScrollX ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;\n    }\n    if (typeof handleScrollY !== 'function') {\n      handleScrollY = handleScrollY ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;\n    }\n    if (typeof stopPropagation !== 'function') {\n      stopPropagation = stopPropagation ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;\n    }\n    this.handleScrollX = handleScrollX;\n    this.handleScrollY = handleScrollY;\n    this.stopPropagation = stopPropagation;\n    this.onWheelCallback = onWheel;\n    this.onWheel = this.onWheel.bind(this);\n  }\n  /**\n   * Binds the wheel handler.\n   * @param event The wheel event.\n   */\n\n  var _proto = WheelHandler.prototype;\n  _proto.onWheel = function onWheel(event) {\n    var normalizedEvent = normalizeWheel(event); // on some platforms (e.g. Win10), browsers do not automatically swap deltas for horizontal scroll\n\n    if (navigator.platform !== 'MacIntel' && event.shiftKey) {\n      normalizedEvent = swapWheelAxis(normalizedEvent);\n    }\n    var deltaX = this.deltaX + normalizedEvent.pixelX;\n    var deltaY = this.deltaY + normalizedEvent.pixelY;\n    var handleScrollX = this.handleScrollX(deltaX, deltaY);\n    var handleScrollY = this.handleScrollY(deltaY, deltaX);\n    if (!handleScrollX && !handleScrollY) {\n      return;\n    }\n    this.deltaX += handleScrollX ? normalizedEvent.pixelX : 0;\n    this.deltaY += handleScrollY ? normalizedEvent.pixelY : 0;\n    event.preventDefault();\n    var changed;\n    if (this.deltaX !== 0 || this.deltaY !== 0) {\n      if (this.stopPropagation()) {\n        event.stopPropagation();\n      }\n      changed = true;\n    }\n    if (changed === true && this.animationFrameID === null) {\n      this.animationFrameID = requestAnimationFramePolyfill(this.didWheel);\n    }\n  }\n  /**\n   * Fires a callback if the wheel event has changed.\n   */;\n\n  _proto.didWheel = function didWheel() {\n    this.animationFrameID = null;\n    this.onWheelCallback(this.deltaX, this.deltaY);\n    this.deltaX = 0;\n    this.deltaY = 0;\n  };\n  return WheelHandler;\n}();\nexport default WheelHandler;","map":null,"metadata":{},"sourceType":"module"}