{"ast":null,"code":"'use client';\n\nimport { useEffect } from 'react';\nimport startCase from 'lodash/startCase';\nimport { addDays, addMonths, addYears, addHours, addMinutes, addSeconds, format, isLastDayOfMonth, lastDayOfMonth, isValid } from \"../../internals/utils/date/index.js\";\nimport { useDateField, patternMap } from \"../DateField.js\";\nexport function useDateInputState(_ref) {\n  var formatStr = _ref.formatStr,\n    locale = _ref.locale,\n    date = _ref.date,\n    isControlledDate = _ref.isControlledDate;\n  var _useDateField = useDateField(formatStr, locale.localize, date),\n    dateField = _useDateField.dateField,\n    dispatch = _useDateField.dispatch,\n    toDateString = _useDateField.toDateString,\n    toDate = _useDateField.toDate,\n    isEmptyValue = _useDateField.isEmptyValue;\n  var setDateOffset = function setDateOffset(pattern, offset, callback) {\n    var currentDate = new Date();\n    var year = dateField.year || currentDate.getFullYear();\n    var month = dateField.month ? dateField.month - 1 : currentDate.getMonth();\n    var day = dateField.day || 0;\n    var hour = dateField.hour || 0;\n    var minute = dateField.minute || 0;\n    var second = dateField.second || 0;\n    var actionName;\n    var value;\n    switch (pattern) {\n      case 'y':\n        actionName = 'setYear';\n        value = addYears(new Date(year, 0), offset).getFullYear();\n        break;\n      case 'M':\n        actionName = 'setMonth';\n        value = addMonths(new Date(year, month), offset).getMonth() + 1;\n        break;\n      case 'd':\n        actionName = 'setDay';\n        var prevDate = new Date(year, month, day);\n        value = addDays(prevDate, offset).getDate();\n        if (offset > 0) {\n          value = isLastDayOfMonth(prevDate) ? 1 : value;\n        } else {\n          value = prevDate.getDate() === 1 ? lastDayOfMonth(prevDate).getDate() : value;\n        }\n        break;\n      case 'H':\n      case 'h':\n        actionName = 'setHour';\n        value = addHours(new Date(year, month, day, hour), offset).getHours();\n        break;\n      case 'm':\n        actionName = 'setMinute';\n        value = addMinutes(new Date(year, month, day, hour, minute), offset).getMinutes();\n        break;\n      case 's':\n        actionName = 'setSecond';\n        value = addSeconds(new Date(year, month, day, hour, minute, second), offset).getSeconds();\n        break;\n      case 'a':\n        actionName = 'setHour';\n        value = hour >= 12 ? hour - 12 : hour + 12;\n        break;\n    }\n    if (actionName && value) {\n      dispatch({\n        type: actionName,\n        value: value\n      });\n      var field = patternMap[pattern];\n      callback === null || callback === void 0 ? void 0 : callback(toDate(field, value));\n    }\n  };\n  var setDateField = function setDateField(pattern, value, callback) {\n    var field = patternMap[pattern];\n    var actionName = \"set\" + startCase(field);\n    dispatch({\n      type: actionName,\n      value: value\n    });\n    callback === null || callback === void 0 ? void 0 : callback(toDate(field, value));\n  };\n  var getDateField = function getDateField(pattern) {\n    var fieldName = patternMap[pattern];\n    return {\n      name: fieldName,\n      value: dateField[fieldName]\n    };\n  };\n  var toControlledDateString = function toControlledDateString() {\n    if (date && isValid(date)) {\n      return format(date, formatStr, {\n        locale: locale\n      });\n    }\n    // if date is not valid, return uncontrolled date string\n    return toDateString();\n  };\n  useEffect(function () {\n    if (isControlledDate) {\n      if (date && isValid(date)) {\n        dispatch({\n          type: 'setNewDate',\n          value: date\n        });\n      } else if (date === null) {\n        dispatch({\n          type: 'setNewDate',\n          value: null\n        });\n      }\n    }\n  }, [date, dispatch, isControlledDate]);\n  return {\n    dateField: dateField,\n    setDateOffset: setDateOffset,\n    setDateField: setDateField,\n    getDateField: getDateField,\n    toDateString: isControlledDate ? toControlledDateString : toDateString,\n    isEmptyValue: isEmptyValue\n  };\n}\nexport default useDateInputState;","map":null,"metadata":{},"sourceType":"module"}