{"ast":null,"code":"'use client';\n\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2;\nvar _excluded = [\"onToggle\", \"eventKey\", \"title\", \"classPrefix\", \"children\"],\n  _excluded2 = [\"icon\", \"className\", \"disabled\"],\n  _excluded3 = [\"open\"],\n  _excluded4 = [\"selected\", \"active\"],\n  _excluded5 = [\"open\"],\n  _excluded6 = [\"open\"];\nimport React, { useCallback, useContext } from 'react';\nimport omit from 'lodash/omit';\nimport Menu from \"../internals/Menu/Menu.js\";\nimport MenuItem from \"../internals/Menu/MenuItem.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport { mergeRefs } from \"../internals/utils/index.js\";\nimport PropTypes from 'prop-types';\nimport { SidenavContext } from \"./Sidenav.js\";\nimport ArrowLeftLine from '@rsuite/icons/ArrowLeftLine';\nimport ArrowRightLine from '@rsuite/icons/ArrowRightLine';\nimport ExpandedSidenavDropdownMenu from \"./ExpandedSidenavDropdownMenu.js\";\nimport NavContext from \"../Nav/NavContext.js\";\n/**\n * @private this component is not supposed to be used directly\n *          Instead it's rendered by a <Nav.Menu> within a <Sidenav>\n *\n * <Sidenav>\n *   <Nav>\n *     <Nav.Menu>\n *       <Nav.Menu></Nav.Menu> -> This submenu will render <SidenavDropdownMenu> component\n *     </Nav.Menu>\n *   </Nav>\n * </Sidenav>\n */\nvar SidenavDropdownMenu = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var sidenav = useContext(SidenavContext);\n  var nav = useContext(NavContext);\n  if (!sidenav || !nav) {\n    throw new Error('<Sidenav.Dropdown.Menu> must be rendered within a <Nav> within a <Sidenav> component.');\n  }\n  var onToggle = props.onToggle,\n    eventKey = props.eventKey,\n    title = props.title,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown-menu' : _props$classPrefix,\n    children = props.children,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('DropdownMenu'),\n    rtl = _useCustom.rtl;\n  var handleToggleSubmenu = useCallback(function (open, event) {\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(open, eventKey, event);\n  }, [eventKey, onToggle]);\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix;\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n    withMenuClassPrefix = _useClassNames2.withClassPrefix,\n    mergeMenuClassName = _useClassNames2.merge;\n  var _useClassNames3 = useClassNames('dropdown-item'),\n    mergeItemClassNames = _useClassNames3.merge,\n    withItemClassPrefix = _useClassNames3.withClassPrefix,\n    prefixItemClassName = _useClassNames3.prefix;\n  if (sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(ExpandedSidenavDropdownMenu, _extends({\n      ref: ref\n    }, omit(props, 'classPrefix')));\n  }\n\n  // Parent menu exists. This is a submenu.\n  // Should render a `menuitem` that controls this submenu.\n  var _omit = omit(rest, ['trigger']),\n    icon = _omit.icon,\n    className = _omit.className,\n    disabled = _omit.disabled,\n    menuProps = _objectWithoutPropertiesLoose(_omit, _excluded2);\n  var Icon = rtl ? ArrowLeftLine : ArrowRightLine;\n  return /*#__PURE__*/React.createElement(Menu, {\n    openMenuOn: ['mouseover', 'click'],\n    renderMenuButton: function renderMenuButton(_ref, buttonRef) {\n      var open = _ref.open,\n        menuButtonProps = _objectWithoutPropertiesLoose(_ref, _excluded3);\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        disabled: disabled\n      }, function (_ref2, menuitemRef) {\n        var selected = _ref2.selected,\n          active = _ref2.active,\n          menuitem = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n        var classes = mergeItemClassNames(className, prefixItemClassName(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"toggle\"]))), withItemClassPrefix({\n          'with-icon': icon,\n          open: open,\n          active: selected,\n          disabled: disabled,\n          focus: active\n        }));\n        return /*#__PURE__*/React.createElement(\"div\", _extends({\n          ref: mergeRefs(buttonRef, menuitemRef),\n          className: classes,\n          \"data-event-key\": eventKey,\n          \"data-event-key-type\": typeof eventKey\n        }, menuitem, omit(menuButtonProps, ['role'])), icon && /*#__PURE__*/React.cloneElement(icon, {\n          className: prefix('menu-icon')\n        }), title, /*#__PURE__*/React.createElement(Icon, {\n          className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"toggle-icon\"])))\n        }));\n      });\n    },\n    renderMenuPopup: function renderMenuPopup(_ref3, popupRef) {\n      var open = _ref3.open,\n        popupProps = _objectWithoutPropertiesLoose(_ref3, _excluded5);\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix());\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: popupRef,\n        className: menuClassName,\n        hidden: !open\n      }, popupProps, menuProps), children);\n    },\n    onToggleMenu: handleToggleSubmenu\n  }, function (_ref4, menuContainerRef) {\n    var open = _ref4.open,\n      menuContainer = _objectWithoutPropertiesLoose(_ref4, _excluded6);\n    var classes = mergeItemClassNames(className, withItemClassPrefix({\n      disabled: disabled,\n      open: open,\n      submenu: true\n    }));\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      ref: mergeRefs(ref, menuContainerRef),\n      className: classes\n    }, menuContainer));\n  });\n});\nSidenavDropdownMenu.displayName = 'Sidenav.Dropdown.Menu';\nSidenavDropdownMenu.propTypes = {\n  active: PropTypes.bool,\n  activeKey: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  icon: PropTypes.any,\n  classPrefix: PropTypes.string,\n  pullLeft: PropTypes.bool,\n  title: PropTypes.node,\n  open: PropTypes.bool,\n  eventKey: PropTypes.any,\n  expanded: PropTypes.bool,\n  collapsible: PropTypes.bool,\n  onToggle: PropTypes.func\n};\nexport default SidenavDropdownMenu;","map":null,"metadata":{},"sourceType":"module"}