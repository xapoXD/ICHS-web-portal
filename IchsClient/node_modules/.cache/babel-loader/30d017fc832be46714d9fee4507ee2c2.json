{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"placement\", \"classPrefix\", \"animation\", \"closeButton\"];\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Slide from \"../Animation/Slide.js\";\nimport Modal from \"../Modal/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { deprecateComponent } from \"../internals/utils/index.js\";\nimport DrawerContext from \"./DrawerContext.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport DrawerBody from \"./DrawerBody.js\";\nimport DrawerHeader from \"./DrawerHeader.js\";\nimport DrawerActions from \"./DrawerActions.js\";\nimport DrawerFooter from \"./DrawerFooter.js\";\nimport DrawerTitle from \"./DrawerTitle.js\";\n/**\n * The Drawer component is used to display extra content from a main content.\n * @see https://rsuitejs.com/components/drawer\n */\nvar Drawer = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'right' : _props$placement,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'drawer' : _props$classPrefix,\n    _props$animation = props.animation,\n    animation = _props$animation === void 0 ? Slide : _props$animation,\n    _props$closeButton = props.closeButton,\n    closeButton = _props$closeButton === void 0 ? true : _props$closeButton,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, prefix(placement));\n  var animationProps = {\n    placement: placement\n  };\n  var contextValue = useMemo(function () {\n    return {\n      closeButton: closeButton,\n      isDrawer: true\n    };\n  }, [closeButton]);\n  return /*#__PURE__*/React.createElement(DrawerContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Modal, _extends({}, rest, {\n    ref: ref,\n    classPrefix: classPrefix,\n    className: classes,\n    animation: animation,\n    animationProps: animationProps\n  })));\n});\nDrawerBody.displayName = 'DrawerBody';\nDrawerHeader.displayName = 'DrawerHeader';\nDrawerActions.displayName = 'DrawerActions';\nDrawerFooter.displayName = 'DrawerFooter';\nDrawerTitle.displayName = 'DrawerTitle';\nDrawer.Body = DrawerBody;\nDrawer.Header = DrawerHeader;\nDrawer.Actions = DrawerActions;\nDrawer.Footer = deprecateComponent(DrawerFooter, '<Drawer.Footer> has been deprecated, use <Drawer.Actions> instead.');\nDrawer.Title = DrawerTitle;\nDrawer.displayName = 'Drawer';\nDrawer.propTypes = _extends({}, Modal.propTypes, {\n  classPrefix: PropTypes.string,\n  placement: oneOf(['top', 'right', 'bottom', 'left']),\n  children: PropTypes.node,\n  className: PropTypes.string\n});\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}