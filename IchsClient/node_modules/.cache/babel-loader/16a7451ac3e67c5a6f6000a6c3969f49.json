{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"disabledBackward\", \"disabledForward\", \"showDate\", \"showMeridian\", \"showMonth\", \"showTime\", \"disabledTime\", \"onMoveBackward\", \"onMoveForward\", \"onToggleMeridian\", \"onToggleMonthDropdown\", \"onToggleTimeDropdown\", \"renderTitle\", \"renderToolbar\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport AngleLeftIcon from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRightIcon from '@rsuite/icons/legacy/AngleRight';\nimport IconButton from \"../IconButton/index.js\";\nimport Button from \"../Button/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { FormattedDate } from \"../CustomProvider/index.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\nimport { useDateRangePickerContext } from \"../DateRangePicker/DateRangePickerContext.js\";\nvar CalendarHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-header' : _props$classPrefix,\n    disabledBackward = props.disabledBackward,\n    disabledForward = props.disabledForward,\n    showDate = props.showDate,\n    showMeridian = props.showMeridian,\n    showMonth = props.showMonth,\n    showTime = props.showTime,\n    disabledTime = props.disabledTime,\n    onMoveBackward = props.onMoveBackward,\n    onMoveForward = props.onMoveForward,\n    onToggleMeridian = props.onToggleMeridian,\n    onToggleMonthDropdown = props.onToggleMonthDropdown,\n    onToggleTimeDropdown = props.onToggleTimeDropdown,\n    renderTitleProp = props.renderTitle,\n    renderToolbar = props.renderToolbar,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    locale = _useCalendarContext.locale,\n    _useCalendarContext$d = _useCalendarContext.date,\n    date = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,\n    format = _useCalendarContext.format,\n    inline = _useCalendarContext.inline,\n    disabledDate = _useCalendarContext.disabledDate;\n  var _useDateRangePickerCo = useDateRangePickerContext(),\n    isSelectedIdle = _useDateRangePickerCo.isSelectedIdle;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var btnProps = {\n    appearance: 'subtle',\n    size: inline ? 'sm' : 'xs'\n  };\n  var getTimeFormat = useCallback(function () {\n    var timeFormat = [];\n    if (!format) {\n      return '';\n    }\n    if (/([Hh])/.test(format)) {\n      timeFormat.push(showMeridian ? 'hh' : 'HH');\n    }\n    if (/m/.test(format)) {\n      timeFormat.push('mm');\n    }\n    if (/s/.test(format)) {\n      timeFormat.push('ss');\n    }\n    return timeFormat.join(':');\n  }, [format, showMeridian]);\n  var getDateFormat = useCallback(function () {\n    if (showMonth) {\n      return (locale === null || locale === void 0 ? void 0 : locale.formattedMonthPattern) || 'yyyy-MM';\n    }\n    return 'yyyy';\n  }, [locale, showMonth]);\n  var renderTitle = useCallback(function () {\n    var _renderTitleProp;\n    return (_renderTitleProp = renderTitleProp === null || renderTitleProp === void 0 ? void 0 : renderTitleProp(date)) !== null && _renderTitleProp !== void 0 ? _renderTitleProp : date && /*#__PURE__*/React.createElement(FormattedDate, {\n      date: date,\n      formatStr: getDateFormat()\n    });\n  }, [date, getDateFormat, renderTitleProp]);\n  var dateTitleClasses = prefix('title', 'title-date', {\n    error: disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date)\n  });\n  var timeTitleClasses = prefix('title', 'title-time', {\n    error: disabledTime === null || disabledTime === void 0 ? void 0 : disabledTime(date)\n  });\n  var backwardClass = prefix('backward', {\n    'btn-disabled': disabledBackward\n  });\n  var forwardClass = prefix('forward', {\n    'btn-disabled': disabledForward\n  });\n  var monthToolbar = /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('month-toolbar')\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({}, btnProps, {\n    // TODO: aria-label should be translated by i18n\n    \"aria-label\": \"Previous month\",\n    className: backwardClass,\n    onClick: disabledBackward ? undefined : onMoveBackward,\n    icon: /*#__PURE__*/React.createElement(AngleLeftIcon, null)\n  })), /*#__PURE__*/React.createElement(Button, _extends({}, btnProps, {\n    \"aria-label\": \"Select month\",\n    className: dateTitleClasses,\n    onClick: onToggleMonthDropdown\n  }), renderTitle()), /*#__PURE__*/React.createElement(IconButton, _extends({}, btnProps, {\n    \"aria-label\": \"Next month\",\n    className: forwardClass,\n    onClick: disabledForward ? undefined : onMoveForward,\n    icon: /*#__PURE__*/React.createElement(AngleRightIcon, null)\n  })));\n  var hasMonth = showDate || showMonth;\n  var classes = merge(className, withClassPrefix({\n    'has-month': hasMonth,\n    'has-time': showTime\n  }));\n\n  // If the date is not selected, the time cannot be selected (it only works in DateRangePicker).\n  var disableSelectTime = typeof isSelectedIdle === 'undefined' ? false : !isSelectedIdle;\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), hasMonth && monthToolbar, showTime && /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('time-toolbar')\n  }, /*#__PURE__*/React.createElement(Button, _extends({}, btnProps, {\n    \"aria-label\": \"Select time\",\n    className: timeTitleClasses,\n    onClick: onToggleTimeDropdown,\n    disabled: disableSelectTime\n  }), date && /*#__PURE__*/React.createElement(FormattedDate, {\n    date: date,\n    formatStr: getTimeFormat()\n  })), showMeridian && /*#__PURE__*/React.createElement(Button, _extends({}, btnProps, {\n    \"aria-label\": \"Toggle meridian\",\n    className: prefix('meridian'),\n    onClick: onToggleMeridian,\n    disabled: disableSelectTime\n  }), date && /*#__PURE__*/React.createElement(FormattedDate, {\n    date: date,\n    formatStr: \"a\"\n  }))), renderToolbar === null || renderToolbar === void 0 ? void 0 : renderToolbar(date));\n});\nCalendarHeader.displayName = 'CalendarHeader';\nCalendarHeader.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  disabledBackward: PropTypes.bool,\n  disabledForward: PropTypes.bool,\n  disabledTime: PropTypes.func,\n  onMoveBackward: PropTypes.func,\n  onMoveForward: PropTypes.func,\n  onToggleMeridian: PropTypes.func,\n  onToggleMonthDropdown: PropTypes.func,\n  onToggleTimeDropdown: PropTypes.func,\n  renderTitle: PropTypes.func,\n  renderToolbar: PropTypes.func,\n  showDate: PropTypes.bool,\n  showMeridian: PropTypes.bool,\n  showMonth: PropTypes.bool,\n  showTime: PropTypes.bool\n};\nexport default CalendarHeader;","map":null,"metadata":{},"sourceType":"module"}