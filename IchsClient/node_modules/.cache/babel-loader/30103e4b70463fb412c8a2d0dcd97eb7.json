{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useRef, useCallback } from 'react';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport { useControlled, useEventCallback } from \"../../internals/hooks/index.js\";\nimport { nameToPath } from \"../../FormControl/utils.js\";\nexport default function useFormValidate(formError, props) {\n  var formValue = props.formValue,\n    getCombinedModel = props.getCombinedModel,\n    onCheck = props.onCheck,\n    onError = props.onError,\n    nestedField = props.nestedField;\n  var _useControlled = useControlled(formError, {}),\n    realFormError = _useControlled[0],\n    setFormError = _useControlled[1];\n  var realFormErrorRef = useRef(realFormError);\n  realFormErrorRef.current = realFormError;\n\n  /**\n   * Validate the form data and return a boolean.\n   * The error message after verification is returned in the callback.\n   * @param callback\n   */\n  var check = useEventCallback(function (callback) {\n    var formError = {};\n    var errorCount = 0;\n    var model = getCombinedModel();\n    Object.keys(model.getSchemaSpec()).forEach(function (key) {\n      var checkResult = model.checkForField(key, formValue || {});\n      if (checkResult.hasError === true) {\n        errorCount += 1;\n        formError[key] = (checkResult === null || checkResult === void 0 ? void 0 : checkResult.errorMessage) || checkResult;\n      }\n    });\n    setFormError(formError);\n    onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n    callback === null || callback === void 0 ? void 0 : callback(formError);\n    if (errorCount > 0) {\n      onError === null || onError === void 0 ? void 0 : onError(formError);\n      return false;\n    }\n    return true;\n  });\n\n  /**\n   * Check the data field\n   * @param fieldName\n   * @param callback\n   */\n  var checkForField = useEventCallback(function (fieldName, callback) {\n    var _extends2;\n    var model = getCombinedModel();\n    var checkResult = model.checkForField(fieldName, formValue || {});\n    var nextFormError = _extends({}, formError, (_extends2 = {}, _extends2[fieldName] = (checkResult === null || checkResult === void 0 ? void 0 : checkResult.errorMessage) || checkResult, _extends2));\n    setFormError(nextFormError);\n    onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);\n    callback === null || callback === void 0 ? void 0 : callback(checkResult);\n    if (checkResult.hasError) {\n      onError === null || onError === void 0 ? void 0 : onError(nextFormError);\n    }\n    return !checkResult.hasError;\n  });\n\n  /**\n   * Check form data asynchronously and return a Promise\n   */\n  var checkAsync = useEventCallback(function () {\n    var promises = [];\n    var keys = [];\n    var model = getCombinedModel();\n    Object.keys(model.getSchemaSpec()).forEach(function (key) {\n      keys.push(key);\n      promises.push(model.checkForFieldAsync(key, formValue || {}));\n    });\n    return Promise.all(promises).then(function (values) {\n      var formError = {};\n      var errorCount = 0;\n      for (var i = 0; i < values.length; i++) {\n        if (values[i].hasError) {\n          errorCount += 1;\n          formError[keys[i]] = values[i].errorMessage;\n        }\n      }\n      onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n      setFormError(formError);\n      if (errorCount > 0) {\n        onError === null || onError === void 0 ? void 0 : onError(formError);\n      }\n      return {\n        hasError: errorCount > 0,\n        formError: formError\n      };\n    });\n  });\n\n  /**\n   * Asynchronously check form fields and return Promise\n   * @param fieldName\n   */\n  var checkForFieldAsync = useEventCallback(function (fieldName) {\n    var model = getCombinedModel();\n    return model.checkForFieldAsync(fieldName, formValue || {}).then(function (checkResult) {\n      var _extends3;\n      var nextFormError = _extends({}, formError, (_extends3 = {}, _extends3[fieldName] = checkResult.errorMessage, _extends3));\n      onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);\n      setFormError(nextFormError);\n      if (checkResult.hasError) {\n        onError === null || onError === void 0 ? void 0 : onError(nextFormError);\n      }\n      return checkResult;\n    });\n  });\n  var onRemoveError = useCallback(function (name) {\n    /**\n     * when this function is called when the children component is unmount,\n     * it's an old render frame so use Ref to get future error\n     */\n    var formError = omit(realFormErrorRef.current, [nestedField ? nameToPath(name) : name]);\n    realFormErrorRef.current = formError;\n    setFormError(formError);\n    onCheck === null || onCheck === void 0 ? void 0 : onCheck(formError);\n    return formError;\n  }, [nestedField, onCheck, setFormError]);\n  var setFieldError = useCallback(function (fieldName, checkResult) {\n    var _extends4;\n    var nextFormError = nestedField ? set(_extends({}, formError), nameToPath(fieldName), checkResult) : _extends({}, formError, (_extends4 = {}, _extends4[fieldName] = checkResult, _extends4));\n    setFormError(nextFormError);\n    onError === null || onError === void 0 ? void 0 : onError(nextFormError);\n    onCheck === null || onCheck === void 0 ? void 0 : onCheck(nextFormError);\n    return nextFormError;\n  }, [formError, nestedField, onCheck, onError, setFormError]);\n  var cleanErrors = useEventCallback(function () {\n    setFormError({});\n  });\n  var resetErrors = useEventCallback(function (formError) {\n    if (formError === void 0) {\n      formError = {};\n    }\n    setFormError(formError);\n  });\n  var cleanErrorForField = useEventCallback(function (fieldName) {\n    setFormError(omit(formError, [nestedField ? nameToPath(fieldName) : fieldName]));\n  });\n  return {\n    formError: realFormError,\n    check: check,\n    checkForField: checkForField,\n    checkAsync: checkAsync,\n    checkForFieldAsync: checkForFieldAsync,\n    cleanErrors: cleanErrors,\n    resetErrors: resetErrors,\n    cleanErrorForField: cleanErrorForField,\n    setFieldError: setFieldError,\n    onRemoveError: onRemoveError\n  };\n}","map":null,"metadata":{},"sourceType":"module"}