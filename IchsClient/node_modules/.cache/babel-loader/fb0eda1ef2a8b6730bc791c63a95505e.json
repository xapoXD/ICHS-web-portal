{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"data\", \"defaultValue\", \"className\", \"classPrefix\", \"childrenKey\", \"valueKey\", \"labelKey\", \"value\", \"disabledItemValues\", \"columnWidth\", \"columnHeight\", \"searchable\", \"renderTreeNode\", \"renderColumn\", \"onSelect\", \"onSearch\", \"onChange\", \"getChildren\"];\nimport React, { useCallback, useMemo } from 'react';\nimport { getParentMap } from \"../internals/Tree/utils/index.js\";\nimport { flattenTree } from \"../Tree/utils/index.js\";\nimport { useMap, useControlled, useClassNames, useEventCallback } from \"../internals/hooks/index.js\";\nimport TreeView from \"./TreeView.js\";\nimport SearchView from \"./SearchView.js\";\nimport { useSearch, useSelect, usePaths } from \"./hooks/index.js\";\n/**\n * CascadeTree is a component that displays tree-structured data in columns.\n *\n * @see https://rsuitejs.com/components/cascade-tree\n */\nvar CascadeTree = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    defaultValue = props.defaultValue,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'cascade-tree' : _props$classPrefix,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    valueProp = props.value,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    columnWidth = props.columnWidth,\n    columnHeight = props.columnHeight,\n    searchable = props.searchable,\n    renderTreeNode = props.renderTreeNode,\n    renderColumn = props.renderColumn,\n    onSelect = props.onSelect,\n    onSearch = props.onSearch,\n    onChange = props.onChange,\n    getChildren = props.getChildren,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _ref = useControlled(valueProp, defaultValue),\n    value = _ref[0],\n    setValue = _ref[1];\n\n  // Store the children of each node\n  var childrenMap = useMap();\n\n  // Store the parent of each node\n  var parentMap = useMemo(function () {\n    return getParentMap(data, function (item) {\n      var _childrenMap$get;\n      return (_childrenMap$get = childrenMap.get(item)) !== null && _childrenMap$get !== void 0 ? _childrenMap$get : item[childrenKey];\n    });\n  }, [childrenMap, childrenKey, data]);\n\n  // Flatten the tree data\n  var flattenedData = useMemo(function () {\n    return flattenTree(data, function (item) {\n      var _childrenMap$get2;\n      return (_childrenMap$get2 = childrenMap.get(item)) !== null && _childrenMap$get2 !== void 0 ? _childrenMap$get2 : item[childrenKey];\n    });\n  }, [childrenMap, childrenKey, data]);\n\n  // The selected item\n  var selectedItem = flattenedData.find(function (item) {\n    return item[valueKey] === value;\n  });\n\n  // Callback function after selecting the node\n  var onSelectCallback = function onSelectCallback(node, event) {\n    var isLeafNode = node.isLeafNode,\n      cascadePaths = node.cascadePaths,\n      itemData = node.itemData;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(itemData, cascadePaths, event);\n    if (isLeafNode) {\n      var nextValue = itemData[valueKey];\n      setValue(nextValue);\n    }\n  };\n  var _useSelect = useSelect({\n      value: value,\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      childrenMap: childrenMap,\n      selectedItem: selectedItem,\n      getChildren: getChildren,\n      onChange: onChange,\n      onSelect: onSelectCallback\n    }),\n    activeItem = _useSelect.activeItem,\n    loadingItemsSet = _useSelect.loadingItemsSet,\n    handleSelect = _useSelect.handleSelect;\n  var _usePaths = usePaths({\n      data: data,\n      activeItem: activeItem,\n      selectedItem: selectedItem,\n      getParent: function getParent(item) {\n        return parentMap.get(item);\n      },\n      getChildren: function getChildren(item) {\n        var _childrenMap$get3;\n        return (_childrenMap$get3 = childrenMap.get(item)) !== null && _childrenMap$get3 !== void 0 ? _childrenMap$get3 : item[childrenKey];\n      }\n    }),\n    columns = _usePaths.columns,\n    pathTowardsActiveItem = _usePaths.pathTowardsActiveItem;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  var onSearchCallback = useCallback(function (value, _items, event) {\n    return onSearch === null || onSearch === void 0 ? void 0 : onSearch(value, event);\n  }, [onSearch]);\n  var _useSearch = useSearch({\n      labelKey: labelKey,\n      childrenKey: childrenKey,\n      parentMap: parentMap,\n      flattenedData: flattenedData,\n      onSearch: onSearchCallback\n    }),\n    items = _useSearch.items,\n    searchKeyword = _useSearch.searchKeyword,\n    setSearchKeyword = _useSearch.setSearchKeyword,\n    handleSearch = _useSearch.handleSearch;\n  var handleSearchRowSelect = useEventCallback(function (item, items, event) {\n    var _item$childrenKey;\n    var node = {\n      itemData: item,\n      cascadePaths: items,\n      isLeafNode: !((_item$childrenKey = item[childrenKey]) !== null && _item$childrenKey !== void 0 && _item$childrenKey.length)\n    };\n    handleSelect(node, event);\n    setSearchKeyword('');\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: classes\n  }, rest, {\n    ref: ref\n  }), searchable && /*#__PURE__*/React.createElement(SearchView, {\n    data: items,\n    searchKeyword: searchKeyword,\n    valueKey: valueKey,\n    labelKey: labelKey,\n    parentMap: parentMap,\n    disabledItemValues: disabledItemValues,\n    onSelect: handleSearchRowSelect,\n    onSearch: handleSearch\n  }), !searchKeyword && /*#__PURE__*/React.createElement(TreeView, {\n    columnWidth: columnWidth,\n    columnHeight: columnHeight,\n    disabledItemValues: disabledItemValues,\n    loadingItemsSet: loadingItemsSet,\n    valueKey: valueKey,\n    labelKey: labelKey,\n    childrenKey: childrenKey,\n    classPrefix: classPrefix,\n    data: columns,\n    cascadePaths: pathTowardsActiveItem,\n    activeItemValue: value,\n    onSelect: handleSelect,\n    renderColumn: renderColumn,\n    renderTreeNode: renderTreeNode\n  }));\n});\nCascadeTree.displayName = 'CascadeTree';\nexport default CascadeTree;","map":null,"metadata":{},"sourceType":"module"}