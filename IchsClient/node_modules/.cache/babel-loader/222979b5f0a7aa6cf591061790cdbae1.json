{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"affixHeader\", \"children\", \"classPrefix\", \"className\", \"data\", \"defaultSortType\", \"width\", \"expandedRowKeys\", \"defaultExpandAllRows\", \"defaultExpandedRowKeys\", \"style\", \"id\", \"isTree\", \"hover\", \"bordered\", \"cellBordered\", \"wordWrap\", \"loading\", \"locale\", \"showHeader\", \"sortColumn\", \"rowHeight\", \"sortType\", \"headerHeight\", \"minHeight\", \"height\", \"autoHeight\", \"fillHeight\", \"rtl\", \"translate3d\", \"rowKey\", \"virtualized\", \"rowClassName\", \"rowExpandedHeight\", \"disabledScroll\", \"affixHorizontalScrollbar\", \"loadAnimation\", \"shouldUpdateScroll\", \"renderRow\", \"renderRowExpanded\", \"renderLoading\", \"renderEmpty\", \"onSortColumn\", \"onScroll\", \"renderTreeToggle\", \"onRowClick\", \"onRowContextMenu\", \"onExpandChange\", \"onTouchStart\", \"onTouchMove\", \"onTouchEnd\"],\n  _excluded2 = [\"depth\", \"rowIndex\"],\n  _excluded3 = [\"cellHeight\"];\nimport React, { useState, useRef, useCallback, useImperativeHandle, useReducer, useMemo } from 'react';\nimport * as ReactIs from 'react-is';\nimport { getTranslateDOMPositionXY } from 'dom-lib/translateDOMPositionXY';\nimport PropTypes from 'prop-types';\nimport isFunction from 'lodash/isFunction';\nimport debounce from 'lodash/debounce';\nimport Row from './Row';\nimport CellGroup from './CellGroup';\nimport Scrollbar from './Scrollbar';\nimport MouseArea from './MouseArea';\nimport Loader from './Loader';\nimport EmptyMessage from './EmptyMessage';\nimport TableContext from './TableContext';\nimport Cell from './Cell';\nimport HeaderCell from './HeaderCell';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport { SCROLLBAR_WIDTH, CELL_PADDING_HEIGHT, SORT_TYPE, EXPANDED_KEY, TREE_DEPTH, ROW_HEADER_HEIGHT, ROW_HEIGHT } from './constants';\nimport { mergeCells, flattenData, isRTL, findRowKeys, findAllParents, shouldShowRowByExpanded, resetLeftForCells, useClassNames, useControlled, useUpdateEffect, useCellDescriptor, useTableDimension, useTableRows, useAffix, useScrollListener, usePosition, isSupportTouchEvent } from './utils';\nimport { flattenChildren } from './utils/children';\n/**\n * Filter those expanded nodes.\n * @param data\n * @param expandedRowKeys\n * @param rowKey\n * @returns\n */\n\nvar filterTreeData = function filterTreeData(data, expandedRowKeys, rowKey) {\n  return flattenData(data).filter(function (rowData) {\n    if (rowKey) {\n      var parents = findAllParents(rowData, rowKey);\n      var _expanded = shouldShowRowByExpanded(expandedRowKeys, parents); // FIXME This function is supposed to be pure.\n      //       Don't mutate rowData in-place!\n\n      rowData[EXPANDED_KEY] = _expanded;\n      rowData[TREE_DEPTH] = parents.length;\n      return _expanded;\n    }\n  });\n};\nvar DATA_PLACEHOLDER = [];\nvar getChildrenProps = {\n  Cell: Cell,\n  HeaderCell: HeaderCell,\n  Column: Column,\n  ColumnGroup: ColumnGroup\n};\nvar Table = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var affixHeader = props.affixHeader,\n    getChildren = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'rs-table' : _props$classPrefix,\n    className = props.className,\n    _props$data = props.data,\n    dataProp = _props$data === void 0 ? DATA_PLACEHOLDER : _props$data,\n    _props$defaultSortTyp = props.defaultSortType,\n    defaultSortType = _props$defaultSortTyp === void 0 ? SORT_TYPE.DESC : _props$defaultSortTyp,\n    widthProp = props.width,\n    expandedRowKeysProp = props.expandedRowKeys,\n    defaultExpandAllRows = props.defaultExpandAllRows,\n    defaultExpandedRowKeys = props.defaultExpandedRowKeys,\n    style = props.style,\n    id = props.id,\n    isTree = props.isTree,\n    _props$hover = props.hover,\n    hover = _props$hover === void 0 ? true : _props$hover,\n    bordered = props.bordered,\n    cellBordered = props.cellBordered,\n    wordWrap = props.wordWrap,\n    loading = props.loading,\n    _props$locale = props.locale,\n    locale = _props$locale === void 0 ? {\n      emptyMessage: 'No data found',\n      loading: 'Loading...'\n    } : _props$locale,\n    _props$showHeader = props.showHeader,\n    showHeader = _props$showHeader === void 0 ? true : _props$showHeader,\n    sortColumn = props.sortColumn,\n    _props$rowHeight = props.rowHeight,\n    rowHeight = _props$rowHeight === void 0 ? ROW_HEIGHT : _props$rowHeight,\n    sortTypeProp = props.sortType,\n    _props$headerHeight = props.headerHeight,\n    headerHeightProp = _props$headerHeight === void 0 ? ROW_HEADER_HEIGHT : _props$headerHeight,\n    _props$minHeight = props.minHeight,\n    minHeight = _props$minHeight === void 0 ? 0 : _props$minHeight,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 200 : _props$height,\n    autoHeight = props.autoHeight,\n    fillHeight = props.fillHeight,\n    rtlProp = props.rtl,\n    translate3d = props.translate3d,\n    rowKey = props.rowKey,\n    virtualized = props.virtualized,\n    rowClassName = props.rowClassName,\n    _props$rowExpandedHei = props.rowExpandedHeight,\n    rowExpandedHeight = _props$rowExpandedHei === void 0 ? 100 : _props$rowExpandedHei,\n    disabledScroll = props.disabledScroll,\n    affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n    loadAnimation = props.loadAnimation,\n    _props$shouldUpdateSc = props.shouldUpdateScroll,\n    shouldUpdateScroll = _props$shouldUpdateSc === void 0 ? true : _props$shouldUpdateSc,\n    renderRowProp = props.renderRow,\n    renderRowExpandedProp = props.renderRowExpanded,\n    renderLoading = props.renderLoading,\n    renderEmpty = props.renderEmpty,\n    onSortColumn = props.onSortColumn,\n    onScroll = props.onScroll,\n    renderTreeToggle = props.renderTreeToggle,\n    onRowClick = props.onRowClick,\n    onRowContextMenu = props.onRowContextMenu,\n    onExpandChange = props.onExpandChange,\n    onTouchStart = props.onTouchStart,\n    onTouchMove = props.onTouchMove,\n    onTouchEnd = props.onTouchEnd,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var children = useMemo(function () {\n    return flattenChildren(isFunction(getChildren) ? getChildren(getChildrenProps) : getChildren);\n  }, [getChildren]);\n  var _useClassNames = useClassNames(classPrefix, typeof classPrefix !== 'undefined'),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    mergeCls = _useClassNames.merge,\n    prefix = _useClassNames.prefix; // Use `forceUpdate` to force the component to re-render after manipulating the DOM.\n\n  var _useReducer = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    forceUpdate = _useReducer[1];\n  var _useControlled = useControlled(expandedRowKeysProp, defaultExpandAllRows ? findRowKeys(dataProp, rowKey, isFunction(renderRowExpandedProp)) : defaultExpandedRowKeys || []),\n    expandedRowKeys = _useControlled[0],\n    setExpandedRowKeys = _useControlled[1];\n  var _useState = useState(function () {\n      return isTree ? filterTreeData(dataProp, expandedRowKeys, rowKey) : dataProp;\n    }),\n    data = _useState[0],\n    setData = _useState[1];\n  if (isTree) {\n    if (!rowKey) {\n      throw new Error('The `rowKey` is required when set isTree');\n    } else if (data.length > 0) {\n      if (!data[0].hasOwnProperty(rowKey)) {\n        throw new Error('The `rowKey` is not found in data');\n      }\n    }\n  }\n  var _useTableRows = useTableRows({\n      data: dataProp,\n      expandedRowKeys: expandedRowKeys,\n      wordWrap: wordWrap,\n      prefix: prefix\n    }),\n    tableRowsMaxHeight = _useTableRows.tableRowsMaxHeight,\n    bindTableRowsRef = _useTableRows.bindTableRowsRef;\n  var headerHeight = showHeader ? headerHeightProp : 0;\n  var rtl = rtlProp || isRTL();\n  var getRowHeight = function getRowHeight() {\n    return typeof rowHeight === 'function' ? rowHeight() : rowHeight;\n  };\n  var translateDOMPositionXY = useRef(getTranslateDOMPositionXY({\n    forceUseTransform: true,\n    enable3DTransform: translate3d\n  })); // Check for the existence of fixed columns in all column properties.\n\n  var shouldFixedColumn = children.some(function (child) {\n    var _child$props;\n    return ReactIs.isElement(child) && (child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.fixed);\n  }); // Check all column properties for the existence of rowSpan.\n\n  var shouldRowSpanColumn = children.some(function (child) {\n    var _child$props2;\n    return ReactIs.isElement(child) && (child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.rowSpan);\n  });\n  var visibleRows = useRef([]);\n  var mouseAreaRef = useRef(null);\n  var tableRef = useRef(null);\n  var tableHeaderRef = useRef(null);\n  var affixHeaderWrapperRef = useRef(null);\n  var headerWrapperRef = useRef(null);\n  var tableBodyRef = useRef(null);\n  var wheelWrapperRef = useRef(null);\n  var scrollbarXRef = useRef(null);\n  var scrollbarYRef = useRef(null);\n  var handleTableResizeChange = function handleTableResizeChange(_prevSize, event) {\n    forceUpdate();\n    /**\n     * Reset the position of the scroll bar after the table size changes.\n     */\n\n    if (typeof shouldUpdateScroll === 'function') {\n      onScrollTo(shouldUpdateScroll(event));\n    } else if (shouldUpdateScroll) {\n      var vertical = event === 'bodyHeightChanged';\n      vertical ? onScrollTop(0) : onScrollLeft(0);\n    }\n    if (event === 'bodyWidthChanged') {\n      deferUpdatePosition();\n    }\n  };\n  var _useTableDimension = useTableDimension({\n      // The data should be flattened,\n      // otherwise the array length required to calculate the scroll height in the TreeTable is not real.\n      data: data,\n      width: widthProp,\n      rowHeight: rowHeight,\n      tableRef: tableRef,\n      headerWrapperRef: headerWrapperRef,\n      prefix: prefix,\n      affixHeader: affixHeader,\n      affixHorizontalScrollbar: affixHorizontalScrollbar,\n      headerHeight: headerHeight,\n      height: height,\n      minHeight: minHeight,\n      autoHeight: autoHeight,\n      fillHeight: fillHeight,\n      children: children,\n      expandedRowKeys: expandedRowKeys,\n      showHeader: showHeader,\n      bordered: bordered,\n      onTableScroll: debounce(function (coords) {\n        return onScrollTo(coords);\n      }, 100),\n      onTableResizeChange: handleTableResizeChange\n    }),\n    contentHeight = _useTableDimension.contentHeight,\n    contentWidth = _useTableDimension.contentWidth,\n    minScrollY = _useTableDimension.minScrollY,\n    minScrollX = _useTableDimension.minScrollX,\n    scrollY = _useTableDimension.scrollY,\n    scrollX = _useTableDimension.scrollX,\n    tableWidth = _useTableDimension.tableWidth,\n    tableOffset = _useTableDimension.tableOffset,\n    headerOffset = _useTableDimension.headerOffset,\n    setScrollY = _useTableDimension.setScrollY,\n    setScrollX = _useTableDimension.setScrollX,\n    getTableHeight = _useTableDimension.getTableHeight;\n  useAffix({\n    getTableHeight: getTableHeight,\n    contentHeight: contentHeight,\n    affixHorizontalScrollbar: affixHorizontalScrollbar,\n    affixHeader: affixHeader,\n    tableOffset: tableOffset,\n    headerOffset: headerOffset,\n    headerHeight: headerHeight,\n    scrollbarXRef: scrollbarXRef,\n    affixHeaderWrapperRef: affixHeaderWrapperRef\n  });\n  var _usePosition = usePosition({\n      data: dataProp,\n      height: height,\n      tableWidth: tableWidth,\n      tableRef: tableRef,\n      prefix: prefix,\n      translateDOMPositionXY: translateDOMPositionXY,\n      wheelWrapperRef: wheelWrapperRef,\n      headerWrapperRef: headerWrapperRef,\n      affixHeaderWrapperRef: affixHeaderWrapperRef,\n      tableHeaderRef: tableHeaderRef,\n      scrollX: scrollX,\n      scrollY: scrollY,\n      contentWidth: contentWidth,\n      shouldFixedColumn: shouldFixedColumn\n    }),\n    forceUpdatePosition = _usePosition.forceUpdatePosition,\n    deferUpdatePosition = _usePosition.deferUpdatePosition;\n  var _useScrollListener = useScrollListener({\n      rtl: rtl,\n      data: dataProp,\n      height: height,\n      virtualized: virtualized,\n      getTableHeight: getTableHeight,\n      contentHeight: contentHeight,\n      headerHeight: headerHeight,\n      autoHeight: autoHeight,\n      tableBodyRef: tableBodyRef,\n      scrollbarXRef: scrollbarXRef,\n      scrollbarYRef: scrollbarYRef,\n      disabledScroll: disabledScroll,\n      loading: loading,\n      tableRef: tableRef,\n      contentWidth: contentWidth,\n      tableWidth: tableWidth,\n      scrollY: scrollY,\n      minScrollY: minScrollY,\n      minScrollX: minScrollX,\n      scrollX: scrollX,\n      setScrollX: setScrollX,\n      setScrollY: setScrollY,\n      forceUpdatePosition: forceUpdatePosition,\n      deferUpdatePosition: deferUpdatePosition,\n      onScroll: onScroll,\n      onTouchStart: onTouchStart,\n      onTouchMove: onTouchMove,\n      onTouchEnd: onTouchEnd\n    }),\n    isScrolling = _useScrollListener.isScrolling,\n    onScrollHorizontal = _useScrollListener.onScrollHorizontal,\n    onScrollVertical = _useScrollListener.onScrollVertical,\n    onScrollBody = _useScrollListener.onScrollBody,\n    onScrollTop = _useScrollListener.onScrollTop,\n    onScrollLeft = _useScrollListener.onScrollLeft,\n    onScrollTo = _useScrollListener.onScrollTo,\n    onScrollByKeydown = _useScrollListener.onScrollByKeydown;\n  var _useCellDescriptor = useCellDescriptor({\n      children: children,\n      rtl: rtl,\n      mouseAreaRef: mouseAreaRef,\n      tableRef: tableRef,\n      minScrollX: minScrollX,\n      scrollX: scrollX,\n      tableWidth: tableWidth,\n      headerHeight: headerHeight,\n      showHeader: showHeader,\n      sortType: sortTypeProp,\n      defaultSortType: defaultSortType,\n      sortColumn: sortColumn,\n      prefix: prefix,\n      onSortColumn: onSortColumn,\n      // Force table update after column width change, so scrollbar re-renders.\n      onHeaderCellResize: forceUpdate,\n      rowHeight: rowHeight\n    }),\n    headerCells = _useCellDescriptor.headerCells,\n    bodyCells = _useCellDescriptor.bodyCells,\n    allColumnsWidth = _useCellDescriptor.allColumnsWidth,\n    hasCustomTreeCol = _useCellDescriptor.hasCustomTreeCol;\n  var colCounts = useRef((headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) || 0);\n  useUpdateEffect(function () {\n    setData(isTree ? filterTreeData(dataProp, expandedRowKeys, rowKey) : dataProp);\n  }, [dataProp, expandedRowKeys, rowKey, isTree]);\n  useUpdateEffect(function () {\n    if ((headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) !== colCounts.current) {\n      onScrollLeft(0);\n      colCounts.current = (headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) || 0;\n    }\n  }, [children]);\n  useImperativeHandle(ref, function () {\n    return {\n      get root() {\n        return tableRef.current;\n      },\n      get body() {\n        return wheelWrapperRef.current;\n      },\n      // The scroll position of the table\n      get scrollPosition() {\n        return {\n          top: Math.abs(scrollY.current),\n          left: Math.abs(scrollX.current)\n        };\n      },\n      scrollTop: onScrollTop,\n      scrollLeft: onScrollLeft\n    };\n  });\n  var rowWidth = allColumnsWidth > tableWidth.current ? allColumnsWidth : tableWidth.current; // Whether to show vertical scroll bar\n\n  var hasVerticalScrollbar = !autoHeight && contentHeight.current > getTableHeight() - headerHeight; // Whether to show the horizontal scroll bar\n\n  var hasHorizontalScrollbar = contentWidth.current > tableWidth.current;\n  var classes = mergeCls(className, withClassPrefix({\n    bordered: bordered,\n    hover: hover && !shouldRowSpanColumn,\n    loading: loading,\n    treetable: isTree,\n    'word-wrap': wordWrap,\n    'cell-bordered': cellBordered\n  }));\n  var styles = _extends({\n    width: widthProp || 'auto',\n    height: getTableHeight()\n  }, style);\n  var renderRowExpanded = useCallback(function (rowData) {\n    var height = 0;\n    if (typeof rowExpandedHeight === 'function') {\n      height = rowExpandedHeight(rowData);\n    } else {\n      height = rowExpandedHeight;\n    }\n    var styles = {\n      height: height\n    };\n    if (typeof renderRowExpandedProp === 'function') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('row-expanded'),\n        style: styles\n      }, renderRowExpandedProp(rowData));\n    }\n    return null;\n  }, [prefix, renderRowExpandedProp, rowExpandedHeight]);\n  var renderRow = function renderRow(props, cells, shouldRenderExpandedRow, rowData) {\n    var depth = props.depth,\n      rowIndex = props.rowIndex,\n      restRowProps = _objectWithoutPropertiesLoose(props, _excluded2);\n    if (typeof rowClassName === 'function') {\n      restRowProps.className = rowClassName(rowData, rowIndex);\n    } else {\n      restRowProps.className = rowClassName;\n    }\n    var rowStyles = _extends({}, props === null || props === void 0 ? void 0 : props.style);\n    var rowRight = 0;\n    if (rtl && contentWidth.current > tableWidth.current) {\n      rowRight = tableWidth.current - contentWidth.current;\n      rowStyles.right = rowRight;\n    }\n    var rowNode = null; // IF there are fixed columns, add a fixed group\n\n    if (shouldFixedColumn && contentWidth.current > tableWidth.current) {\n      var fixedLeftCells = [];\n      var fixedRightCells = [];\n      var scrollCells = [];\n      var fixedLeftCellGroupWidth = 0;\n      var fixedRightCellGroupWidth = 0;\n      for (var i = 0; i < cells.length; i++) {\n        var cell = cells[i];\n        var _cell$props = cell.props,\n          fixed = _cell$props.fixed,\n          width = _cell$props.width;\n        var isFixedStart = fixed === 'left' || fixed === true;\n        var isFixedEnd = fixed === 'right';\n        if (rtl) {\n          isFixedStart = fixed === 'right';\n          isFixedEnd = fixed === 'left' || fixed === true;\n        }\n        if (isFixedStart) {\n          fixedLeftCells.push(cell);\n          fixedLeftCellGroupWidth += width;\n        } else if (isFixedEnd) {\n          fixedRightCells.push(cell);\n          fixedRightCellGroupWidth += width;\n        } else {\n          scrollCells.push(cell);\n        }\n      }\n      if (hasVerticalScrollbar && fixedRightCellGroupWidth) {\n        fixedRightCellGroupWidth += SCROLLBAR_WIDTH;\n      }\n      rowNode = /*#__PURE__*/React.createElement(React.Fragment, null, fixedLeftCellGroupWidth ? /*#__PURE__*/React.createElement(CellGroup, {\n        fixed: \"left\",\n        height: props.isHeaderRow ? props.headerHeight : props.height,\n        width: fixedLeftCellGroupWidth,\n        style: rtl ? {\n          right: tableWidth.current - fixedLeftCellGroupWidth - rowRight\n        } : undefined\n      }, mergeCells(resetLeftForCells(fixedLeftCells))) : null, /*#__PURE__*/React.createElement(CellGroup, null, mergeCells(scrollCells)), fixedRightCellGroupWidth ? /*#__PURE__*/React.createElement(CellGroup, {\n        fixed: \"right\",\n        style: rtl ? {\n          right: 0 - rowRight\n        } : {\n          left: tableWidth.current - fixedRightCellGroupWidth\n        },\n        height: props.isHeaderRow ? props.headerHeight : props.height,\n        width: fixedRightCellGroupWidth\n      }, mergeCells(resetLeftForCells(fixedRightCells, hasVerticalScrollbar ? SCROLLBAR_WIDTH : 0))) : null, shouldRenderExpandedRow && renderRowExpanded(rowData));\n    } else {\n      rowNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CellGroup, null, mergeCells(cells)), shouldRenderExpandedRow && renderRowExpanded(rowData));\n    }\n    return /*#__PURE__*/React.createElement(Row, _extends({}, restRowProps, {\n      \"data-depth\": depth,\n      style: rowStyles\n    }), renderRowProp ? renderRowProp(rowNode, rowData) : rowNode);\n  };\n  var renderTableHeader = function renderTableHeader(headerCells, rowWidth) {\n    var top = typeof affixHeader === 'number' ? affixHeader : 0;\n    var rowProps = {\n      'aria-rowindex': 1,\n      rowRef: tableHeaderRef,\n      width: rowWidth,\n      height: getRowHeight(),\n      headerHeight: headerHeight,\n      isHeaderRow: true,\n      top: 0,\n      rowIndex: -1\n    };\n    var fixedStyle = {\n      position: 'fixed',\n      overflow: 'hidden',\n      height: headerHeight,\n      width: tableWidth.current,\n      top: top\n    }; // Affix header\n\n    var header = /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('affix-header'),\n      style: fixedStyle,\n      ref: affixHeaderWrapperRef\n    }, renderRow(rowProps, headerCells));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, (affixHeader === 0 || affixHeader) && header, /*#__PURE__*/React.createElement(\"div\", {\n      role: \"rowgroup\",\n      className: prefix('header-row-wrapper'),\n      ref: headerWrapperRef\n    }, renderRow(rowProps, headerCells)));\n  };\n  var shouldRenderExpandedRow = useCallback(function (rowData) {\n    if (isFunction(renderRowExpandedProp) && !isTree && rowKey && expandedRowKeys.some(function (key) {\n      return key === rowData[rowKey];\n    })) {\n      return true;\n    }\n    return false;\n  }, [expandedRowKeys, isTree, renderRowExpandedProp, rowKey]);\n  var bindRowClick = useCallback(function (rowData) {\n    return function (event) {\n      onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(rowData, event);\n    };\n  }, [onRowClick]);\n  var bindRowContextMenu = useCallback(function (rowData) {\n    return function (event) {\n      onRowContextMenu === null || onRowContextMenu === void 0 ? void 0 : onRowContextMenu(rowData, event);\n    };\n  }, [onRowContextMenu]);\n  var handleTreeToggle = useCallback(function (treeRowKey, _rowIndex, rowData) {\n    var open = false;\n    var nextExpandedRowKeys = [];\n    for (var i = 0; i < expandedRowKeys.length; i++) {\n      var key = expandedRowKeys[i];\n      if (key === treeRowKey) {\n        open = true;\n      } else {\n        nextExpandedRowKeys.push(key);\n      }\n    }\n    if (!open) {\n      nextExpandedRowKeys.push(treeRowKey);\n    }\n    setExpandedRowKeys(nextExpandedRowKeys);\n    onExpandChange === null || onExpandChange === void 0 ? void 0 : onExpandChange(!open, rowData);\n  }, [expandedRowKeys, onExpandChange, setExpandedRowKeys]);\n  /**\n   * Records the status of merged rows.\n   * { cellKey: [count,index]}\n   */\n\n  var rowSpanState = useRef({});\n  var renderRowData = function renderRowData(bodyCells, rowData, props, shouldRenderExpandedRow) {\n    var hasChildren = isTree && rowData.children && Array.isArray(rowData.children);\n    var nextRowKey = rowKey && typeof rowData[rowKey] !== 'undefined' ? rowData[rowKey] : props.key;\n    var cellHeight = props.cellHeight,\n      restRowProps = _objectWithoutPropertiesLoose(props, _excluded3);\n    var rowProps = _extends({}, restRowProps, {\n      key: nextRowKey,\n      'aria-rowindex': props.key + 2,\n      rowRef: bindTableRowsRef(props.key, rowData),\n      onClick: bindRowClick(rowData),\n      onContextMenu: bindRowContextMenu(rowData)\n    });\n    var expanded = expandedRowKeys.some(function (key) {\n      return rowKey && key === rowData[rowKey];\n    });\n    var cells = [];\n    for (var i = 0; i < bodyCells.length; i++) {\n      var _cell$props2, _cell$props2$rowSpan, _rowSpanState$current, _cell$props3, _rowSpanState$current2;\n      var cell = bodyCells[i];\n      var rowSpan = (_cell$props2 = cell.props) === null || _cell$props2 === void 0 ? void 0 : (_cell$props2$rowSpan = _cell$props2.rowSpan) === null || _cell$props2$rowSpan === void 0 ? void 0 : _cell$props2$rowSpan.call(_cell$props2, rowData);\n      var dataCellHeight = rowSpan ? rowSpan * (cellHeight || ROW_HEIGHT) : cellHeight;\n      var _cellKey = cell.props.dataKey || i; // Record the cell state of the merged row\n\n      if (((_rowSpanState$current = rowSpanState.current[_cellKey]) === null || _rowSpanState$current === void 0 ? void 0 : _rowSpanState$current[1]) > 0) {\n        rowSpanState.current[_cellKey][1] -= 1; // Restart counting when merged to the last cell.\n\n        if (rowSpanState.current[_cellKey][1] === 0) {\n          rowSpanState.current[_cellKey][0] = 0;\n        }\n      }\n      if (rowSpan) {\n        // The state of the initial merged cell\n        rowSpanState.current[_cellKey] = [rowSpan, rowSpan];\n        rowProps.rowSpan = rowSpan;\n        rowProps.style = {\n          overflow: 'inherit'\n        };\n      } // Cells marked as deleted when checking for merged cell.\n\n      var removedCell = (_cell$props3 = cell.props) !== null && _cell$props3 !== void 0 && _cell$props3.rowSpan && !rowSpan && ((_rowSpanState$current2 = rowSpanState.current[_cellKey]) === null || _rowSpanState$current2 === void 0 ? void 0 : _rowSpanState$current2[0]) !== 0 ? true : false;\n      cells.push( /*#__PURE__*/React.cloneElement(cell, {\n        hasChildren: hasChildren,\n        rowData: rowData,\n        rowIndex: props.rowIndex,\n        wordWrap: wordWrap,\n        height: dataCellHeight,\n        depth: props.depth,\n        renderTreeToggle: renderTreeToggle,\n        onTreeToggle: handleTreeToggle,\n        rowKey: nextRowKey,\n        expanded: expanded,\n        rowSpan: rowSpan,\n        removed: removedCell\n      }));\n    }\n    return renderRow(rowProps, cells, shouldRenderExpandedRow, rowData);\n  };\n  var renderScrollbar = function renderScrollbar() {\n    var height = getTableHeight();\n    if (disabledScroll) {\n      return null;\n    }\n    var scrollbars = [];\n    if (hasHorizontalScrollbar) {\n      scrollbars.push( /*#__PURE__*/React.createElement(Scrollbar, {\n        key: \"scrollbar\",\n        tableId: id,\n        style: {\n          width: tableWidth.current\n        },\n        length: tableWidth.current,\n        onScroll: onScrollHorizontal,\n        scrollLength: contentWidth.current,\n        ref: scrollbarXRef\n      }));\n    }\n    if (hasVerticalScrollbar) {\n      scrollbars.push( /*#__PURE__*/React.createElement(Scrollbar, {\n        vertical: true,\n        key: \"vertical-scrollbar\",\n        tableId: id,\n        length: height - headerHeight,\n        onScroll: onScrollVertical,\n        scrollLength: contentHeight.current,\n        ref: scrollbarYRef\n      }));\n    }\n    return scrollbars;\n  };\n  var renderTableBody = function renderTableBody(bodyCells, rowWidth) {\n    var _visibleRows$current;\n    var height = getTableHeight();\n    var bodyHeight = height - headerHeight;\n    var bodyStyles = {\n      top: headerHeight,\n      height: bodyHeight\n    };\n    var contentHeight = 0;\n    var topHideHeight = 0;\n    var bottomHideHeight = 0;\n    visibleRows.current = [];\n    if (data) {\n      var _top = 0; // Row position\n\n      var minTop = Math.abs(scrollY.current);\n      var startHeight = 0;\n      if (typeof rowExpandedHeight === 'function') {\n        startHeight = data.length ? rowExpandedHeight(data[0]) : 100;\n      } else {\n        startHeight = rowExpandedHeight;\n      }\n      var maxTop = minTop + height + startHeight;\n      var isCustomRowHeight = typeof rowHeight === 'function';\n      var isUncertainHeight = !!renderRowExpandedProp || isCustomRowHeight || wordWrap; // If virtualized is enabled and the row height in the Table is variable,\n      // you need to loop through the data to get the height of each row.\n\n      if (isUncertainHeight && virtualized || !virtualized) {\n        // Avoid white screens on the top and bottom of the table when touching and scrolling on the mobile terminal.\n        // So supplement the display data row.\n        if (isSupportTouchEvent()) {\n          var coveredHeight = height * 3;\n          minTop = Math.max(minTop - coveredHeight, 0);\n          maxTop = maxTop + coveredHeight;\n        }\n        for (var index = 0; index < data.length; index++) {\n          var _rowData = data[index];\n          var maxHeight = tableRowsMaxHeight[index];\n          var expandedRow = shouldRenderExpandedRow(_rowData);\n          var nextRowHeight = 0;\n          var cellHeight = 0;\n          if (typeof rowHeight === 'function') {\n            nextRowHeight = rowHeight(_rowData);\n            cellHeight = nextRowHeight;\n          } else {\n            nextRowHeight = maxHeight ? Math.max(maxHeight + CELL_PADDING_HEIGHT, rowHeight) : rowHeight;\n            cellHeight = nextRowHeight;\n            if (expandedRow) {\n              // If the row is expanded, the height of the expanded row is added.\n              if (typeof rowExpandedHeight === 'function') {\n                nextRowHeight += rowExpandedHeight(_rowData);\n              } else {\n                nextRowHeight += rowExpandedHeight;\n              }\n            }\n          }\n          contentHeight += nextRowHeight;\n          var rowProps = {\n            key: index,\n            top: _top,\n            rowIndex: index,\n            width: rowWidth,\n            depth: _rowData[TREE_DEPTH],\n            height: nextRowHeight,\n            cellHeight: cellHeight\n          };\n          _top += nextRowHeight;\n          if (virtualized && !wordWrap) {\n            if (_top + nextRowHeight < minTop) {\n              topHideHeight += nextRowHeight;\n              continue;\n            } else if (_top > maxTop) {\n              bottomHideHeight += nextRowHeight;\n              continue;\n            }\n          }\n          visibleRows.current.push(renderRowData(bodyCells, _rowData, rowProps, expandedRow));\n        }\n      } else {\n        /** virtualized */\n        // If the row height of the Table is fixed, it is directly calculated by the row height and the number of rows,\n        // thereby reducing the performance cost of traversing all data.\n        var _nextRowHeight = getRowHeight();\n        var startIndex = Math.max(Math.floor(minTop / _nextRowHeight), 0);\n        var endIndex = Math.min(startIndex + Math.ceil(bodyHeight / _nextRowHeight) + 5, data.length); // Avoid white screens on the top and bottom of the table when touching and scrolling on the mobile terminal.\n        // So supplement the display data row.\n\n        if (isSupportTouchEvent()) {\n          var coveredCount = Math.floor(height / _nextRowHeight * 3);\n          startIndex = Math.max(startIndex - coveredCount, 0);\n          endIndex = Math.min(endIndex + coveredCount, data.length);\n        }\n        contentHeight = data.length * _nextRowHeight;\n        topHideHeight = startIndex * _nextRowHeight;\n        bottomHideHeight = (data.length - endIndex) * _nextRowHeight;\n        for (var _index = startIndex; _index < endIndex; _index++) {\n          var _rowData2 = data[_index];\n          var _rowProps = {\n            key: _index,\n            rowIndex: _index,\n            depth: _rowData2[TREE_DEPTH],\n            top: _index * _nextRowHeight,\n            width: rowWidth,\n            height: _nextRowHeight,\n            cellHeight: _nextRowHeight\n          };\n          visibleRows.current.push(renderRowData(bodyCells, _rowData2, _rowProps, false));\n        }\n      }\n    }\n    var wheelStyles = {\n      position: 'absolute',\n      height: contentHeight,\n      minHeight: height,\n      pointerEvents: isScrolling ? 'none' : undefined\n    };\n    var topRowStyles = {\n      height: topHideHeight\n    };\n    var bottomRowStyles = {\n      height: bottomHideHeight\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: tableBodyRef,\n      role: \"rowgroup\",\n      className: prefix('body-row-wrapper'),\n      style: bodyStyles,\n      onScroll: onScrollBody\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: wheelStyles,\n      className: prefix('body-wheel-area'),\n      ref: wheelWrapperRef\n    }, topHideHeight ? /*#__PURE__*/React.createElement(Row, {\n      style: topRowStyles,\n      className: \"virtualized\"\n    }) : null, visibleRows.current, bottomHideHeight ? /*#__PURE__*/React.createElement(Row, {\n      style: bottomRowStyles,\n      className: \"virtualized\"\n    }) : null), /*#__PURE__*/React.createElement(EmptyMessage, {\n      locale: locale,\n      renderEmpty: renderEmpty,\n      addPrefix: prefix,\n      loading: !!((_visibleRows$current = visibleRows.current) !== null && _visibleRows$current !== void 0 && _visibleRows$current.length) || loading\n    }), renderScrollbar(), /*#__PURE__*/React.createElement(Loader, {\n      locale: locale,\n      loadAnimation: loadAnimation,\n      loading: loading,\n      addPrefix: prefix,\n      renderLoading: renderLoading\n    }));\n  };\n  var contextValue = React.useMemo(function () {\n    return {\n      classPrefix: classPrefix,\n      translateDOMPositionXY: translateDOMPositionXY.current,\n      rtl: rtl,\n      isTree: isTree,\n      hasCustomTreeCol: hasCustomTreeCol\n    };\n  }, [classPrefix, hasCustomTreeCol, isTree, rtl]);\n  return /*#__PURE__*/React.createElement(TableContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: isTree ? 'treegrid' : 'grid' // The aria-rowcount is specified on the element with the table.\n    // Its value is an integer equal to the total number of rows available, including header rows.\n    ,\n\n    \"aria-rowcount\": data.length + 1,\n    \"aria-colcount\": colCounts.current,\n    \"aria-busy\": loading\n  }, rest, {\n    className: classes,\n    style: styles,\n    ref: tableRef,\n    tabIndex: -1,\n    onKeyDown: onScrollByKeydown\n  }), showHeader && renderTableHeader(headerCells, rowWidth), children && renderTableBody(bodyCells, rowWidth), showHeader && /*#__PURE__*/React.createElement(MouseArea, {\n    ref: mouseAreaRef,\n    addPrefix: prefix,\n    headerHeight: headerHeight,\n    height: getTableHeight()\n  })));\n});\nTable.displayName = 'Table';\nTable.propTypes = {\n  autoHeight: PropTypes.bool,\n  fillHeight: PropTypes.bool,\n  affixHeader: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  affixHorizontalScrollbar: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  bordered: PropTypes.bool,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.any,\n  cellBordered: PropTypes.bool,\n  data: PropTypes.array,\n  defaultExpandAllRows: PropTypes.bool,\n  defaultExpandedRowKeys: PropTypes.array,\n  defaultSortType: PropTypes.any,\n  disabledScroll: PropTypes.bool,\n  expandedRowKeys: PropTypes.array,\n  hover: PropTypes.bool,\n  height: PropTypes.number,\n  headerHeight: PropTypes.number,\n  locale: PropTypes.object,\n  loading: PropTypes.bool,\n  loadAnimation: PropTypes.bool,\n  minHeight: PropTypes.number,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  renderTreeToggle: PropTypes.func,\n  renderRowExpanded: PropTypes.func,\n  renderRow: PropTypes.func,\n  rowExpandedHeight: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  renderEmpty: PropTypes.func,\n  renderLoading: PropTypes.func,\n  rowClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  rtl: PropTypes.bool,\n  style: PropTypes.object,\n  sortColumn: PropTypes.string,\n  sortType: PropTypes.any,\n  showHeader: PropTypes.bool,\n  shouldUpdateScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  translate3d: PropTypes.bool,\n  wordWrap: PropTypes.any,\n  width: PropTypes.number,\n  virtualized: PropTypes.bool,\n  isTree: PropTypes.bool,\n  onRowClick: PropTypes.func,\n  onRowContextMenu: PropTypes.func,\n  onScroll: PropTypes.func,\n  onSortColumn: PropTypes.func,\n  onExpandChange: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func\n};\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}