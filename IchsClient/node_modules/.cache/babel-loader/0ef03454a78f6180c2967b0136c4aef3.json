{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"href\", \"disabled\", \"onClick\"];\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nfunction isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n\n/**\n * A SafeAnchor is a wrapper around the `<a>` HTML element.\n * @private\n */\nvar SafeAnchor = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'a' : _props$as,\n    href = props.href,\n    disabled = props.disabled,\n    onClick = props.onClick,\n    restProps = _objectWithoutPropertiesLoose(props, _excluded);\n  var handleClick = useCallback(function (event) {\n    if (disabled || isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n  }, [disabled, href, onClick]);\n\n  // There are default role and href attributes on the node to ensure Focus management and keyboard interactions.\n  var trivialProps = isTrivialHref(href) ? {\n    role: 'button',\n    href: '#'\n  } : null;\n  if (disabled) {\n    restProps.tabIndex = -1;\n    restProps['aria-disabled'] = true;\n  }\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    href: href\n  }, trivialProps, restProps, {\n    onClick: handleClick\n  }));\n});\nSafeAnchor.displayName = 'SafeAnchor';\nSafeAnchor.propTypes = {\n  href: PropTypes.string,\n  disabled: PropTypes.bool,\n  as: PropTypes.elementType\n};\nexport default SafeAnchor;","map":null,"metadata":{},"sourceType":"module"}