{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"expanded\", \"className\", \"classPrefix\", \"onToggle\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from \"../IconButton/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport AngleLeft from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRight from '@rsuite/icons/legacy/AngleRight';\nimport { deprecatePropType } from \"../internals/propTypes/index.js\";\nimport { SidenavContext } from \"./Sidenav.js\";\nvar SidenavToggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var sidenav = useContext(SidenavContext);\n  if (!sidenav) {\n    throw new Error('<Sidenav.Toggle> must be rendered within a <Sidenav>');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    DEPRECATED_expanded = props.expanded,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'sidenav-toggle' : _props$classPrefix,\n    onToggle = props.onToggle,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  // if `expanded` prop is provided, it takes priority\n  var expanded = DEPRECATED_expanded !== null && DEPRECATED_expanded !== void 0 ? DEPRECATED_expanded : sidenav.expanded;\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix({\n    collapsed: !expanded\n  }));\n  var Icon = expanded ? AngleLeft : AngleRight;\n  var handleToggle = function handleToggle(event) {\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(!expanded, event);\n  };\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    icon: /*#__PURE__*/React.createElement(Icon, null),\n    className: prefix('button'),\n    onClick: handleToggle,\n    \"aria-label\": expanded ? 'Collapse' : 'Expand'\n  }));\n});\nSidenavToggle.displayName = 'Sidenav.Toggle';\nSidenavToggle.propTypes = {\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  expanded: deprecatePropType(PropTypes.bool, 'Use <Sidenav expanded> instead.'),\n  onToggle: PropTypes.func\n};\nexport default SidenavToggle;","map":null,"metadata":{},"sourceType":"module"}