{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"data\", \"groupBy\", \"maxHeight\", \"activeItemValues\", \"disabledItemValues\", \"classPrefix\", \"valueKey\", \"labelKey\", \"virtualized\", \"listProps\", \"listRef\", \"className\", \"style\", \"focusItemValue\", \"listItemClassPrefix\", \"listItemAs\", \"listItemProps\", \"rowHeight\", \"rowGroupHeight\", \"query\", \"renderMenuGroup\", \"renderMenuItem\", \"onGroupTitleClick\", \"onSelect\"];\nvar _this = this;\nimport React, { useRef, useState, useEffect } from 'react';\nimport isUndefined from 'lodash/isUndefined';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport findIndex from 'lodash/findIndex';\nimport pickBy from 'lodash/pickBy';\nimport getPosition from 'dom-lib/getPosition';\nimport scrollTop from 'dom-lib/scrollTop';\nimport getHeight from 'dom-lib/getHeight';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\nimport { List, AutoSizer, VariableSizeList } from \"../Windowing/index.js\";\nimport { RSUITE_PICKER_GROUP_KEY } from \"../symbols.js\";\nimport { useClassNames, useMount, useEventCallback } from \"../hooks/index.js\";\nimport { shallowEqual, mergeRefs } from \"../utils/index.js\";\nimport { KEY_GROUP_TITLE } from \"../utils/getDataGroupBy.js\";\nimport ListItemGroup from \"./ListItemGroup.js\";\nimport useCombobox from \"./hooks/useCombobox.js\";\nimport Highlight from \"../../Highlight/index.js\";\n\n/**\n * Props for the Listbox component.\n */\n/**\n * Props for the Listbox component.\n * @template Multiple - Whether multiple selection is enabled.\n */\n\nvar Listbox = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    groupBy = props.groupBy,\n    _props$maxHeight = props.maxHeight,\n    maxHeight = _props$maxHeight === void 0 ? 320 : _props$maxHeight,\n    _props$activeItemValu = props.activeItemValues,\n    activeItemValues = _props$activeItemValu === void 0 ? [] : _props$activeItemValu,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? [] : _props$disabledItemVa,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'listbox' : _props$classPrefix,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    virtualized = props.virtualized,\n    listProps = props.listProps,\n    virtualizedListRef = props.listRef,\n    className = props.className,\n    style = props.style,\n    focusItemValue = props.focusItemValue,\n    listItemClassPrefix = props.listItemClassPrefix,\n    ListItem = props.listItemAs,\n    listItemProps = props.listItemProps,\n    _props$rowHeight = props.rowHeight,\n    rowHeight = _props$rowHeight === void 0 ? 36 : _props$rowHeight,\n    _props$rowGroupHeight = props.rowGroupHeight,\n    rowGroupHeight = _props$rowGroupHeight === void 0 ? 48 : _props$rowGroupHeight,\n    query = props.query,\n    renderMenuGroup = props.renderMenuGroup,\n    renderMenuItem = props.renderMenuItem,\n    onGroupTitleClick = props.onGroupTitleClick,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var groupable = typeof groupBy !== 'undefined';\n  var classes = merge(className, withClassPrefix('items', {\n    grouped: groupable\n  }));\n  var _useCombobox = useCombobox(),\n    id = _useCombobox.id,\n    labelId = _useCombobox.labelId,\n    popupType = _useCombobox.popupType,\n    multiple = _useCombobox.multiple;\n  var menuBodyContainerRef = useRef(null);\n  var listRef = useRef(null);\n  var _useState = useState([]),\n    foldedGroupKeys = _useState[0],\n    setFoldedGroupKeys = _useState[1];\n  var handleGroupTitleClick = useEventCallback(function (key, event) {\n    var nextGroupKeys = foldedGroupKeys.filter(function (item) {\n      return item !== key;\n    });\n    if (nextGroupKeys.length === foldedGroupKeys.length) {\n      nextGroupKeys.push(key);\n    }\n    setFoldedGroupKeys(nextGroupKeys);\n    onGroupTitleClick === null || onGroupTitleClick === void 0 ? void 0 : onGroupTitleClick(event);\n  });\n  var handleSelect = useEventCallback(function (item, value, event, checked) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(value, item, event, checked);\n  });\n  var getRowHeight = function getRowHeight(list, index) {\n    var item = list[index];\n    if (groupable && item[RSUITE_PICKER_GROUP_KEY] && index !== 0) {\n      return rowGroupHeight;\n    }\n    return rowHeight;\n  };\n  useEffect(function () {\n    var container = menuBodyContainerRef.current;\n    if (!container) {\n      return;\n    }\n    var activeItem = container.querySelector(\".\" + prefix('item-focus'));\n    if (!activeItem) {\n      activeItem = container.querySelector(\".\" + prefix('item-active'));\n    }\n    if (!activeItem) {\n      return;\n    }\n    var position = getPosition(activeItem, container);\n    var sTop = scrollTop(container);\n    var sHeight = getHeight(container);\n    if (sTop > position.top) {\n      scrollTop(container, Math.max(0, position.top - 20));\n    } else if (position.top > sTop + sHeight) {\n      scrollTop(container, Math.max(0, position.top - sHeight + 32));\n    }\n  }, [focusItemValue, menuBodyContainerRef, prefix]);\n  var filteredItems = groupable ? data.filter(function (item) {\n    var _item$parent;\n    // Display group title items\n    if (item[RSUITE_PICKER_GROUP_KEY]) return true;\n\n    // Display items under the unfolded group\n    var groupValue = get(item, groupBy, '') || (\n    // FIXME-Doma\n    // Usage of `item.parent` is strongly discouraged\n    // It's only here for legacy support\n    // Remove once `item.parent` is completely removed across related components\n    (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent[KEY_GROUP_TITLE]);\n    return !foldedGroupKeys.includes(groupValue);\n  }) : data;\n  var rowCount = filteredItems.length;\n  var renderItem = function renderItem(_ref) {\n    var _ref$index = _ref.index,\n      index = _ref$index === void 0 ? 0 : _ref$index,\n      style = _ref.style,\n      data = _ref.data,\n      itemData = _ref.item;\n    var item = itemData || data[index];\n    var value = item[valueKey];\n    var itemLabel = item[labelKey];\n    var label = query ? /*#__PURE__*/React.createElement(Highlight, {\n      query: query,\n      as: \"span\"\n    }, itemLabel) : itemLabel;\n    if (isUndefined(label) && !item[RSUITE_PICKER_GROUP_KEY]) {\n      throw Error(\"labelKey \\\"\" + labelKey + \"\\\" is not defined in \\\"data\\\" : \" + index);\n    }\n\n    // Use `value` in keys when If `value` is string or number\n    var itemKey = isString(value) || isNumber(value) ? value : index;\n\n    //  Render <ListboxGroup> component when `groupBy` is defined\n    if (groupable && item[RSUITE_PICKER_GROUP_KEY]) {\n      var groupValue = item[KEY_GROUP_TITLE];\n      return /*#__PURE__*/React.createElement(ListItemGroup, {\n        style: style,\n        classPrefix: 'picker-menu-group',\n        className: classNames({\n          folded: foldedGroupKeys.some(function (key) {\n            return key === groupValue;\n          })\n        }),\n        key: \"group-\" + groupValue,\n        onClick: handleGroupTitleClick.bind(null, groupValue)\n      }, renderMenuGroup ? renderMenuGroup(groupValue, item) : groupValue);\n    } else if (isUndefined(value) && !isUndefined(item[RSUITE_PICKER_GROUP_KEY])) {\n      throw Error(\"valueKey \\\"\" + valueKey + \"\\\" is not defined in \\\"data\\\" : \" + index + \" \");\n    }\n    var disabled = disabledItemValues === null || disabledItemValues === void 0 ? void 0 : disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, value);\n    });\n    var active = activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues.some(function (v) {\n      return shallowEqual(v, value);\n    });\n    var focus = !isUndefined(focusItemValue) && shallowEqual(focusItemValue, value);\n    return /*#__PURE__*/React.createElement(ListItem, _extends({\n      \"aria-posinset\": index + 1,\n      \"aria-setsize\": rowCount,\n      style: style,\n      key: itemKey,\n      disabled: disabled,\n      active: active,\n      focus: focus,\n      value: value,\n      classPrefix: listItemClassPrefix,\n      onSelect: handleSelect.bind(null, item)\n    }, pickBy(listItemProps, function (v) {\n      return v !== undefined;\n    })), renderMenuItem ? renderMenuItem(label, item) : label);\n  };\n  useMount(function () {\n    var _listRef$current, _listRef$current$scro;\n    var itemIndex = findIndex(filteredItems, function (item) {\n      return item[valueKey] === (activeItemValues === null || activeItemValues === void 0 ? void 0 : activeItemValues[0]);\n    });\n    (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : (_listRef$current$scro = _listRef$current.scrollToItem) === null || _listRef$current$scro === void 0 ? void 0 : _listRef$current$scro.call(_listRef$current, itemIndex);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"listbox\",\n    id: id + \"-\" + popupType,\n    \"aria-labelledby\": labelId,\n    \"aria-multiselectable\": multiple\n  }, rest, {\n    className: classes,\n    ref: mergeRefs(menuBodyContainerRef, ref),\n    style: _extends({}, style, {\n      maxHeight: maxHeight\n    })\n  }), virtualized ? /*#__PURE__*/React.createElement(AutoSizer, {\n    defaultHeight: maxHeight,\n    style: {\n      width: 'auto',\n      height: 'auto'\n    }\n  }, function (_ref2) {\n    var height = _ref2.height;\n    return /*#__PURE__*/React.createElement(List, _extends({\n      as: VariableSizeList,\n      ref: mergeRefs(listRef, virtualizedListRef),\n      height: height || maxHeight,\n      itemCount: rowCount,\n      itemData: filteredItems,\n      itemSize: getRowHeight.bind(_this, filteredItems)\n    }, listProps), renderItem);\n  }) : filteredItems.map(function (item, index) {\n    return renderItem({\n      index: index,\n      item: item\n    });\n  }));\n});\nListbox.displayName = 'Listbox';\nexport default Listbox;","map":null,"metadata":{},"sourceType":"module"}