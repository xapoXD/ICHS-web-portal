{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"classPrefix\", \"as\", \"role\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport Stack from \"../Stack/index.js\";\n/**\n * The ButtonToolbar component is used to group a series of buttons together in a single line.\n * @see https://rsuitejs.com/components/button/#button-toolbar\n */\nvar ButtonToolbar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'btn-toolbar' : _props$classPrefix,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? Stack : _props$as,\n    _props$role = props.role,\n    role = _props$role === void 0 ? 'toolbar' : _props$role,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var stackProps = Component === Stack ? {\n    wrap: true,\n    spacing: 10,\n    childrenRenderMode: 'clone'\n  } : null;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix());\n  return /*#__PURE__*/React.createElement(Component, _extends({}, stackProps, rest, {\n    role: role,\n    ref: ref,\n    className: classes\n  }));\n});\nButtonToolbar.displayName = 'ButtonToolbar';\nButtonToolbar.propTypes = {\n  as: PropTypes.elementType,\n  classPrefix: PropTypes.string\n};\nexport default ButtonToolbar;","map":null,"metadata":{},"sourceType":"module"}