{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pickerProps\", \"speaker\", \"placement\", \"trigger\", \"id\", \"multiple\", \"popupType\"];\nimport React from 'react';\nimport pick from 'lodash/pick';\nimport OverlayTrigger from \"../Overlay/OverlayTrigger.js\";\nimport { useCustom, useUniqueId } from \"../hooks/index.js\";\nimport { placementPolyfill } from \"../utils/index.js\";\nexport var omitTriggerPropKeys = ['onEntered', 'onExited', 'onEnter', 'onEntering', 'onExit', 'onExiting', 'open', 'onOpen', 'defaultOpen', 'onClose', 'container', 'containerPadding', 'preventOverflow'];\nexport var pickTriggerPropKeys = [].concat(omitTriggerPropKeys, ['disabled', 'plaintext', 'readOnly', 'loading', 'label']);\nexport var ComboboxContextContext = /*#__PURE__*/React.createContext({\n  popupType: 'listbox'\n});\nvar PickerToggleTrigger = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var pickerProps = props.pickerProps,\n    speaker = props.speaker,\n    placement = props.placement,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? 'click' : _props$trigger,\n    id = props.id,\n    multiple = props.multiple,\n    _props$popupType = props.popupType,\n    popupType = _props$popupType === void 0 ? 'listbox' : _props$popupType,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var pickerTriggerProps = pick(pickerProps, pickTriggerPropKeys);\n  var pickerId = useUniqueId('rs-', id);\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  return /*#__PURE__*/React.createElement(ComboboxContextContext.Provider, {\n    value: {\n      id: pickerId,\n      hasLabel: typeof pickerTriggerProps.label !== 'undefined',\n      multiple: multiple,\n      popupType: popupType\n    }\n  }, /*#__PURE__*/React.createElement(OverlayTrigger, _extends({}, pickerTriggerProps, rest, {\n    disabled: pickerTriggerProps.disabled || pickerTriggerProps.loading,\n    ref: ref,\n    trigger: trigger,\n    placement: placementPolyfill(placement, rtl),\n    speaker: speaker\n  })));\n});\nPickerToggleTrigger.displayName = 'PickerToggleTrigger';\nexport default PickerToggleTrigger;","map":null,"metadata":{},"sourceType":"module"}