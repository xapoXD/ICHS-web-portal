{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"closeButton\", \"children\", \"onClose\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { createChainedFunction } from \"../internals/utils/index.js\";\nimport { ModalContext } from \"./ModalContext.js\";\nimport CloseButton from \"../internals/CloseButton/index.js\";\nimport Close from '@rsuite/icons/Close';\nimport IconButton from \"../IconButton/index.js\";\nimport DrawerContext from \"../Drawer/DrawerContext.js\";\nvar ModalHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useContext, _useContext2;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'modal-header' : _props$classPrefix,\n    className = props.className,\n    _props$closeButton = props.closeButton,\n    closeButton = _props$closeButton === void 0 ? true : _props$closeButton,\n    children = props.children,\n    onClose = props.onClose,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix());\n  var onModalClose = (_useContext = useContext(ModalContext)) === null || _useContext === void 0 ? void 0 : _useContext.onModalClose;\n  var isDrawer = (_useContext2 = useContext(DrawerContext)) === null || _useContext2 === void 0 ? void 0 : _useContext2.isDrawer;\n  var buttonElement = isDrawer ? /*#__PURE__*/React.createElement(IconButton, {\n    icon: /*#__PURE__*/React.createElement(Close, null),\n    appearance: \"subtle\",\n    size: \"sm\",\n    className: prefix('close'),\n    onClick: createChainedFunction(onClose, onModalClose)\n  }) : /*#__PURE__*/React.createElement(CloseButton, {\n    className: prefix('close'),\n    onClick: createChainedFunction(onClose, onModalClose)\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), closeButton && buttonElement, children);\n});\nModalHeader.displayName = 'ModalHeader';\nModalHeader.propTypes = {\n  as: PropTypes.elementType,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n  children: PropTypes.node\n};\nexport default ModalHeader;","map":null,"metadata":{},"sourceType":"module"}