{"ast":null,"code":"'use client';\n\nimport { useCallback, useContext } from 'react';\nimport classNames from 'classnames';\nimport { prefix as addPrefix } from './prefix';\nimport TableContext from '../TableContext';\n\n/**\n * Add a prefix to all classNames.\n *\n * @param str prefix of className\n * @returns { withClassPrefix, merge, prefix }\n *  - withClassPrefix: A function of combining className and adding a prefix to each className.\n *    At the same time, the default `classPrefix` is the first className.\n *  - merge: A merge className function.\n *  - prefix: Add a prefix to className\n *  - rootPrefix\n */\nfunction useClassNames(str, controlled) {\n  var _ref = useContext(TableContext) || {},\n    _ref$classPrefix = _ref.classPrefix,\n    contextClassPrefix = _ref$classPrefix === void 0 ? 'rs' : _ref$classPrefix;\n  var componentName = controlled ? str : addPrefix(contextClassPrefix, str);\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * prefix('red', { active: true }) => 'rs-button-red rs-button-active'\n   */\n\n  var prefix = useCallback(function () {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(componentName, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  }, [componentName]);\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * withClassPrefix('red', { active: true }) => 'rs-button rs-button-red rs-button-active'\n   */\n\n  var withClassPrefix = useCallback(function () {\n    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n      classes[_key] = arguments[_key];\n    }\n    var mergeClasses = prefix(classes);\n    return mergeClasses ? componentName + \" \" + mergeClasses : componentName;\n  }, [componentName, prefix]);\n  /**\n   * @example\n   * rootPrefix('btn') => 'rs-btn'\n   * rootPrefix('btn', { active: true }) => 'rs-btn rs-active'\n   */\n\n  var rootPrefix = function rootPrefix() {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(contextClassPrefix, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  };\n  return {\n    withClassPrefix: withClassPrefix,\n    merge: classNames,\n    prefix: prefix,\n    rootPrefix: rootPrefix\n  };\n}\nexport default useClassNames;","map":null,"metadata":{},"sourceType":"module"}