{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"placement\", \"callback\"],\n  _excluded2 = [\"className\"],\n  _excluded3 = [\"container\"];\nimport React, { useState, useImperativeHandle, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport kebabCase from 'lodash/kebabCase';\nimport Transition from \"../Animation/Transition.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { guid, createChainedFunction, render } from \"../internals/utils/index.js\";\nimport ToastContext from \"./ToastContext.js\";\nexport var toastPlacements = ['topCenter', 'bottomCenter', 'topStart', 'topEnd', 'bottomStart', 'bottomEnd'];\nvar useMessages = function useMessages() {\n  var _useState = useState([]),\n    messages = _useState[0],\n    setMessages = _useState[1];\n  var getKey = useCallback(function (key) {\n    if (typeof key === 'undefined' && messages.length) {\n      return messages[messages.length - 1].key;\n    }\n    return key;\n  }, [messages]);\n  var push = useCallback(function (message, options) {\n    var key = guid();\n    setMessages(function (prevMessages) {\n      return [].concat(prevMessages, [_extends({\n        key: key,\n        visible: true,\n        node: message\n      }, options)]);\n    });\n    return key;\n  }, []);\n  var clear = useCallback(function () {\n    // Set all existing messages to be invisible.\n    setMessages(messages.map(function (msg) {\n      return _extends({}, msg, {\n        visible: false\n      });\n    }));\n\n    // Remove all invisible messages after 400ms.\n    // The delay removal here is to preserve the animation.\n    setTimeout(function () {\n      setMessages([]);\n    }, 400);\n  }, [messages]);\n  var remove = useCallback(function (key) {\n    // Set the message of the specified key to invisible.\n    setMessages(messages.map(function (n) {\n      if (n.key === getKey(key)) {\n        n.visible = false;\n      }\n      return n;\n    }));\n\n    // Remove invisible messages after 400ms.\n    setTimeout(function () {\n      setMessages(messages.filter(function (msg) {\n        return msg.visible;\n      }));\n    }, 400);\n  }, [messages, getKey]);\n  return {\n    messages: messages,\n    push: push,\n    clear: clear,\n    remove: remove\n  };\n};\nvar ToastContainer = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var rootRef = useRef();\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'toast-container' : _props$classPrefix,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'topCenter' : _props$placement,\n    callback = props.callback,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    rootPrefix = _useClassNames.rootPrefix;\n  var classes = merge(className, withClassPrefix(kebabCase(placement)));\n  var _useMessages = useMessages(),\n    push = _useMessages.push,\n    clear = _useMessages.clear,\n    remove = _useMessages.remove,\n    messages = _useMessages.messages;\n  useImperativeHandle(ref, function () {\n    return {\n      root: rootRef.current,\n      push: push,\n      clear: clear,\n      remove: remove\n    };\n  });\n  var elements = messages.map(function (item) {\n    return /*#__PURE__*/React.createElement(Transition, {\n      key: item.key,\n      in: item.visible,\n      exitedClassName: rootPrefix('toast-fade-exited'),\n      exitingClassName: rootPrefix('toast-fade-exiting'),\n      enteringClassName: rootPrefix('toast-fade-entering'),\n      enteredClassName: rootPrefix('toast-fade-entered'),\n      timeout: 300\n    }, function (transitionProps, ref) {\n      var _item$node, _item$node$props, _item$node2, _item$node2$props;\n      var transitionClassName = transitionProps.className,\n        rest = _objectWithoutPropertiesLoose(transitionProps, _excluded2);\n      return /*#__PURE__*/React.cloneElement(item.node, _extends({}, rest, {\n        ref: ref,\n        duration: item.duration,\n        // Remove the message after the specified time.\n        onClose: createChainedFunction((_item$node = item.node) === null || _item$node === void 0 ? void 0 : (_item$node$props = _item$node.props) === null || _item$node$props === void 0 ? void 0 : _item$node$props.onClose, function () {\n          return remove(item.key);\n        }),\n        className: merge(rootPrefix('toast'), (_item$node2 = item.node) === null || _item$node2 === void 0 ? void 0 : (_item$node2$props = _item$node2.props) === null || _item$node2$props === void 0 ? void 0 : _item$node2$props.className, transitionClassName)\n      }));\n    });\n  });\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, {\n    value: {\n      usedToaster: true\n    }\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: function ref(selfRef) {\n      rootRef.current = selfRef;\n      callback === null || callback === void 0 ? void 0 : callback(selfRef);\n    },\n    className: classes\n  }), elements));\n});\nToastContainer.getInstance = function (props) {\n  var container = props.container,\n    rest = _objectWithoutPropertiesLoose(props, _excluded3);\n  var containerRef = /*#__PURE__*/React.createRef();\n  var containerElement = (typeof container === 'function' ? container() : container) || document.body;\n  return new Promise(function (resolve) {\n    var renderCallback = function renderCallback() {\n      resolve([containerRef, unmount]);\n    };\n    var _render = render( /*#__PURE__*/React.createElement(ToastContainer, _extends({}, rest, {\n        ref: containerRef,\n        callback: renderCallback\n      })), containerElement),\n      unmount = _render.unmount;\n  });\n};\nToastContainer.displayName = 'ToastContainer';\nToastContainer.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  placement: PropTypes.elementType,\n  container: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  callback: PropTypes.func\n};\nexport default ToastContainer;","map":null,"metadata":{},"sourceType":"module"}