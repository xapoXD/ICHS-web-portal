{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"activeItemValue\", \"classPrefix\", \"className\", \"childrenKey\", \"disabledItemValues\", \"columnWidth\", \"columnHeight\", \"valueKey\", \"data\", \"cascadePaths\", \"loadingItemsSet\", \"labelKey\", \"style\", \"renderColumn\", \"renderTreeNode\", \"onSelect\"];\nimport React, { useEffect, useRef } from 'react';\nimport SpinnerIcon from '@rsuite/icons/legacy/Spinner';\nimport isUndefined from 'lodash/isUndefined';\nimport isNil from 'lodash/isNil';\nimport { shallowEqual, mergeRefs } from \"../internals/utils/index.js\";\nimport { useClassNames, useCustom, useEventCallback } from \"../internals/hooks/index.js\";\nimport { ListItem, useCombobox } from \"../internals/Picker/index.js\";\nimport AngleLeftIcon from '@rsuite/icons/legacy/AngleLeft';\nimport AngleRightIcon from '@rsuite/icons/legacy/AngleRight';\nimport getPosition from 'dom-lib/getPosition';\nimport scrollTop from 'dom-lib/scrollTop';\nvar emptyArray = [];\nvar TreeView = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    activeItemValue = props.activeItemValue,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'tree' : _props$classPrefix,\n    className = props.className,\n    _props$childrenKey = props.childrenKey,\n    childrenKey = _props$childrenKey === void 0 ? 'children' : _props$childrenKey,\n    _props$disabledItemVa = props.disabledItemValues,\n    disabledItemValues = _props$disabledItemVa === void 0 ? emptyArray : _props$disabledItemVa,\n    _props$columnWidth = props.columnWidth,\n    columnWidth = _props$columnWidth === void 0 ? 140 : _props$columnWidth,\n    _props$columnHeight = props.columnHeight,\n    columnHeight = _props$columnHeight === void 0 ? 200 : _props$columnHeight,\n    _props$valueKey = props.valueKey,\n    valueKey = _props$valueKey === void 0 ? 'value' : _props$valueKey,\n    _props$data = props.data,\n    data = _props$data === void 0 ? emptyArray : _props$data,\n    _props$cascadePaths = props.cascadePaths,\n    cascadePaths = _props$cascadePaths === void 0 ? emptyArray : _props$cascadePaths,\n    loadingItemsSet = props.loadingItemsSet,\n    _props$labelKey = props.labelKey,\n    labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,\n    style = props.style,\n    renderColumn = props.renderColumn,\n    renderTreeNode = props.renderTreeNode,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, prefix('items'));\n  var rootRef = useRef();\n  var _useCustom = useCustom(),\n    rtl = _useCustom.rtl;\n  var _useCombobox = useCombobox(),\n    id = _useCombobox.id,\n    labelId = _useCombobox.labelId,\n    popupType = _useCombobox.popupType;\n  useEffect(function () {\n    var _rootRef$current;\n    var columns = ((_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.querySelectorAll('[data-type=\"column\"]')) || [];\n    columns.forEach(function (column) {\n      if (!column) {\n        return;\n      }\n      var activeItem = column.querySelector(\".\" + prefix('item-focus'));\n      if (!activeItem) {\n        activeItem = column.querySelector(\".\" + prefix('item-active'));\n      }\n      if (activeItem) {\n        var position = getPosition(activeItem, column);\n        // Let the active option scroll into view.\n        if (position !== null && position !== void 0 && position.top) {\n          scrollTop(column, position === null || position === void 0 ? void 0 : position.top);\n        }\n      }\n    });\n  }, [prefix]);\n  var getCascadePaths = function getCascadePaths(layer, node) {\n    var paths = [];\n    for (var i = 0; i < data.length && i < layer; i += 1) {\n      if (i < layer - 1 && cascadePaths) {\n        paths.push(cascadePaths[i]);\n      }\n    }\n    paths.push(node);\n    return paths;\n  };\n  var handleSelect = useEventCallback(function (layer, itemData, event) {\n    var isLeafNode = isNil(itemData[childrenKey]);\n    var cascadePaths = getCascadePaths(layer + 1, itemData);\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect({\n      itemData: itemData,\n      cascadePaths: cascadePaths,\n      isLeafNode: isLeafNode\n    }, event);\n  });\n  var renderCascadeNode = function renderCascadeNode(nodeProps) {\n    var _loadingItemsSet$has;\n    var itemData = nodeProps.itemData,\n      index = nodeProps.index,\n      layer = nodeProps.layer,\n      focus = nodeProps.focus,\n      size = nodeProps.size;\n    var children = itemData[childrenKey];\n    var value = itemData[valueKey];\n    var label = itemData[labelKey];\n    var disabled = disabledItemValues.some(function (disabledValue) {\n      return shallowEqual(disabledValue, value);\n    });\n    var loading = (_loadingItemsSet$has = loadingItemsSet === null || loadingItemsSet === void 0 ? void 0 : loadingItemsSet.has(itemData)) !== null && _loadingItemsSet$has !== void 0 ? _loadingItemsSet$has : false;\n\n    // Use `value` in keys when If `value` is string or number\n    var onlyKey = typeof value === 'number' || typeof value === 'string' ? value : index;\n    var Icon = loading ? SpinnerIcon : rtl ? AngleLeftIcon : AngleRightIcon;\n    return /*#__PURE__*/React.createElement(ListItem, {\n      as: 'li',\n      role: \"treeitem\",\n      \"aria-level\": layer + 1,\n      \"aria-setsize\": size,\n      \"aria-posinset\": index + 1,\n      \"aria-label\": typeof label === 'string' ? label : undefined,\n      classPrefix: \"cascade-tree-item\",\n      key: layer + \"-\" + onlyKey,\n      disabled: disabled,\n      active: !isUndefined(activeItemValue) && shallowEqual(activeItemValue, value),\n      focus: focus,\n      value: value,\n      className: children ? prefix('has-children') : undefined,\n      onSelect: function onSelect(_value, event) {\n        return handleSelect(layer, itemData, event);\n      }\n    }, renderTreeNode ? renderTreeNode(label, itemData) : label, children ? /*#__PURE__*/React.createElement(Icon, {\n      className: prefix('caret'),\n      spin: loading,\n      \"data-testid\": \"spinner\"\n    }) : null);\n  };\n  var cascadeNodes = data.map(function (children, layer) {\n    var onlyKey = layer + \"_\" + children.length;\n    var parentItem = cascadePaths[layer - 1];\n    var childNodes = /*#__PURE__*/React.createElement(React.Fragment, null, children.map(function (itemData, index) {\n      var focus = cascadePaths[layer] && shallowEqual(cascadePaths[layer][valueKey], itemData[valueKey]);\n      return renderCascadeNode({\n        itemData: itemData,\n        index: index,\n        layer: layer,\n        focus: focus,\n        size: children.length\n      });\n    }));\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      role: \"group\",\n      \"data-layer\": layer,\n      \"data-type\": 'column',\n      key: onlyKey,\n      className: prefix('column'),\n      style: {\n        height: columnHeight,\n        width: columnWidth\n      }\n    }, renderColumn ? renderColumn(childNodes, {\n      items: children,\n      parentItem: parentItem,\n      layer: layer\n    }) : childNodes);\n  });\n  var styles = _extends({}, style, {\n    width: data.length * columnWidth\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"tree\",\n    id: id ? id + \"-\" + popupType : undefined,\n    \"aria-labelledby\": labelId\n  }, rest, {\n    ref: mergeRefs(rootRef, ref),\n    className: classes,\n    style: styles\n  }), cascadeNodes);\n});\nTreeView.displayName = 'TreeView';\nexport default TreeView;","map":null,"metadata":{},"sourceType":"module"}