{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport canUseDOM from 'dom-lib/canUseDOM';\nimport pick from 'lodash/pick';\nexport var mediaQuerySizeMap = {\n  xs: '(max-width: 575px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)',\n  xxl: '(min-width: 1400px)'\n};\n\n/**\n * The type of the query parameter.\n */\n\nvar matchMedia = function matchMedia(query) {\n  if (canUseDOM) {\n    return window.matchMedia(query);\n  }\n  return {\n    matches: false,\n    media: query\n  };\n};\n\n/**\n * React hook that tracks state of a CSS media query.\n * @see https://rsuitejs.com/components/use-media-query\n */\nexport function useMediaQueryOld(query) {\n  var queries = Array.isArray(query) ? query : [query];\n  var mediaQueries = queries.map(function (query) {\n    return mediaQuerySizeMap[query] || query;\n  });\n  var _useState = useState(function () {\n      return mediaQueries.map(function (query) {\n        return pick(matchMedia(query), ['matches', 'media']);\n      });\n    }),\n    mediaQueryArray = _useState[0],\n    setMediaQueryArray = _useState[1];\n  function handleChange(event) {\n    setMediaQueryArray(function (prevMediaQueryArray) {\n      return prevMediaQueryArray.map(function (item) {\n        return item.media === event.media ? _extends({}, item, {\n          matches: event.matches\n        }) : item;\n      });\n    });\n  }\n  useEffect(function () {\n    var mediaQueryList = mediaQueries.map(function (query) {\n      return matchMedia(query);\n    });\n    mediaQueryList.forEach(function (query) {\n      query.addEventListener('change', handleChange);\n    });\n    return function () {\n      mediaQueryList.forEach(function (query) {\n        query.removeEventListener('change', handleChange);\n      });\n    };\n  }, [mediaQueries]);\n  return mediaQueryArray.map(function (query) {\n    return query.matches;\n  });\n}\n\n/**\n * React hook that tracks state of a CSS media query\n * @version 5.48.0\n * @unstable Please note that this API is not stable and may change in the future.\n * @see https://rsuitejs.com/components/use-media-query\n */\nexport function useMediaQuery(query) {\n  var _React$useSyncExterna;\n  var queries = Array.isArray(query) ? query : [query];\n  var mediaQueries = queries.map(function (query) {\n    return mediaQuerySizeMap[query] || query;\n  });\n  var mediaQueryArray = useRef(mediaQueries.map(function (query) {\n    return matchMedia(query).matches;\n  }));\n  var subscribe = useCallback(function (callback) {\n    var list = mediaQueries.map(function (query) {\n      return matchMedia(query);\n    });\n    var handleChange = function handleChange(event) {\n      var index = list.findIndex(function (item) {\n        return item.media === event.media;\n      });\n      if (index !== -1) {\n        // The store snapshot returned by getSnapshot must be immutable. So we need to create a new array.\n        var nextMediaQueryArray = mediaQueryArray.current.slice();\n        nextMediaQueryArray[index] = event.matches;\n        mediaQueryArray.current = nextMediaQueryArray;\n      }\n      callback();\n    };\n    list.forEach(function (query) {\n      query.addEventListener('change', handleChange);\n    });\n    return function () {\n      list.forEach(function (query) {\n        query.removeEventListener('change', handleChange);\n      });\n    };\n  }, [mediaQueries]);\n  var getSnapshot = useCallback(function () {\n    return mediaQueryArray.current;\n  }, []);\n  var getServerSnapshot = useCallback(function () {\n    return mediaQueryArray.current;\n  }, []);\n  return (_React$useSyncExterna = React['useSyncExternalStore']) === null || _React$useSyncExterna === void 0 ? void 0 : _React$useSyncExterna.call(React, subscribe, getSnapshot, getServerSnapshot);\n}\nexport default typeof React['useSyncExternalStore'] === 'function' ? useMediaQuery : useMediaQueryOld;","map":null,"metadata":{},"sourceType":"module"}