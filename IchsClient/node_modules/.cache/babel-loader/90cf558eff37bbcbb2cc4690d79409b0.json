{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"classPrefix\", \"className\", \"active\", \"eventKey\", \"onSelect\", \"icon\", \"as\", \"divider\", \"panel\", \"children\", \"disabled\"];\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { deprecatePropType, oneOf } from \"../internals/propTypes/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport isNil from 'lodash/isNil';\nimport { createChainedFunction, shallowEqual } from \"../internals/utils/index.js\";\nimport { NavbarContext } from \"./Navbar.js\";\nimport DisclosureContext, { DisclosureActionTypes } from \"../internals/Disclosure/DisclosureContext.js\";\nimport { useRenderDropdownItem } from \"../Dropdown/useRenderDropdownItem.js\";\nimport NavContext from \"../Nav/NavContext.js\";\nimport classNames from 'classnames';\n/**\n * @private\n */\nvar NavbarDropdownItem = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var navbar = useContext(NavbarContext);\n  var nav = useContext(NavContext);\n  if (!navbar || !nav) {\n    throw new Error('<Navbar.Dropdown.Item> must be rendered within a <Nav> component within a <Navbar> component.');\n  }\n  var _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown-item' : _props$classPrefix,\n    className = props.className,\n    activeProp = props.active,\n    eventKey = props.eventKey,\n    onSelect = props.onSelect,\n    icon = props.icon,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'li' : _props$as,\n    divider = props.divider,\n    panel = props.panel,\n    children = props.children,\n    disabled = props.disabled,\n    restProps = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var handleSelectItem = useCallback(function (event) {\n    var _nav$onSelect;\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    (_nav$onSelect = nav.onSelect) === null || _nav$onSelect === void 0 ? void 0 : _nav$onSelect.call(nav, eventKey, event);\n  }, [onSelect, eventKey, nav]);\n  var disclosure = useContext(DisclosureContext);\n  var _ref = disclosure !== null && disclosure !== void 0 ? disclosure : [],\n    dispatchDisclosure = _ref[1];\n  var handleClickNavbarDropdownItem = useCallback(function (event) {\n    dispatchDisclosure === null || dispatchDisclosure === void 0 ? void 0 : dispatchDisclosure({\n      type: DisclosureActionTypes.Hide,\n      cascade: true\n    });\n    handleSelectItem === null || handleSelectItem === void 0 ? void 0 : handleSelectItem(event);\n  }, [dispatchDisclosure, handleSelectItem]);\n  var selected = activeProp || !isNil(eventKey) && shallowEqual(nav.activeKey, eventKey);\n  var renderDropdownItem = useRenderDropdownItem(Component);\n  if (divider) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      role: 'separator',\n      className: merge(prefix('divider'), className)\n    }, restProps));\n  }\n  if (panel) {\n    return renderDropdownItem(_extends({\n      ref: ref,\n      className: merge(prefix('panel'), className),\n      children: children\n    }, restProps));\n  }\n  var classes = merge(className, withClassPrefix({\n    'with-icon': icon,\n    disabled: disabled,\n    divider: divider,\n    panel: panel,\n    active: selected\n  }));\n  var dataAttributes = {\n    'data-event-key': eventKey\n  };\n  if (!isNil(eventKey) && typeof eventKey !== 'string') {\n    dataAttributes['data-event-key-type'] = typeof eventKey;\n  }\n  return renderDropdownItem(_extends({\n    ref: ref,\n    className: classes,\n    'aria-current': selected || undefined\n  }, dataAttributes, restProps, {\n    onClick: createChainedFunction(handleClickNavbarDropdownItem, restProps.onClick),\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, icon && /*#__PURE__*/React.cloneElement(icon, {\n      className: classNames(prefix('menu-icon'), icon.props.className)\n    }), children)\n  }));\n});\nNavbarDropdownItem.displayName = 'Navbar.Dropdown.Item';\nNavbarDropdownItem.propTypes = {\n  as: PropTypes.elementType,\n  divider: PropTypes.bool,\n  panel: PropTypes.bool,\n  trigger: PropTypes.oneOfType([PropTypes.array, oneOf(['click', 'hover'])]),\n  open: deprecatePropType(PropTypes.bool),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  pullLeft: deprecatePropType(PropTypes.bool),\n  submenu: PropTypes.element,\n  onSelect: PropTypes.func,\n  onClick: PropTypes.func,\n  icon: PropTypes.node,\n  eventKey: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  tabIndex: PropTypes.number\n};\nexport default NavbarDropdownItem;","map":null,"metadata":{},"sourceType":"module"}