{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useRef, useImperativeHandle, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { partitionHTMLProps, isIE, guid } from \"../internals/utils/index.js\";\nvar sizerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'scroll',\n  whiteSpace: 'pre'\n};\nvar copyStyles = function copyStyles(styles, node) {\n  node.style.fontSize = styles.fontSize;\n  node.style.fontFamily = styles.fontFamily;\n  node.style.fontWeight = styles.fontWeight;\n  node.style.fontStyle = styles.fontStyle;\n  node.style.letterSpacing = styles.letterSpacing;\n  node.style.textTransform = styles.textTransform;\n};\n/**\n * Use a dynamic input width.\n * The width is automatically adjusted according to the length of the input text characters.\n * @param props\n * @param sizerRef\n * @param placeholderRef\n */\nvar useInputWidth = function useInputWidth(props, sizerRef, placeholderRef) {\n  var _props$minWidth = props.minWidth,\n    minWidth = _props$minWidth === void 0 ? 1 : _props$minWidth,\n    placeholder = props.placeholder,\n    value = props.value,\n    onAutosize = props.onAutosize;\n  var _useState = useState(minWidth),\n    inputWidth = _useState[0],\n    setInputWidth = _useState[1];\n  useEffect(function () {\n    if (!sizerRef.current || typeof sizerRef.current.scrollWidth === 'undefined') {\n      return;\n    }\n    var width;\n    if (placeholder && !value && placeholderRef.current) {\n      width = Math.max(sizerRef.current.scrollWidth, placeholderRef.current.scrollWidth) + 10;\n    } else {\n      width = sizerRef.current.scrollWidth + 10;\n    }\n    if (width < minWidth) {\n      width = minWidth;\n    }\n    if (width !== inputWidth) {\n      setInputWidth(width);\n      onAutosize === null || onAutosize === void 0 ? void 0 : onAutosize(width);\n    }\n  }, [minWidth, placeholder, inputWidth, value, placeholderRef, sizerRef, onAutosize]);\n  return inputWidth;\n};\nvar InputAutosize = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var uniqueId = useMemo(function () {\n    return guid();\n  }, []);\n  var defaultValue = props.defaultValue,\n    value = props.value,\n    style = props.style,\n    className = props.className,\n    placeholder = props.placeholder,\n    inputClassName = props.inputClassName,\n    inputStyle = props.inputStyle,\n    _props$inputId = props.inputId,\n    inputId = _props$inputId === void 0 ? uniqueId : _props$inputId,\n    tabIndex = props.tabIndex;\n  var rootRef = useRef(null);\n  var inputRef = useRef(null);\n  var sizerRef = useRef(null);\n  var placeholderRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      root: rootRef.current,\n      input: inputRef.current\n    };\n  });\n  var sizerValue = [defaultValue, value, ''].reduce(function (previousValue, currentValue) {\n    if (previousValue !== null && previousValue !== undefined) {\n      return previousValue;\n    }\n    return currentValue;\n  });\n  var inputWidth = useInputWidth(props, sizerRef, placeholderRef);\n  var wrapperStyle = _extends({\n    display: 'inline-block'\n  }, style);\n  var nextInputStyle = _extends({\n    boxSizing: 'content-box',\n    width: inputWidth + \"px\"\n  }, inputStyle);\n  useEffect(function () {\n    if (!window.getComputedStyle) {\n      return;\n    }\n    var input = inputRef.current;\n    var inputStyles = input && window.getComputedStyle(input);\n    if (!inputStyles) {\n      return;\n    }\n    if (sizerRef.current) {\n      copyStyles(inputStyles, sizerRef.current);\n    }\n    if (placeholderRef.current) {\n      copyStyles(inputStyles, placeholderRef.current);\n    }\n  }, []);\n  var _partitionHTMLProps = partitionHTMLProps(props),\n    htmlInputProps = _partitionHTMLProps[0];\n  htmlInputProps.className = inputClassName;\n  htmlInputProps.style = nextInputStyle;\n  htmlInputProps.tabIndex = tabIndex;\n  if (isIE()) {\n    // On Internet Explorer, an `x` symbol will appear in the input box.\n    // By setting an id, matching the style, hiding the `x` symbol by the style.\n    htmlInputProps.id = inputId;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: rootRef,\n    className: className,\n    style: wrapperStyle\n  }, isIE() ? /*#__PURE__*/React.createElement(\"style\", {\n    dangerouslySetInnerHTML: {\n      __html: \"input#\" + inputId + \"::-ms-clear {display: none;}\"\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, {\n    ref: inputRef,\n    type: \"text\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: sizerRef,\n    style: sizerStyle\n  }, sizerValue), placeholder ? /*#__PURE__*/React.createElement(\"div\", {\n    ref: placeholderRef,\n    style: sizerStyle\n  }, placeholder) : null);\n});\nInputAutosize.displayName = 'InputAutosize';\nInputAutosize.propTypes = {\n  className: PropTypes.string,\n  defaultValue: PropTypes.any,\n  inputId: PropTypes.string,\n  inputClassName: PropTypes.string,\n  inputStyle: PropTypes.object,\n  minWidth: PropTypes.number,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  value: PropTypes.any,\n  onAutosize: PropTypes.func\n};\nexport default InputAutosize;","map":null,"metadata":{},"sourceType":"module"}