{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"header\", \"className\", \"children\", \"classPrefix\", \"headerHeight\", \"verticalAlign\", \"align\", \"width\", \"groupHeaderHeight\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, convertToFlex } from './utils';\nvar ColumnGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var header = props.header,\n    className = props.className,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'column-group' : _props$classPrefix,\n    _props$headerHeight = props.headerHeight,\n    headerHeight = _props$headerHeight === void 0 ? 80 : _props$headerHeight,\n    verticalAlign = props.verticalAlign,\n    align = props.align,\n    width = props.width,\n    groupHeightProp = props.groupHeaderHeight,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var groupHeight = typeof groupHeightProp !== 'undefined' ? groupHeightProp : headerHeight / 2;\n  var restHeight = typeof groupHeightProp !== 'undefined' ? headerHeight - groupHeightProp : headerHeight / 2;\n  var styles = {\n    height: groupHeight,\n    width: width\n  };\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix());\n  var contentStyles = _extends({}, convertToFlex({\n    verticalAlign: verticalAlign,\n    align: align\n  }), styles);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: classes\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('header'),\n    style: styles\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('header-content'),\n    style: contentStyles\n  }, header)), children ? React.Children.map(children, function (node) {\n    return /*#__PURE__*/React.cloneElement(node, {\n      className: prefix('cell'),\n      predefinedStyle: {\n        height: restHeight,\n        top: styles.height\n      },\n      headerHeight: restHeight,\n      verticalAlign: node.props.verticalAlign || verticalAlign,\n      children: /*#__PURE__*/React.createElement(\"span\", {\n        className: prefix('cell-content')\n      }, node.props.children)\n    });\n  }) : null);\n});\nColumnGroup.displayName = 'Table.ColumnGroup';\nColumnGroup.propTypes = {\n  header: PropTypes.node,\n  classPrefix: PropTypes.string,\n  groupHeaderHeight: PropTypes.number,\n  verticalAlign: PropTypes.oneOf(['top', 'middle', 'bottom'])\n};\nexport default ColumnGroup;","map":null,"metadata":{},"sourceType":"module"}