{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\nfunction isObj(o) {\n  return o != null && (typeof o === 'object' || typeof o == 'function');\n}\nfunction isPromiseLike(v) {\n  return v instanceof Promise || isObj(v) && typeof v.then === 'function';\n}\n/**\n * Create a data validator\n * @param data\n */\nexport function createValidator(data, name, label) {\n  return (value, rules) => {\n    for (let i = 0; i < rules.length; i += 1) {\n      const {\n        onValid,\n        errorMessage,\n        params,\n        isAsync\n      } = rules[i];\n      if (isAsync) continue;\n      const checkResult = onValid(value, data, name);\n      const errorMsg = typeof errorMessage === 'function' ? errorMessage() : errorMessage;\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(errorMsg, {\n            ...params,\n            name: label || (Array.isArray(name) ? name.join('.') : name)\n          })\n        };\n      } else if (isPromiseLike(checkResult)) {\n        throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n    }\n    return null;\n  };\n}\nexport default createValidator;","map":null,"metadata":{},"sourceType":"module"}