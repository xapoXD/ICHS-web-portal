{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"alignItems\", \"classPrefix\", \"childrenRenderMode\", \"className\", \"children\", \"direction\", \"justifyContent\", \"spacing\", \"divider\", \"style\", \"wrap\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isSupportFlexGap, ReactChildren } from \"../internals/utils/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport { useClassNames, useCustom } from \"../internals/hooks/index.js\";\nimport StackItem from \"./StackItem.js\";\n/**\n * The `Stack` component is a quick layout component through Flexbox,\n * supporting vertical and horizontal stacking, custom spacing and line wrapping.\n *\n * @see https://rsuitejs.com/components/stack\n */\nvar Stack = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _itemStyles;\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$alignItems = props.alignItems,\n    alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'stack' : _props$classPrefix,\n    _props$childrenRender = props.childrenRenderMode,\n    childrenRenderMode = _props$childrenRender === void 0 ? 'wrap' : _props$childrenRender,\n    className = props.className,\n    children = props.children,\n    direction = props.direction,\n    justifyContent = props.justifyContent,\n    spacing = props.spacing,\n    divider = props.divider,\n    style = props.style,\n    wrap = props.wrap,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCustom = useCustom('Stack'),\n    rtl = _useCustom.rtl;\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix());\n  var isSupportGap = isSupportFlexGap();\n  var flexGap = Array.isArray(spacing) ? spacing : [spacing, spacing];\n  var itemStyles = (_itemStyles = {}, _itemStyles[rtl ? 'marginLeft' : 'marginRight'] = flexGap[0], _itemStyles.marginBottom = flexGap[1], _itemStyles);\n  var styles = _extends({\n    alignItems: alignItems,\n    justifyContent: justifyContent,\n    flexDirection: direction,\n    flexWrap: wrap ? 'wrap' : undefined,\n    gap: isSupportGap ? spacing : undefined\n  }, style);\n\n  /*\n   * toArray remove undefined, null and boolean\n   */\n  var filterChildren = React.Children.toArray(children);\n  var count = ReactChildren.count(filterChildren);\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    style: styles\n  }), ReactChildren.map(filterChildren, function (child, index) {\n    var childNode = childrenRenderMode === 'wrap' && child.type !== StackItem ? /*#__PURE__*/React.createElement(StackItem, {\n      key: index,\n      className: prefix('item'),\n      style: !isSupportGap ? itemStyles : undefined\n    }, child) : /*#__PURE__*/React.cloneElement(child, {\n      className: merge(prefix('item'), child.props.className),\n      style: !isSupportGap ? _extends({}, itemStyles, child.props.style) : child.props.style\n    });\n    return [childNode, index < count - 1 ? divider : null];\n  }));\n});\nStack.Item = StackItem;\nStack.displayName = 'Stack';\nStack.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  classPrefix: PropTypes.string,\n  direction: oneOf(['row', 'row-reverse', 'column', 'column-reverse']),\n  alignItems: oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),\n  justifyContent: oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around']),\n  spacing: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]),\n  divider: PropTypes.node,\n  wrap: PropTypes.bool\n};\nexport default Stack;","map":null,"metadata":{},"sourceType":"module"}