{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\n\n/**\n * Returns the type of the given object.\n * @param object - The object to check.\n * @returns The type of the object.\n */\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    return object.type || object.$$typeof;\n  }\n}\n\n/**\n * Checks if the given children is a React fragment.\n * @param children - The children to check.\n * @returns True if the children is a React fragment, false otherwise.\n */\nfunction isFragment(children) {\n  return React.Children.count(children) === 1 && typeOf(children) === Symbol.for('react.fragment');\n}\n\n/**\n * Flattens the given children into an array.\n * @param children - The children to flatten.\n * @returns The flattened array of children.\n */\nfunction flatChildren(children) {\n  return React.Children.toArray(React.Children.map(children, function (child) {\n    if (isFragment(child)) {\n      var _child$props;\n      return React.Children.toArray(((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.children) || []);\n    }\n    return child;\n  }));\n}\n\n/**\n * Finds the first child that satisfies the given condition.\n * @param children - The children to search.\n * @param func - The condition function.\n * @param context - The context to use for the condition function.\n * @returns The first child that satisfies the condition, or undefined if no child is found.\n */\nexport function find(children, func, context) {\n  var index = 0;\n  var result;\n  React.Children.forEach(flatChildren(children), function (child) {\n    if (result) {\n      return;\n    }\n    index += 1;\n    if (func.call(context, child, index)) {\n      result = child;\n    }\n  });\n  return result;\n}\n\n/**\n * Maps over the children and applies the given function to each child.\n * @param children - The children to map over.\n * @param func - The function to apply to each child.\n * @param context - The context to use for the function.\n * @returns An array of the results of applying the function to each child.\n */\nexport function map(children, func, context) {\n  var index = 0;\n  return React.Children.map(flatChildren(children), function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return child;\n    }\n    var handle = func.call(context, child, index);\n    index += 1;\n    return handle;\n  });\n}\n\n/**\n * Maps over the children and clones each child element with the provided props.\n * @param children - The children to clone and map over.\n * @param func - The function to apply to each child element.\n * @param context - The context to use for the function.\n * @returns An array of the cloned and modified child elements.\n */\nexport function mapCloneElement(children, func, context) {\n  return map(children, function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, _extends({\n      key: index\n    }, func(child, index)));\n  }, context);\n}\n\n/**\n * Returns the number of children.\n * @param children - The children to count.\n * @returns The number of children.\n */\nexport function count(children) {\n  return React.Children.count(flatChildren(children));\n}\n\n/**\n * Checks if any child satisfies the given condition.\n * @param children - The children to check.\n * @param func - The condition function.\n * @param context - The context to use for the condition function.\n * @returns True if any child satisfies the condition, false otherwise.\n */\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n  React.Children.forEach(flatChildren(children), function (child) {\n    if (result) {\n      return;\n    }\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    /* eslint-disable */\n    if (func.call(context, child, index += 1)) {\n      result = true;\n    }\n  });\n  return result;\n}\n\n/**\n * Utility functions for working with React children.\n */\nexport var ReactChildren = {\n  /**\n   * Maps over the children and clones each child element with the provided props.\n   */\n  mapCloneElement: mapCloneElement,\n  /**\n   * Returns the number of children.\n   */\n  count: count,\n  /**\n   * Checks if any child satisfies the given condition.\n   */\n  some: some,\n  /**\n   * Maps over the children and applies the given function to each child.\n   */\n  map: map,\n  /**\n   * Finds the first child that satisfies the given condition.\n   */\n  find: find\n};\nexport default ReactChildren;","map":null,"metadata":{},"sourceType":"module"}