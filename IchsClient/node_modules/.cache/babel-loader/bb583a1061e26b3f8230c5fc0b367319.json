{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"classPrefix\", \"className\", \"disabled\", \"inside\", \"size\", \"children\"];\nimport React, { useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport InputGroupAddon from \"./InputGroupAddon.js\";\nimport InputGroupButton from \"./InputGroupButton.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nexport var InputGroupContext = /*#__PURE__*/React.createContext(null);\n/**\n * The `InputGroup` component is used to specify an input field with an add-on.\n * @see https://rsuitejs.com/components/input/#input-group\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'input-group' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    inside = props.inside,\n    size = props.size,\n    children = props.children,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useState = useState(false),\n    focus = _useState[0],\n    setFocus = _useState[1];\n  var handleFocus = useCallback(function () {\n    setFocus(true);\n  }, []);\n  var handleBlur = useCallback(function () {\n    setFocus(false);\n  }, []);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge;\n  var classes = merge(className, withClassPrefix(size, {\n    inside: inside,\n    focus: focus,\n    disabled: disabled\n  }));\n  var renderChildren = useCallback(function () {\n    return React.Children.map(children, function (item) {\n      if ( /*#__PURE__*/React.isValidElement(item)) {\n        if ( /*#__PURE__*/React.isValidElement(item)) {\n          // Fix: Add type assertion to pass the disabled prop to the child element\n          return disabled ? /*#__PURE__*/React.cloneElement(item, {\n            disabled: disabled\n          }) : item;\n        }\n      }\n      return item;\n    });\n  }, [children, disabled]);\n  var contextValue = useMemo(function () {\n    return {\n      onFocus: handleFocus,\n      onBlur: handleBlur\n    };\n  }, [handleFocus, handleBlur]);\n  return /*#__PURE__*/React.createElement(InputGroupContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), renderChildren()));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  inside: PropTypes.bool,\n  size: oneOf(['lg', 'md', 'sm', 'xs'])\n};\nInputGroup.Addon = InputGroupAddon;\nInputGroup.Button = InputGroupButton;\nexport default InputGroup;","map":null,"metadata":{},"sourceType":"module"}