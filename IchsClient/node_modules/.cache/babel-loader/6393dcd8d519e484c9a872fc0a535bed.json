{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"className\", \"classPrefix\", \"limitStartYear\", \"limitEndYear\", \"show\", \"height\", \"width\", \"disabledMonth\"];\nimport React, { useCallback, useMemo } from 'react';\nimport { getDaysInMonth, getMonth, getYear } from \"../internals/utils/date/index.js\";\nimport { AutoSizer, FixedSizeList } from \"../internals/Windowing/index.js\";\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport MonthDropdownItem from \"./MonthDropdownItem.js\";\nimport { useCalendarContext } from \"./CalendarContext.js\";\nvar monthMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nexport function isEveryDateInMonth(year, month, predicate) {\n  var days = getDaysInMonth(new Date(year, month));\n  for (var i = 1; i <= days; i++) {\n    if (!predicate(new Date(year, month, i))) {\n      return false;\n    }\n  }\n  return true;\n}\nvar MonthDropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-month-dropdown' : _props$classPrefix,\n    limitStartYear = props.limitStartYear,\n    _props$limitEndYear = props.limitEndYear,\n    limitEndYear = _props$limitEndYear === void 0 ? 5 : _props$limitEndYear,\n    show = props.show,\n    _props$height = props.height,\n    defaultHeight = _props$height === void 0 ? 221 : _props$height,\n    _props$width = props.width,\n    defaultWidth = _props$width === void 0 ? 256 : _props$width,\n    disabledMonth = props.disabledMonth,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useCalendarContext = useCalendarContext(),\n    _useCalendarContext$d = _useCalendarContext.date,\n    date = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,\n    targetId = _useCalendarContext.targetId;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var thisYear = getYear(new Date());\n  var startYear = limitStartYear ? thisYear - limitStartYear + 1 : 1900;\n  var rowCount = useMemo(function () {\n    var endYear = thisYear + limitEndYear;\n    return endYear - startYear;\n  }, [limitEndYear, startYear, thisYear]);\n  var isMonthDisabled = useCallback(function (year, month) {\n    if (disabledMonth) {\n      return isEveryDateInMonth(year, month, disabledMonth);\n    }\n    return false;\n  }, [disabledMonth]);\n  var rowRenderer = useCallback(function (_ref) {\n    var index = _ref.index,\n      style = _ref.style;\n    var selectedMonth = getMonth(date);\n    var selectedYear = getYear(date);\n    var year = startYear + index;\n    var isSelectedYear = year === selectedYear;\n    var titleClassName = prefix('year', {\n      'year-active': isSelectedYear\n    });\n    var rowClassName = merge(prefix('row'), {\n      'first-row': index === 0,\n      'last-row': index === rowCount - 1\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: rowClassName,\n      role: \"row\",\n      \"aria-label\": \"\" + year,\n      style: style\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: titleClassName,\n      role: \"rowheader\"\n    }, year), /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('list')\n    }, monthMap.map(function (item, month) {\n      return /*#__PURE__*/React.createElement(MonthDropdownItem, {\n        disabled: isMonthDisabled(year, month),\n        active: isSelectedYear && month === selectedMonth,\n        key: month + \"_\" + item,\n        month: month + 1,\n        year: year\n      });\n    })));\n  }, [date, isMonthDisabled, merge, prefix, rowCount, startYear]);\n  var classes = merge(className, withClassPrefix(), {\n    show: show\n  });\n  var itemSize = 75;\n  var initialItemIndex = getYear(date) - startYear;\n  var initialScrollOffset = itemSize * initialItemIndex;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"grid\",\n    \"aria-label\": \"Select month\",\n    tabIndex: -1,\n    id: targetId ? targetId + \"-\" + classPrefix : undefined\n  }, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content')\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('scroll')\n  }, show && /*#__PURE__*/React.createElement(AutoSizer, {\n    defaultHeight: defaultHeight,\n    defaultWidth: defaultWidth\n  }, function (_ref2) {\n    var height = _ref2.height,\n      width = _ref2.width;\n    return /*#__PURE__*/React.createElement(FixedSizeList, {\n      className: prefix('row-wrapper'),\n      width: width || defaultWidth,\n      height: height || defaultHeight,\n      itemSize: itemSize,\n      itemCount: rowCount,\n      initialScrollOffset: initialScrollOffset\n    }, rowRenderer);\n  }))));\n});\nMonthDropdown.displayName = 'MonthDropdown';\nexport default MonthDropdown;","map":null,"metadata":{},"sourceType":"module"}