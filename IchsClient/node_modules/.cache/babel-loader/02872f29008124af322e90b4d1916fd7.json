{"ast":null,"code":"'use client';\n\nimport { useCallback } from 'react';\nimport isNil from 'lodash/isNil';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useEventCallback } from \"../../internals/hooks/index.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\nimport { isEveryChildChecked } from \"../utils.js\";\nfunction useTreeCheckState(props) {\n  var cascade = props.cascade,\n    flattenedNodes = props.flattenedNodes,\n    uncheckableItemValues = props.uncheckableItemValues;\n  var _useItemDataKeys = useItemDataKeys(),\n    valueKey = _useItemDataKeys.valueKey,\n    childrenKey = _useItemDataKeys.childrenKey;\n  var checkParentNode = useEventCallback(function (nodes, node, checked) {\n    var currentNode = node.refKey ? nodes[node.refKey] : null;\n    if (cascade && currentNode) {\n      if (!checked) {\n        currentNode.check = checked;\n        currentNode.checkAll = checked;\n      } else {\n        if (isEveryChildChecked(currentNode, {\n          nodes: nodes,\n          childrenKey: childrenKey\n        })) {\n          currentNode.check = true;\n          currentNode.checkAll = true;\n        } else {\n          currentNode.check = false;\n          currentNode.checkAll = false;\n        }\n      }\n      if (currentNode.parent) {\n        checkParentNode(nodes, currentNode.parent, checked);\n      }\n    }\n  });\n  var checkChildNode = useEventCallback(function (nodes, node, isChecked) {\n    var currentNode = node.refKey ? nodes[node.refKey] : null;\n    if (!currentNode) {\n      return;\n    }\n    currentNode.check = isChecked;\n    if (!currentNode[childrenKey] || !currentNode[childrenKey].length || !cascade) {\n      currentNode.checkAll = false;\n    } else {\n      currentNode.checkAll = isChecked;\n      currentNode[childrenKey].forEach(function (child) {\n        checkChildNode(nodes, child, isChecked);\n      });\n    }\n  });\n  var getCheckedValuesByParent = useCallback(function (nodes) {\n    var values = [];\n    for (var key in nodes) {\n      var currentNode = nodes[key];\n      if (!isNil(currentNode.parent) && !isNil(currentNode.parent.refKey)) {\n        var parentNode = nodes[currentNode.parent.refKey];\n        if (currentNode.check) {\n          if (!(parentNode !== null && parentNode !== void 0 && parentNode.checkAll)) {\n            values.push(currentNode[valueKey]);\n          } else if (parentNode !== null && parentNode !== void 0 && parentNode.uncheckable) {\n            values.push(currentNode[valueKey]);\n          }\n        }\n      } else if (currentNode.check) {\n        values.push(currentNode[valueKey]);\n      }\n    }\n    return values;\n  }, [valueKey]);\n  var getCheckedValues = useEventCallback(function (node, isChecked) {\n    var nodes = cloneDeep(flattenedNodes);\n    checkChildNode(nodes, node, isChecked);\n    if (node.parent) {\n      checkParentNode(nodes, node.parent, isChecked);\n    }\n    var values = getCheckedValuesByParent(nodes);\n    return values.filter(function (v) {\n      return !uncheckableItemValues.includes(v);\n    });\n  });\n  return {\n    getCheckedValues: getCheckedValues\n  };\n}\nexport default useTreeCheckState;","map":null,"metadata":{},"sourceType":"module"}