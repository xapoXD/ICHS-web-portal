{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"disabled\", \"readOnly\", \"loading\", \"plaintext\", \"children\", \"className\", \"color\", \"checkedChildren\", \"unCheckedChildren\", \"classPrefix\", \"checked\", \"defaultChecked\", \"size\", \"locale\", \"onChange\"];\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useControlled, useCustom, useUniqueId, useEventCallback } from \"../internals/hooks/index.js\";\nimport { partitionHTMLProps } from \"../internals/utils/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport Plaintext from \"../internals/Plaintext/index.js\";\nimport Loader from \"../Loader/index.js\";\n/**\n * The `Toggle` component is used to activate or deactivate an element.\n *\n * @see https://rsuitejs.com/components/toggle\n */\nvar Toggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'span' : _props$as,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    _props$loading = props.loading,\n    loading = _props$loading === void 0 ? false : _props$loading,\n    plaintext = props.plaintext,\n    children = props.children,\n    className = props.className,\n    color = props.color,\n    checkedChildren = props.checkedChildren,\n    unCheckedChildren = props.unCheckedChildren,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'toggle' : _props$classPrefix,\n    checkedProp = props.checked,\n    defaultChecked = props.defaultChecked,\n    size = props.size,\n    localeProp = props.locale,\n    onChange = props.onChange,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var inputRef = useRef(null);\n  var _useControlled = useControlled(checkedProp, defaultChecked),\n    checked = _useControlled[0],\n    setChecked = _useControlled[1];\n  var _useCustom = useCustom('Toggle', localeProp),\n    locale = _useCustom.locale;\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix(size, color, {\n    checked: checked,\n    disabled: disabled,\n    loading: loading\n  }));\n  var inner = checked ? checkedChildren : unCheckedChildren;\n  var label = checked ? locale.on : locale.off;\n  var labelId = useUniqueId('rs-label');\n  var innerId = inner ? labelId + '-inner' : undefined;\n  var labelledby = children ? labelId : innerId;\n  var _partitionHTMLProps = partitionHTMLProps(rest),\n    htmlInputProps = _partitionHTMLProps[0],\n    restProps = _partitionHTMLProps[1];\n  var handleInputChange = useEventCallback(function (e) {\n    if (disabled || readOnly || loading) {\n      return;\n    }\n    var checked = e.target.checked;\n    setChecked(checked);\n    onChange === null || onChange === void 0 ? void 0 : onChange(checked, e);\n  });\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, null, inner || label);\n  }\n  return /*#__PURE__*/React.createElement(\"label\", _extends({\n    ref: ref,\n    className: classes\n  }, restProps), /*#__PURE__*/React.createElement(\"input\", _extends({}, htmlInputProps, {\n    ref: inputRef,\n    type: \"checkbox\",\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    disabled: disabled,\n    readOnly: readOnly,\n    onChange: handleInputChange,\n    className: prefix('input'),\n    role: \"switch\",\n    \"aria-checked\": checked,\n    \"aria-disabled\": disabled,\n    \"aria-labelledby\": labelledby,\n    \"aria-label\": labelledby ? undefined : label,\n    \"aria-busy\": loading || undefined\n  })), /*#__PURE__*/React.createElement(Component, {\n    className: prefix('presentation')\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('inner'),\n    id: innerId\n  }, inner), loading && /*#__PURE__*/React.createElement(Loader, {\n    className: prefix('loader')\n  })), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('label'),\n    id: labelId\n  }, children));\n});\nToggle.displayName = 'Toggle';\nToggle.propTypes = {\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  checkedChildren: PropTypes.node,\n  unCheckedChildren: PropTypes.node,\n  loading: PropTypes.bool,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  onChange: PropTypes.func,\n  as: PropTypes.elementType,\n  size: oneOf(['sm', 'md', 'lg']),\n  locale: PropTypes.shape({\n    on: PropTypes.string,\n    off: PropTypes.string\n  })\n};\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}