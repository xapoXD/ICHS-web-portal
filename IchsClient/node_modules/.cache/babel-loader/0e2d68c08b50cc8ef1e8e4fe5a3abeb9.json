{"ast":null,"code":"'use client';\n\nimport React, { useCallback } from 'react';\nimport { isAllSiblingNodeUncheckable, getDisabledState, isNodeUncheckable } from \"../utils.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\nimport Highlight from \"../../Highlight/index.js\";\nfunction useTreeNodeProps(props) {\n  var _useItemDataKeys = useItemDataKeys(),\n    valueKey = _useItemDataKeys.valueKey,\n    labelKey = _useItemDataKeys.labelKey;\n  var uncheckableItemValues = props.uncheckableItemValues,\n    disabledItemValues = props.disabledItemValues,\n    loadingNodeValues = props.loadingNodeValues,\n    focusItemValue = props.focusItemValue,\n    flattenedNodes = props.flattenedNodes,\n    keyword = props.keyword;\n  return useCallback(function (nodeData) {\n    var visible = nodeData.visible,\n      checkState = nodeData.checkState;\n    var value = nodeData[valueKey];\n    var nodeLabel = nodeData[labelKey];\n    var allUncheckable = isAllSiblingNodeUncheckable(nodeData, flattenedNodes, uncheckableItemValues, valueKey);\n    var label = keyword ? /*#__PURE__*/React.createElement(Highlight, {\n      as: \"span\",\n      query: keyword\n    }, nodeLabel) : nodeLabel;\n    var disabled = getDisabledState(flattenedNodes, nodeData, {\n      disabledItemValues: disabledItemValues,\n      valueKey: valueKey\n    });\n    var uncheckable = isNodeUncheckable(nodeData, {\n      uncheckableItemValues: uncheckableItemValues,\n      valueKey: valueKey\n    });\n    var loading = loadingNodeValues.some(function (item) {\n      return item === nodeData[valueKey];\n    });\n    var focus = focusItemValue === value;\n    return {\n      value: value,\n      label: label,\n      visible: visible,\n      loading: loading,\n      disabled: disabled,\n      nodeData: nodeData,\n      checkState: checkState,\n      uncheckable: uncheckable,\n      allUncheckable: allUncheckable,\n      focus: focus\n    };\n  }, [valueKey, flattenedNodes, uncheckableItemValues, keyword, labelKey, disabledItemValues, loadingNodeValues, focusItemValue]);\n}\nexport default useTreeNodeProps;","map":null,"metadata":{},"sourceType":"module"}