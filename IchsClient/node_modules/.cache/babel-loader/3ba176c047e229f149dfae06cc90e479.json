{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"bodyFill\", \"bodyProps\", \"bordered\", \"children\", \"className\", \"classPrefix\", \"caretAs\", \"collapsible\", \"defaultExpanded\", \"disabled\", \"eventKey\", \"expanded\", \"header\", \"headerRole\", \"panelRole\", \"shaded\", \"scrollShadow\", \"id\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onSelect\"];\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames, useUniqueId, useEventCallback } from \"../internals/hooks/index.js\";\nimport { PanelGroupContext } from \"../PanelGroup/index.js\";\nimport PanelHeader from \"./PanelHeader.js\";\nimport PanelBody from \"./PanelBody.js\";\nimport useExpanded from \"./hooks/useExpanded.js\";\n/**\n * The `Panel` component is used to display content that can be collapsed.\n * @see https://rsuitejs.com/components/panel\n */\nvar Panel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    bodyFill = props.bodyFill,\n    bodyProps = props.bodyProps,\n    bordered = props.bordered,\n    children = props.children,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'panel' : _props$classPrefix,\n    caretAs = props.caretAs,\n    collapsibleProp = props.collapsible,\n    defaultExpanded = props.defaultExpanded,\n    disabled = props.disabled,\n    eventKey = props.eventKey,\n    expandedProp = props.expanded,\n    header = props.header,\n    headerRole = props.headerRole,\n    _props$panelRole = props.panelRole,\n    panelRole = _props$panelRole === void 0 ? 'region' : _props$panelRole,\n    shaded = props.shaded,\n    scrollShadow = props.scrollShadow,\n    idProp = props.id,\n    onEnter = props.onEnter,\n    onEntered = props.onEntered,\n    onEntering = props.onEntering,\n    onExit = props.onExit,\n    onExited = props.onExited,\n    onExiting = props.onExiting,\n    onSelect = props.onSelect,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var id = useUniqueId('rs-', idProp);\n  var bodyId = id + \"-panel\";\n  var buttonId = id + \"-btn\";\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix;\n  var _ref = useContext(PanelGroupContext) || {},\n    onGroupSelect = _ref.onGroupSelect;\n  var _useExpanded = useExpanded({\n      expanded: expandedProp,\n      defaultExpanded: defaultExpanded,\n      eventKey: eventKey,\n      collapsible: collapsibleProp\n    }),\n    expanded = _useExpanded[0],\n    setExpanded = _useExpanded[1],\n    collapsible = _useExpanded[2];\n  var handleSelect = useEventCallback(function (event) {\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKey, event);\n    onGroupSelect === null || onGroupSelect === void 0 ? void 0 : onGroupSelect(eventKey, event);\n    setExpanded(!expanded);\n  });\n  var classes = merge(className, withClassPrefix({\n    in: expanded,\n    collapsible: collapsible,\n    bordered: bordered,\n    shaded: shaded\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes,\n    id: idProp\n  }), header && /*#__PURE__*/React.createElement(PanelHeader, {\n    collapsible: collapsible,\n    expanded: expanded,\n    caretAs: caretAs,\n    role: headerRole,\n    buttonId: buttonId,\n    bodyId: bodyId,\n    disabled: disabled,\n    onClickButton: handleSelect\n  }, header), /*#__PURE__*/React.createElement(PanelBody, _extends({\n    collapsible: collapsible,\n    expanded: expanded,\n    bodyFill: bodyFill,\n    role: panelRole,\n    id: bodyId,\n    scrollShadow: scrollShadow,\n    labelId: buttonId,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited\n  }, bodyProps), children));\n});\nPanel.displayName = 'Panel';\nPanel.propTypes = {\n  collapsible: PropTypes.bool,\n  bordered: PropTypes.bool,\n  shaded: PropTypes.bool,\n  bodyFill: PropTypes.bool,\n  header: PropTypes.any,\n  defaultExpanded: PropTypes.bool,\n  expanded: PropTypes.bool,\n  eventKey: PropTypes.any,\n  panelRole: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  onSelect: PropTypes.func,\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func,\n  className: PropTypes.string\n};\nexport default Panel;","map":null,"metadata":{},"sourceType":"module"}