{"ast":null,"code":"'use client';\n\n// Headless ARIA `menubar`\nimport React, { useCallback, useRef } from 'react';\nimport isNil from 'lodash/isNil';\nimport MenuContext, { MenuActionTypes, MoveFocusTo } from \"./MenuContext.js\";\nimport { KEY_VALUES } from \"../constants/index.js\";\nimport { useCustom } from \"../hooks/index.js\";\nimport { isFocusEntering, isFocusLeaving, isFocusableElement } from \"../utils/index.js\";\nimport useMenu from \"./useMenu.js\";\n/**\n * @private\n */\nexport default function Menubar(_ref) {\n  var _items$activeItemInde3;\n  var _ref$vertical = _ref.vertical,\n    vertical = _ref$vertical === void 0 ? false : _ref$vertical,\n    children = _ref.children,\n    onActivateItem = _ref.onActivateItem;\n  var menubar = useMenu({\n    role: 'menubar'\n  });\n  var _menubar$ = menubar[0],\n    items = _menubar$.items,\n    activeItemIndex = _menubar$.activeItemIndex,\n    dispatch = menubar[1];\n  var menubarElementRef = useRef(null);\n  var onFocus = useCallback(function (event) {\n    // Focus moves inside Menubar\n    if (isFocusEntering(event) &&\n    // Skip if focus is moving to a focusable element within this menu\n    !(event.target !== event.currentTarget && isFocusableElement(event.target))) {\n      if (activeItemIndex === null) {\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.First\n        });\n      }\n    }\n  }, [activeItemIndex, dispatch]);\n  var onBlur = useCallback(function (event) {\n    // Focus moves outside of Menubar\n    if (isFocusLeaving(event)) {\n      dispatch({\n        type: MenuActionTypes.MoveFocus,\n        to: MoveFocusTo.None\n      });\n    }\n  }, [dispatch]);\n  var _useCustom = useCustom('Menubar'),\n    rtl = _useCustom.rtl;\n  var onKeyDown = useCallback(function (event) {\n    var _items$activeItemInde, _items$activeItemInde2;\n    var activeItemElement = isNil(activeItemIndex) ? null : (_items$activeItemInde = (_items$activeItemInde2 = items[activeItemIndex]) === null || _items$activeItemInde2 === void 0 ? void 0 : _items$activeItemInde2.element) !== null && _items$activeItemInde !== void 0 ? _items$activeItemInde : null;\n    switch (true) {\n      case !vertical && !rtl && event.key === KEY_VALUES.RIGHT:\n      case !vertical && rtl && event.key === KEY_VALUES.LEFT:\n      case vertical && event.key === KEY_VALUES.DOWN:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Next\n        });\n        break;\n      case !vertical && !rtl && event.key === KEY_VALUES.LEFT:\n      case !vertical && rtl && event.key === KEY_VALUES.RIGHT:\n      case vertical && event.key === KEY_VALUES.UP:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Prev\n        });\n        break;\n      case event.key === KEY_VALUES.HOME:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.First\n        });\n        break;\n      case event.key === KEY_VALUES.END:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: MenuActionTypes.MoveFocus,\n          to: MoveFocusTo.Last\n        });\n        break;\n      case !vertical && event.key === KEY_VALUES.DOWN:\n      case vertical && !rtl && event.key === KEY_VALUES.RIGHT:\n      case vertical && rtl && event.key === KEY_VALUES.LEFT:\n        if ((activeItemElement === null || activeItemElement === void 0 ? void 0 : activeItemElement.getAttribute('aria-haspopup')) === 'menu') {\n          event.preventDefault();\n          event.stopPropagation();\n          activeItemElement.click();\n        }\n        break;\n      case event.key === KEY_VALUES.ENTER:\n      case event.key === KEY_VALUES.SPACE:\n        event.preventDefault();\n        event.stopPropagation();\n        activeItemElement === null || activeItemElement === void 0 ? void 0 : activeItemElement.click();\n        break;\n    }\n  }, [rtl, items, activeItemIndex, dispatch, vertical]);\n\n  // Only used for handling click events bubbling from children\n  // Which indicates that a child menuitem is being activated\n  var onClick = useCallback(function (event) {\n    if (items.some(function (item) {\n      return item.element === event.target;\n    })) {\n      onActivateItem === null || onActivateItem === void 0 ? void 0 : onActivateItem(event);\n    }\n  }, [items, onActivateItem]);\n  return /*#__PURE__*/React.createElement(MenuContext.Provider, {\n    value: menubar\n  }, children({\n    role: 'menubar',\n    tabIndex: 0,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onClick: onClick,\n    'aria-activedescendant': isNil(activeItemIndex) ? undefined : (_items$activeItemInde3 = items[activeItemIndex]) === null || _items$activeItemInde3 === void 0 ? void 0 : _items$activeItemInde3.element.id,\n    'aria-orientation': vertical ? 'vertical' : undefined // implicitly set 'horizontal'\n  }, menubarElementRef));\n}","map":null,"metadata":{},"sourceType":"module"}