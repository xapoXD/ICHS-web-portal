{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"as\", \"name\", \"accept\", \"multiple\", \"disabled\", \"readOnly\", \"children\", \"classPrefix\", \"className\", \"draggable\", \"locale\", \"onChange\", \"onDragEnter\", \"onDragLeave\", \"onDragOver\", \"onDrop\"];\nimport React, { useCallback, useRef, useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from \"../internals/hooks/index.js\";\nimport { isIE11 } from \"../internals/utils/index.js\";\nimport Button from \"../Button/index.js\";\nvar UploadTrigger = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? Button : _props$as,\n    name = props.name,\n    accept = props.accept,\n    multiple = props.multiple,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    children = props.children,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'uploader-trigger' : _props$classPrefix,\n    className = props.className,\n    draggable = props.draggable,\n    locale = props.locale,\n    onChange = props.onChange,\n    onDragEnter = props.onDragEnter,\n    onDragLeave = props.onDragLeave,\n    onDragOver = props.onDragOver,\n    onDrop = props.onDrop,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var rootRef = useRef(null);\n  var _useState = useState(false),\n    dragOver = _useState[0],\n    setDragOver = _useState[1];\n  var inputRef = useRef(null);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var classes = merge(className, withClassPrefix({\n    disabled: disabled,\n    customize: children,\n    'drag-over': dragOver\n  }));\n  var handleClick = useCallback(function () {\n    var _inputRef$current;\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n  }, []);\n  var handleClearInput = useCallback(function () {\n    if (inputRef.current) {\n      inputRef.current.value = '';\n    }\n  }, []);\n  var handleDragEnter = useCallback(function (event) {\n    if (draggable) {\n      event.preventDefault();\n      setDragOver(true);\n    }\n    onDragEnter === null || onDragEnter === void 0 ? void 0 : onDragEnter(event);\n  }, [draggable, onDragEnter]);\n  var handleDragLeave = useCallback(function (event) {\n    if (draggable) {\n      event.preventDefault();\n      setDragOver(false);\n    }\n    onDragLeave === null || onDragLeave === void 0 ? void 0 : onDragLeave(event);\n  }, [draggable, onDragLeave]);\n  var handleDragOver = useCallback(function (event) {\n    draggable && event.preventDefault();\n    onDragOver === null || onDragOver === void 0 ? void 0 : onDragOver(event);\n  }, [draggable, onDragOver]);\n  var handleDrop = useCallback(function (event) {\n    if (draggable) {\n      event.preventDefault();\n      setDragOver(false);\n      onChange === null || onChange === void 0 ? void 0 : onChange(event);\n    }\n    onDrop === null || onDrop === void 0 ? void 0 : onDrop(event);\n  }, [draggable, onChange, onDrop]);\n  var handleChange = useCallback(function (event) {\n    if (isIE11()) {\n      var _event$target, _event$target$files;\n      /**\n       * IE11 triggers onChange event of file input when element.value is assigned\n       * https://github.com/facebook/react/issues/8793\n       */\n      if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$files = _event$target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files.length) > 0) {\n        onChange === null || onChange === void 0 ? void 0 : onChange(event);\n      }\n      return;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(event);\n  }, [onChange]);\n  useImperativeHandle(ref, function () {\n    return {\n      root: rootRef.current,\n      clearInput: handleClearInput\n    };\n  });\n  var buttonProps = _extends({}, rest, {\n    disabled: disabled,\n    className: prefix('btn')\n  });\n  if (!disabled && !readOnly) {\n    buttonProps.onClick = handleClick;\n    buttonProps.onDragEnter = handleDragEnter;\n    buttonProps.onDragLeave = handleDragLeave;\n    buttonProps.onDragOver = handleDragOver;\n    buttonProps.onDrop = handleDrop;\n  }\n  var trigger = children ? /*#__PURE__*/React.cloneElement(React.Children.only(children), buttonProps) : /*#__PURE__*/React.createElement(Component, buttonProps, locale === null || locale === void 0 ? void 0 : locale.upload);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: rootRef,\n    className: classes\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: name,\n    multiple: multiple,\n    disabled: disabled,\n    readOnly: readOnly,\n    accept: accept,\n    ref: inputRef,\n    onChange: handleChange\n  }), trigger);\n});\nUploadTrigger.displayName = 'UploadTrigger';\nUploadTrigger.propTypes = {\n  locale: PropTypes.any,\n  name: PropTypes.string,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  accept: PropTypes.string,\n  onChange: PropTypes.func,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  draggable: PropTypes.bool,\n  onDragEnter: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDrop: PropTypes.func\n};\nexport default UploadTrigger;","map":null,"metadata":{},"sourceType":"module"}