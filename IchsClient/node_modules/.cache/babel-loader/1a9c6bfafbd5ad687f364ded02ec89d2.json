{"ast":null,"code":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport isArray from 'lodash/isArray';\nimport { shouldDisplay } from \"../../internals/Picker/index.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\n/**\n * Custom hook for searching and filtering data in a tree structure.\n */\nexport default function useTreeSearch(props) {\n  var _useItemDataKeys = useItemDataKeys(),\n    labelKey = _useItemDataKeys.labelKey,\n    childrenKey = _useItemDataKeys.childrenKey;\n  var searchKeyword = props.searchKeyword,\n    data = props.data,\n    searchBy = props.searchBy,\n    callback = props.callback;\n  var filterVisibleData = useCallback(function (data, searchKeyword) {\n    var setVisible = function setVisible(nodes) {\n      return nodes.forEach(function (item) {\n        item.visible = searchBy ? searchBy(searchKeyword, item[labelKey], item) : shouldDisplay(item[labelKey], searchKeyword);\n        if (isArray(item[childrenKey])) {\n          filterVisibleData(item[childrenKey], searchKeyword);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n    setVisible(data);\n    return data;\n  }, [childrenKey, labelKey, searchBy]);\n\n  // Use search keywords to filter options.\n  var _useState = useState(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : ''),\n    keyword = _useState[0],\n    setSearchKeyword = _useState[1];\n  var _useState2 = useState(function () {\n      return filterVisibleData(data, keyword);\n    }),\n    filteredData = _useState2[0],\n    setFilteredData = _useState2[1];\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterVisibleData(data, searchKeyword);\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    if (event) {\n      callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n    }\n  };\n  useEffect(function () {\n    handleSearch(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchKeyword]);\n  useEffect(function () {\n    setSearchKeyword(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : '');\n  }, [searchKeyword, setSearchKeyword]);\n  var setVisibleData = useCallback(function (data, searchKeyword) {\n    setFilteredData(filterVisibleData(data, searchKeyword));\n  }, [filterVisibleData]);\n  return {\n    keyword: keyword,\n    filteredData: filteredData,\n    setFilteredData: setVisibleData,\n    setSearchKeyword: setSearchKeyword,\n    handleSearch: handleSearch\n  };\n}","map":null,"metadata":{},"sourceType":"module"}