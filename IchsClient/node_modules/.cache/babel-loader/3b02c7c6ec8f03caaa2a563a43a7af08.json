{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2;\nvar _excluded = [\"as\", \"classPrefix\", \"closable\", \"duration\", \"className\", \"type\", \"header\", \"children\", \"onClose\"];\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { MESSAGE_STATUS_ICONS } from \"../internals/constants/statusIcons.js\";\nimport { useClassNames, useTimeout, useIsMounted, useEventCallback } from \"../internals/hooks/index.js\";\nimport { oneOf } from \"../internals/propTypes/index.js\";\nimport CloseButton from \"../internals/CloseButton/index.js\";\nimport ToastContext from \"../toaster/ToastContext.js\";\n/**\n * The `Notification` component is used to display global messages and notifications.\n *\n * @see https://rsuitejs.com/components/notification\n */\nvar Notification = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'notification' : _props$classPrefix,\n    closable = props.closable,\n    _props$duration = props.duration,\n    duration = _props$duration === void 0 ? 4500 : _props$duration,\n    className = props.className,\n    type = props.type,\n    header = props.header,\n    children = props.children,\n    onClose = props.onClose,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useState = useState('show'),\n    display = _useState[0],\n    setDisplay = _useState[1];\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var isMounted = useIsMounted();\n  var _useContext = useContext(ToastContext),\n    usedToaster = _useContext.usedToaster;\n\n  // Timed close message\n  var _useTimeout = useTimeout(onClose, duration, usedToaster && duration > 0),\n    clear = _useTimeout.clear;\n\n  // Click to trigger to close the message\n  var handleClose = useEventCallback(function (event) {\n    setDisplay('hiding');\n    onClose === null || onClose === void 0 ? void 0 : onClose(event);\n    clear();\n    setTimeout(function () {\n      if (isMounted()) {\n        setDisplay('hide');\n      }\n    }, 1000);\n  });\n  var renderHeader = function renderHeader() {\n    if (!header) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('title')\n    }, type ? /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"title-with-icon\"])))\n    }, MESSAGE_STATUS_ICONS[type], header) : /*#__PURE__*/React.createElement(\"div\", {\n      className: prefix('title')\n    }, header));\n  };\n  if (display === 'hide') {\n    return null;\n  }\n  var classes = merge(className, withClassPrefix(type, display, {\n    closable: closable\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"alert\"\n  }, rest, {\n    ref: ref,\n    className: classes\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"content\"])))\n  }, renderHeader(), /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('description')\n  }, typeof children === 'function' ? children() : children)), closable && /*#__PURE__*/React.createElement(CloseButton, {\n    onClick: handleClose\n  }));\n});\nNotification.displayName = 'Notification';\nNotification.propTypes = {\n  as: PropTypes.elementType,\n  duration: PropTypes.number,\n  header: PropTypes.node,\n  closable: PropTypes.bool,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  type: oneOf(['info', 'success', 'warning', 'error']),\n  onClose: PropTypes.func\n};\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}