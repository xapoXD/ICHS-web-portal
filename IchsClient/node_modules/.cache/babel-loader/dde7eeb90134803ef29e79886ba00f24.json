{"ast":null,"code":"'use client';\n\nimport { SchemaModel } from 'schema-typed';\nimport { useRef, useCallback } from 'react';\nfunction useSchemaModel(formModel) {\n  var subRulesRef = useRef([]);\n  var pushFieldRule = useCallback(function (name, fieldRule) {\n    subRulesRef.current.push({\n      name: name,\n      fieldRule: fieldRule\n    });\n  }, []);\n  var removeFieldRule = useCallback(function (name) {\n    var index = subRulesRef.current.findIndex(function (v) {\n      return v.name === name;\n    });\n    subRulesRef.current.splice(index, 1);\n  }, []);\n  var getCombinedModel = useCallback(function () {\n    var realSubRules = subRulesRef.current.filter(function (v) {\n      return Boolean(v.fieldRule.current);\n    });\n\n    // If there is no sub rule, return the original form model\n    if (realSubRules.length === 0) {\n      return formModel;\n    }\n    return SchemaModel.combine(formModel, SchemaModel(realSubRules.map(function (_ref) {\n      var _ref2;\n      var name = _ref.name,\n        fieldRule = _ref.fieldRule;\n      return _ref2 = {}, _ref2[name] = fieldRule.current, _ref2;\n    }).reduce(function (a, b) {\n      return Object.assign(a, b);\n    }, {})));\n  }, [formModel]);\n  return {\n    getCombinedModel: getCombinedModel,\n    pushFieldRule: pushFieldRule,\n    removeFieldRule: removeFieldRule\n  };\n}\nexport default useSchemaModel;","map":null,"metadata":{},"sourceType":"module"}