{"ast":null,"code":"'use client';\n\nimport { createContext, useContext, useRef, useCallback } from 'react';\nvar defaultItemDataKeys = {\n  labelKey: 'label',\n  valueKey: 'value',\n  childrenKey: 'children',\n  virtualized: false\n};\nvar TreeContext = /*#__PURE__*/createContext({\n  props: defaultItemDataKeys\n});\nexport var TreeProvider = TreeContext.Provider;\nexport var useRegisterTreeMethods = function useRegisterTreeMethods() {\n  var _useContext = useContext(TreeContext),\n    register = _useContext.register;\n  return register;\n};\nexport var useTreeCustomRenderer = function useTreeCustomRenderer() {\n  var _useContext2 = useContext(TreeContext),\n    _useContext2$props = _useContext2.props,\n    renderTreeIcon = _useContext2$props.renderTreeIcon,\n    renderTreeNode = _useContext2$props.renderTreeNode;\n  return {\n    renderTreeIcon: renderTreeIcon,\n    renderTreeNode: renderTreeNode\n  };\n};\nexport var useItemDataKeys = function useItemDataKeys() {\n  var _useContext3 = useContext(TreeContext),\n    _useContext3$props = _useContext3.props,\n    _useContext3$props2 = _useContext3$props === void 0 ? defaultItemDataKeys : _useContext3$props,\n    labelKey = _useContext3$props2.labelKey,\n    valueKey = _useContext3$props2.valueKey,\n    childrenKey = _useContext3$props2.childrenKey;\n  return {\n    labelKey: labelKey,\n    valueKey: valueKey,\n    childrenKey: childrenKey\n  };\n};\nexport var useTreeContextProps = function useTreeContextProps() {\n  var _useContext4 = useContext(TreeContext),\n    props = _useContext4.props;\n  return props;\n};\n\n/**\n * Custom hook that provides imperative handle for the Tree component.\n */\nexport var useTreeImperativeHandle = function useTreeImperativeHandle() {\n  var focusFirstNodeRef = useRef(null);\n  var focusActiveNodeRef = useRef(null);\n  var register = useCallback(function (_ref) {\n    var focusTreeFirstNode = _ref.focusTreeFirstNode,\n      focusTreeActiveNode = _ref.focusTreeActiveNode;\n    focusFirstNodeRef.current = focusTreeFirstNode;\n    focusActiveNodeRef.current = focusTreeActiveNode;\n    return function () {\n      focusFirstNodeRef.current = null;\n      focusActiveNodeRef.current = null;\n    };\n  }, []);\n  return {\n    register: register,\n    focusFirstNode: function focusFirstNode() {\n      var _focusFirstNodeRef$cu;\n      return (_focusFirstNodeRef$cu = focusFirstNodeRef.current) === null || _focusFirstNodeRef$cu === void 0 ? void 0 : _focusFirstNodeRef$cu.call(focusFirstNodeRef);\n    },\n    focusActiveNode: function focusActiveNode() {\n      var _focusActiveNodeRef$c;\n      return (_focusActiveNodeRef$c = focusActiveNodeRef.current) === null || _focusActiveNodeRef$c === void 0 ? void 0 : _focusActiveNodeRef$c.call(focusActiveNodeRef);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}